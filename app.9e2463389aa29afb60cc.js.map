{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./.fable/fable-library.2.3.11/Util.js","webpack:///./.fable/fable-library.2.3.11/Types.js","webpack:///./.fable/fable-library.2.3.11/Option.js","webpack:///./.fable/fable-library.2.3.11/Int32.js","webpack:///./.fable/fable-library.2.3.11/Long.js","webpack:///./.fable/fable-library.2.3.11/Seq.js","webpack:///./.fable/fable-library.2.3.11/Reflection.js","webpack:///./.fable/fable-library.2.3.11/Date.js","webpack:///./.fable/fable-library.2.3.11/String.js","webpack:///./.fable/fable-library.2.3.11/Map.js","webpack:///./.fable/fable-library.2.3.11/Set.js","webpack:///./.fable/fable-library.2.3.11/Array.js","webpack:///./.fable/fable-library.2.3.11/List.js","webpack:///.fable/Fable.Elmish.3.0.3/ring.fs","webpack:///./.fable/fable-library.2.3.11/BigInt/n.js","webpack:///./.fable/fable-library.2.3.11/lib/big.js","webpack:///./.fable/fable-library.2.3.11/Decimal.js","webpack:///./.fable/fable-library.2.3.11/BigInt/z.js","webpack:///./.fable/fable-library.2.3.11/BigInt.js","webpack:///./.fable/fable-library.2.3.11/TimeSpan.js","webpack:///.fable/Thoth.Json.3.2.0/Decode.fs","webpack:///.fable/Thoth.Json.3.2.0/Encode.fs","webpack:///.fable/Fulma.2.1.0/Common.fs","webpack:///.fable/Fulma.2.1.0/Layouts/Container.fs","webpack:///.fable/Fulma.2.1.0/Elements/Heading.fs","webpack:///.fable/Fulma.2.1.0/Layouts/Columns.fs","webpack:///.fable/Fulma.2.1.0/Elements/Content.fs","webpack:///.fable/Fulma.2.1.0/Elements/Form/File.fs","webpack:///.fable/Fable.FontAwesome.2.0.0/FontAwesome.fs","webpack:///.fable/Fulma.2.1.0/Elements/Form/Input.fs","webpack:///.fable/Fulma.2.1.0/Components/Dropdown.fs","webpack:///./.fable/fable-library.2.3.11/AsyncBuilder.js","webpack:///./.fable/fable-library.2.3.11/Async.js","webpack:///.fable/Fable.Elmish.3.0.3/cmd.fs","webpack:///.fable/Fable.Elmish.3.0.3/program.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/common.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/react.fs","webpack:///src/App.fs"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","isDisposable","x","Dispose","Lazy","factory","_classCallCheck","this","isValueCreated","_createClass","createdValue","padWithZeros","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","idMap","has","set","count","stringHash","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","_typeof","GetHashCode","isArray","ar","Array","String","ArrayBuffer","isView","equalArraysWith","y","eq","equalArrays","equals","Equals","Date","compareDates","xtime","ytime","getTime","comparePrimitives","compareArraysWith","comp","compareArrays","compare","CompareTo","max","comparer","WeakMap","CaseRules","None","LowerFirst","changeCase","caseRule","charAt","toLowerCase","createObj","fields","fail","kvPair","Error","definedCaseRule","arguments","undefined","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","iterator","next","done","toJSON","err","CURRIED_KEY","uncurry","arity","f","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","curry","partialApply","args","concat","mapCurriedArgs","fn","mappings","arg","mapArg","idx","mapping","expectedArity","actualArity","res","sameType","getPrototypeOf","constructor","declare","cons","superClass","subClass","writable","configurable","inherits","SystemObject","compareList","self","other","tail","head","List","Union","tag","_len","_key","recordToJson","record","getFieldNames","keys","recordEquals","thisNames","recordCompare","Record","_this","map","k","join","id","identityHash","from","cur","tmp","_this2","_this3","FSharpRef","contents","Exception","msg","stack","message","getFSharpExceptionFieldNames","filter","FSharpException","_this4","fieldNames","_this5","arg1","arg2","arg3","Some","Option_classCallCheck","some","acceptNull","defaultArg","defaultValue","field","Result","NumberStyles","getRange","unsigned","bitsize","isValid","style","exec","replace","_res","_slicedToArray","prefix","digits","getInvalidDigits","AllowHexSpecifier","getRadix","test","regexMatch","_regexMatch","sign","validResponse","parse","v","Number","parseInt","isNaN","_getRange2","umin","umax","_getRange4","min","tryParse","_a","op_UnaryNegation_Int32","wasm","WebAssembly","Instance","Module","Uint8Array","e","Long","low","high","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","op_UnaryNegation","TWO_PWR_32_DBL","fromInteger","xh","lowBits","highBits","pow_dbl","Math","pow","fromString","RangeError","indexOf","substring","radixToPower","size","op_Addition","op_Multiply","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","div","op_Division","rem1","op_Subtraction","rem","remDiv","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","op_LogicalNot","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","numBits","op_RightShiftUnsigned","op_LeftShift","op_RightShift","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","op_Modulus","rem_u","rem_s","op_BitwiseAnd","fromBytes","bytes","le","fromBytesLE","fromBytesBE","toIterator","en","MoveNext","Current","append","xs","ys","delay","firstDone","iters","unfold","iter","output","innerIter","hasFinished","collect","_defineProperty","fold","acc","iterate","_","mapIndexed","rangeNumber","first","step","last","skip","take","truncate","fst","CaseInfo","declaringType","Reflection_classCallCheck","TypeInfo","fullname","generics","cases","fullName","getGenerics","t1","t2","type","union","option","generic","array","string","bool","int32","float64","info","lastIndexOf","substr","gen","endsWith","getElementType","isGenericType","getGenericTypeDefinition","getUnionCases","getRecordElements","getTupleElements","isTuple","isUnion","isRecord","startsWith","getUnionCaseFields","uci","assertUnion","dateOffsetToString","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","match","rep","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","dateToStringWithOffset","dateWithOffset","dateToStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","DateTime","now","fsFormatRegExp","toHex","longToString","longFromBytes","hi","lo","toBytesLE","toBytesBE","printf","input","cont","createPrinter","strCopy","_len2","_key2","_i","_args","formatOnce","toText","str2","flags","pad","precision","toFixed","toPrecision","toExponential","toUpperCase","plusPrefix","ch","padLeft","delimiter","_len4","_key4","isRight","MapTree$00602","MapTreeModule$$$empty","MapTreeModule$$$height","_arg1","MapTreeModule$$$mk","l$$1","r$$1","matchValue","hl","hr","MapTreeModule$$$rebalance","k$$1","v$$1","t1h","t2h","t2v","t2r","t2l","t2k","t2lv","t2lr","t2ll","t2lk","t1v","t1r","t1l","t1k","t1rv","t1rr","t1rl","t1rk","MapTreeModule$$$add","k$$2","v$$2","m$$3","k2","Compare","v2","r$$2","l$$2","k2$$1","h$$1","c$$1","MapTreeModule$$$tryFind","comparer$$2","k$$4","m$$5","v2$$3","k2$$4","v2$$4","r$$4","l$$4","k2$$5","c$$5","MapTreeModule$002EMapIterator$00602","started","MapTreeModule$$$collapseLHS","$stack$$81","MapTreeModule$$$mkIterator","s$$5","MapTreeModule$$$current","i$$2","matchValue$$4","MapTreeModule$$$alreadyFinished","MapTreeModule$$$notStarted","MapTreeModule$002EmkIEnumerator$0027$00602","s$$6","MapTreeModule$$$mkIEnumerator","s$$7","MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C","i$$3","matchValue$$5","MapTreeModule$$$moveNext","Reset","FSharpMap","comparer$$17","tree","FSharpMap$$$$002Ector$$58ADD115","FSharpMap$$get_Tree","__$$5","FSharpMap$$Map$$Z6F6B671C","__$$18","f$$25","MapTreeModule$$$mapi","f$$11","m$$14","v$$11","k$$15","v$$12","r$$15","l$$15","k$$16","h$$3","l2$$1","v2$$17","r2$$1","add","k$$34","v$$26","m$$24","k$$28","v$$24","__$$6","tryFind","k$$36","m$$26","k$$33","__$$23","f$$35","m$$37","empty","comparer$$21","Map_toConsumableArray","map$$1","kv","combineHash","x$$16","y$$3","res$$3","e$$1","activePatternResult3097","that","m2","res$$4","finished","e1","e2","matchValue$$7","kvp1","kvp2","c$$10","SetTree$00601","SetTreeModule$$$SetOne","SetTreeModule$$$SetNode","SetTreeModule$002ESetIterator$00601","SetTreeModule$$$collapseLHS","$stack$$49","SetTreeModule$$$mkIterator","s$$13","SetTreeModule$$$current","matchValue$$6","SetTreeModule$$$alreadyFinished","SetTreeModule$$$notStarted","SetTreeModule$002EmkIEnumerator$00601","s$$14","SetTreeModule$$$mkIEnumerator","s$$15","SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56","SetTreeModule$$$compare","comparer$$18","s1","s2","matchValue$$9","l1","l2","SetTreeModule$$$compareStacks","$target$$52","t1$$6","t2$$6","n1k","n2k","t1$$7","t2$$7","n1k$$1","n2k$$1","n2r","t1$$8","t2$$8","emp","n1k$$2","n1r","n2k$$2","t1$$9","t2$$9","n1k$$3","n1r$$1","n2k$$3","n2r$$1","t1$$10","t2$$10","n1k$$4","t1$$11","n1k$$5","n1l","n1r$$2","t1$$12","n2k$$4","t2$$11","n2k$$5","n2l","n2r$$2","t2$$12","matchValue$$8","c$$7","c$$8","c$$9","$l2$$59","$l2$$61","i$$1","SetTreeModule$$$moveNext","FSharpSet","comparer$$22","FSharpSet$$get_Comparer","__$$4","FSharpSet$$get_Tree","fill","target","targetIndex","f$$1","source$$1","cons$$2","len$$1","target$$2","i$$4","x$$1","initialize","count$$8","initializer","cons$$15","result$$6","i$$15","folder$$4","state$$6","array$$74","ofList","source$$9","cons$$32","tryLast","_arg1$$4","$arg$$14","$arg$$15","$arg$$16","f$$2","state$$1","xs$$8","reverse","xs$$9","acc$$1","x$$6","ofSeq","xs$$12","fold$$1","acc$$3","x$$9","xs$$27","acc$$9","_arg1$$7","xs$$28","ys$$10","acc$$10","x$$15","f$$16","xs$$31","acc$$11","f$$24","xs$$46","unitVar0","x$$24","ofArray","xs$$50","col","res$$1","i$$9","f$$42","xs$$71","acc$$17","x$$37","contains","list","xs$$76","rest","loop$$1","Set_toConsumableArray","x$$22","y$$4","that$$1","Map","( .ctor )","BigNat","bound","BigNatModule$002EFFT$$$pow32","BigNatModule$002EFFT$$$maxTwoPower","Int32Array","BigNatModule$$$bound","n$$10","BigNatModule$$$coeff","n$$12","i$$5","BigNatModule$$$coeff64","n$$13","i$$6","BigNatModule$$$setCoeff","n$$14","i$$7","v$$4","BigNatModule$$$pow64","x$$23","n$$15","$n$$15$$11","BigNatModule$$$pow32","n$$16","BigNatModule$$$baseBits","BigNatModule$$$baseN","BigNatModule$$$baseNi64","BigNatModule$$$baseMaski64","BigNatModule$$$createN","b$$4","BigNatModule$$$normN","n$$18","bound$$1","na","findLeastBound","BigNatModule$$$boundInt","BigNatModule$$$boundInt64","BigNatModule$$$embed","x$$28","x$$29","r$$3","i$$10","BigNatModule$$$one","BigNatModule$$$zero","BigNatModule$$$degree","n$$24","BigNatModule$$$isZero","p$$4","BigNatModule$$$equal","p$$7","q$$4","pa","qa","i$$22","check","BigNatModule$$$compare","p$$9","q$$6","pa$$2","qa$$2","i$$24","check$$2","BigNatModule$$$lt","p$$10","q$$7","BigNatModule$$$mulSchoolBookCarry","r$$12","rak$$1","$k$$4$$43","BigNatModule$$$mulSchoolBookOneSmall","p$$16","q$$12","bp","r$$13","q$$13","i$$28","rak$$2","BigNatModule$$$mulSchoolBook","p$$18","q$$15","p$$15","q$$11","r$$11","rak","pSmall","qSmall","p$$17","q$$14","r$$14","ra","pa$$3","qa$$3","i$$29","pai$$1","k$$5","j$$1","qaj","rak$$3","BigNatModule$$$mulSchoolBookNeitherSmall","BigNatModule$002Eencoding","arg4","arg5","arg6","arg7","bigL","twoToBigL","bigK","bigN","split","splits","BigNatModule$$$mkEncoding","k$$6","bigK$$2","i$$30","BigNatModule$$$table","i$$32","i$$33","i$$34","BigNatModule$$$mul","p$$20","q$$17","BigNatModule$$$scaleSubInPlace","x$$57","a$$5","n$$30","xres","patternInput$$2","patternInput$$3","j$$4","z$$7","zLo","zHi","BigNatModule$$$scaleAddInPlace","x$$62","f$$3","a$$8","n$$32","xres$$1","patternInput$$4","patternInput$$5","f$$4","j$$5","z$$8","zLo$$1","zHi$$1","BigNatModule$$$removeFactor","x$$67","a$$11","n$$34","patternInput$$6","f$$6","p$$8","pn","q$$5","qn","patternInput$$7","pa$$1","qa$$1","i$$23","pai","qai","check$$1","BigNatModule$$$divmod","b$$7","a$$12","x$$68","x$$27","array$$29","d$$6","p$$21","m$$2","n$$35","f$$7","BigNatModule$$$ofInt32","n$$41","BigNatModule$$$ofInt64","n$$42","x$$30","x$$31","i$$11","BigNatModule$$$embed64","BigNatModule$$$toString","n$$45","degn","prior$$2","prior","k$$11","ten2k","$k$$11$$64","$ten2k$$65","route","digits$$4","isLeading","n$$46","_arg1$$3","ten2k$$1","prior$$1","patternInput$$13","digits$$2","n$$47","n$$19","i$$12","BigNatModule$$$eval32","n_toConsumableArray","BigNatModule$$$isSmall","n$$48","BigNatModule$$$getSmall","n$$49","P","cmp","DP","RM","MAX_DP","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","UNDEFINED","NUMERIC","nl","search","round","Big","dp","rm","more","xc","unshift","pop","stringify","z","isneg","yc","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","mod","ygtx","times","one","sqrt","sd","valueOf","_Big_","findIndex","normalize","version","Decimal","BigInteger","signInt","BigInteger$$$$002Ector$$Z2BE94A1","BigInteger$$$nat$$Z67CCE57D","n$$1","BigNatModule$0024$0024$0024isSmall","BigNatModule$0024$0024$0024getSmall","smallLim","smallPosTab","BigInteger$$get_SignInt","BigInteger$$get_V","x$$2","BigInteger$$$op_Equality$$56F059C0","x$$3","BigNatModule$0024$0024$0024equal","BigNatModule$0024$0024$0024isZero","BigInteger$$$op_LessThan$$56F059C0","x$$5","y$$2","matchValue$$1","BigNatModule$0024$0024$0024lt","BigInteger$$$$002Ector$$Z524259A4","n$$6","BigNatModule$0024$0024$0024ofInt32","BigNatModule$0024$0024$0024ofInt64","BigInteger$$$get_One","BigInteger$$$get_Two","two","BigInteger$$$get_Zero","zero","BigNatModule$0024$0024$0024toString","n$$17","res$$2","i$$8","BigNatModule$0024$0024$0024hash","obj$$1","n$$5","nn","BigInteger$0024$0024$0024get_Zero","BigInteger$0024$0024$0024get_One","BigInteger$0024$0024$0024get_Two","ts","days","hours","seconds","ms","milliseconds","lengthLeft","lengthRight","padLeftAndRightWithZeros","newLine","JSON","path","error","reason","genericMsg","fieldName","messages","Decode_toConsumableArray","decoder","clo1","arg10","Option_Result","errorToString","success","SyntaxError","ErrorReason","er","currentPath","List_tryLast","tokens","arr","Array_fold","errors","unwrapWith","$this$$3","fieldValue","isUndefined","firstPath","firstValue","List_fold","tupledArg","badPathError","curValue","decodeMaybeNull","optional","$target$$125","v$$6","builder","getters","List_ofSeq","List_length","List_map","__","required","values","Date_toString","space","encoder","$arg$$1","defThunk","nil","extra","isCamelCase","encoderRef","Map_add","setters","Array_map","fi","targetKey","Reflection_name","encode","autoEncoder","source","patternInput","case_","getUnionFields","fieldTypes","Map_tryFind","Reflection_isArray","seq","Seq_map","encoders","Value","keyType","valueEncoder","activePatternResult5970","keyEncoder","clo3","arg30","_arg2","activePatternResult5974","autoEncodeRecordsAndUnions","datetime","datetimeOffset","timespan","guid","Map_map","Map_empty","resolver","makeExtra","ResolveType","case","screen","getCaseName","level","getCaseTag","options","x$$4","ofText","ToString","console","warn","display","toDisplayOnlyClass","ofInvisibleOnly","ofHiddenOnly","ofBackground","parser","baseClass","baseProps","Common$002EGenericOptions","AddClass","AddProps","prop","Props","Classes","props","List_append","cl","modifiers","parseModifiers","el","children","HTMLAttr","Common_toConsumableArray","AddModifiers","Common$002EGenericOptions$$ToReactElement$$Z6D3CD4B7","Common$002EGenericOptions$$$Parse$$9AE2F7C","Common$002EGenericOptions$$AddCaseName$$1505","Common$002EGenericOptions$$AddProps$$416C4D0B","Common$002EGenericOptions$$AddClass$$Z721C83C5","Common$002EGenericOptions$$AddModifiers$$5BB435D5","react","Container_toConsumableArray","element","classes","List_filter","cls","Reflection$$$getCaseName","msg$$1","List_contains","$x$$1","$y$$2","Screen$$$ToString$$2D2414B4","$x$$3","$y$$4","Columns_toConsumableArray","className","suffix","width","Column_toConsumableArray","$target$$1","state","Color$$$ofColor","File_toConsumableArray","Common$$$parseOptions","Common$002EGenericOptions$$ToReactElement$$Z46A53D36","std","booleans","complete","opt","faOptions","Fa$002EIconOptions","Icon","Size","Pull","HaveSpin","HavePulse","Rotation","Flip","IsInverse","FixedWidth","IsLi","StackSize","CustomClass","Border","faIcon","customClass","ofSize","baseElement","opts","List_ofArray","displayIcon","FontAwesome_toConsumableArray","toIconOptions","Icon_toConsumableArray","type'","Common$002EGenericOptions$$AddProp$$7BFEDA81","typ","ofType","disabled","valueOrDefault","Prop","placeholder","cb","DOMAttr","ref","$target$$4","isDisabled","btnView","Button_toConsumableArray","Dropdown_toConsumableArray","item","CancellationToken","cancelled","AsyncBuilder_classCallCheck","_id","_cancelled","_listeners","AsyncBuilder_createClass","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","listener","AsyncBuilder_slicedToArray","$","addListener","removeListener","OperationCanceledError","_Error","_getPrototypeOf","setPrototypeOf","_assertThisInitialized","_inherits","_wrapNativeSuper","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","AsyncBuilder","computation1","computation2","Bind","generator","sequence","body","While","Delay","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","dispatch","cmd","List_iterate","text","RingState$00601","wix","rix","items","rix'","ix","source$$8","wix'","Seq_collect","setState","program","Program$00604","init","update","subscribe","view","syncDispatch","rb","RingBuffer$00601$$$$002Ector$$Z524259A4","reentered","RingBuffer$00601$$Push$$2B595","nextMsg","Option_value","Cmd$$$exec","RingBuffer$00601$$Pop","Cmd$$$none","equal","Components$002ELazyView$00601","LazyProps$00601","lazyView2With","placeholderId","ProgramModule$$$withSetState","model","react_dom","ProgramModule$$$view","document","getElementById","nextProps","_nextState","render","Datum","Required","Field","int$","Decode_string","Optional","Decode_bool","float$","addEventListener","ev","Msg","keyCode","Model","Mode","subscribeToKeyEvents","wavesurfer","wavesurfer_min","container","waveColor","progressColor","barHeight","minPxPerSec","forceDecode","scrollParent","timeIncrement","desiredMilliseconds","seekTo","getDuration","seekAndCenter","datum","clearRegions","addRegion","start","Start","end","Stop","color","newTime","startIndex","index","notFound","Status","range","array$$45","Text","Id","WavFile","FrontAligned","EndAligned","SumAlignmentDiff","ProportionAligned","JsonFile","Index","activeElement","blur","loadBlob","on","fileReader","FileReader","onload","readAsText","clear","center","ExpandedText","unsafeFromString","Decoder","Decode_array","iterate$$1","nextValidDatumIndex","addPlugin","wavesurfer_regions_min","initPlugin","play","newId","boundedTimeShift","updateWavesurferRegion","seekCenterWavesurfer","isPlaying","pause","filename","createElement","href","encodeURIComponent","Auto$$$toString$$59982D9A","Datum$reflection","setAttribute","click","txt","action","onClick","Section_toConsumableArray","section","hidden","Option","Heading_Option","title","Heading_toConsumableArray","Content_toConsumableArray","columns","Columns_Option","column","Column_Option","Screen","Column_ISize","File_file","File_Option","files","label","File_input","Common$002EGenericOption","cta","icon","Icon_icon","Fa$$$i","Fa$002EIconOption","File_name","file","Modifier$002EIModifier","TextAlignment$002EOption","Color$002EIColor","Input_input","Input_Option","IInputType","height","fontSize","Button_button","Button_Option","dropdown","Dropdown_Option","Icon_Option","Size$002EISize","Item$$$a","prelude_onError","runWith","withReactSynchronousUsing","Common$$$lazyView2With"],"mappings":"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AAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,E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","file":"app.9e2463389aa29afb60cc.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([186,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// tslint:disable:ban-types\n// Object.assign flattens getters and setters\n// See https://stackoverflow.com/questions/37054596/js-es5-how-to-assign-objects-with-setters-and-getters\nexport function extend(target, ...sources) {\n    for (const source of sources) {\n        for (const key of Object.keys(source)) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        }\n    }\n    return target;\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (typeof comparer.Compare === \"function\") {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n// TODO: Move these three methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (typeof x.GetHashCode === \"function\") {\n                return x.GetHashCode();\n            }\n            else if (isArray(x)) {\n                const ar = x;\n                const len = ar.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(ar[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(String(x));\n            }\n        }\n    }\n}\nexport function isArray(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\n// export function equalObjects(x: { [k: string]: any }, y: { [k: string]: any }): boolean {\n//   if (x == null) { return y == null; }\n//   if (y == null) { return false; }\n//   const xKeys = Object.keys(x);\n//   const yKeys = Object.keys(y);\n//   if (xKeys.length !== yKeys.length) {\n//     return false;\n//   }\n//   xKeys.sort();\n//   yKeys.sort();\n//   for (let i = 0; i < xKeys.length; i++) {\n//     if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (typeof x.Equals === \"function\") {\n        return x.Equals(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return false;\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nexport function compareObjects(x, y) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (typeof x.CompareTo === \"function\") {\n        return x.CompareTo(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && compareArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y);\n    }\n    else {\n        return 1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value) => {\n        if (value === void 0) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n};\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function createObj(fields, caseRule = CaseRules.None) {\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    const o = {};\n    const definedCaseRule = caseRule;\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (typeof kvPair.toJSON === \"function\") {\n            kvPair = kvPair.toJSON();\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    o[changeCase(kvPair[0], caseRule)] = true;\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    o[changeCase(kvPair[0], caseRule)] = value;\n                    break;\n                default:\n                    o[changeCase(kvPair[0], caseRule)] = kvPair.slice(1);\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            o[changeCase(kvPair, caseRule)] = true;\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return o;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    return isArray(col) ? col.length : col.size;\n}\nexport function clear(col) {\n    if (isArray(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return null;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        //   if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return null;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return null;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (var i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(null, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(null, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(null, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(null, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(null, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return function (arg) {\n                return mapArg(res, arg, mappings, idx + 1);\n            };\n        }\n    }\n    return function (arg) {\n        return mapArg(fn, arg, mappings, 0);\n    };\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","import { combineHashCodes, compare, compareArrays, equals, equalArrays, identityHash, structuralHash, numberHash } from \"./Util\";\nfunction sameType(x, y) {\n    return y != null && Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\n// Taken from Babel helpers\nfunction inherits(subClass, superClass) {\n    // if (typeof superClass !== \"function\" && superClass !== null) {\n    //   throw new TypeError(\n    //     \"Super expression must either be null or a function, not \" +\n    //       typeof superClass\n    //   );\n    // }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n    // if (superClass)\n    //   Object.setPrototypeOf\n    //     ? Object.setPrototypeOf(subClass, superClass)\n    //     : (subClass.__proto__ = superClass);\n}\nexport function declare(cons, superClass) {\n    inherits(cons, superClass || SystemObject);\n    return cons;\n}\nexport function SystemObject() {\n}\nSystemObject.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map(k => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nSystemObject.prototype.GetHashCode = function () {\n    return identityHash(this);\n};\nSystemObject.prototype.Equals = function (other) {\n    return this === other;\n};\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport function List(head, tail) {\n    this.head = head;\n    this.tail = tail;\n}\nList.prototype.toString = function () {\n    return \"[\" + Array.from(this).map(x => String(x)).join(\"; \") + \"]\";\n};\nList.prototype.toJSON = function () {\n    return Array.from(this);\n};\nList.prototype[Symbol.iterator] = function () {\n    let cur = this;\n    return {\n        next: () => {\n            const tmp = cur;\n            cur = cur.tail;\n            return { done: tmp.tail == null, value: tmp.head };\n        },\n    };\n};\nList.prototype.GetHashCode = function () {\n    const hashes = Array.from(this).map(structuralHash);\n    return combineHashCodes(hashes);\n};\nList.prototype.Equals = function (other) {\n    return compareList(this, other) === 0;\n};\nList.prototype.CompareTo = function (other) {\n    return compareList(this, other);\n};\nexport function Union(tag, name, ...fields) {\n    this.tag = tag | 0;\n    this.name = name;\n    this.fields = fields;\n}\nUnion.prototype.toString = function () {\n    const len = this.fields.length;\n    if (len === 0) {\n        return this.name;\n    }\n    else if (len === 1) {\n        return this.name + \" \" + String(this.fields[0]);\n    }\n    else {\n        return this.name + \" (\" + this.fields.map(x => String(x)).join(\",\") + \")\";\n    }\n};\nUnion.prototype.toJSON = function () {\n    return this.fields.length === 0\n        ? this.name\n        : [this.name].concat(this.fields);\n};\nUnion.prototype.GetHashCode = function () {\n    let hashes = this.fields.map(x => structuralHash(x));\n    hashes.splice(0, 0, numberHash(this.tag));\n    return combineHashCodes(hashes);\n};\nUnion.prototype.Equals = function (other) {\n    return this === other\n        || (sameType(this, other)\n            && this.tag === other.tag\n            && equalArrays(this.fields, other.fields));\n};\nUnion.prototype.CompareTo = function (other) {\n    if (this === other) {\n        return 0;\n    }\n    else if (!sameType(this, other)) {\n        return -1;\n    }\n    else if (this.tag === other.tag) {\n        return compareArrays(this.fields, other.fields);\n    }\n    else {\n        return this.tag < other.tag ? -1 : 1;\n    }\n};\nfunction recordToJson(record, getFieldNames) {\n    const o = {};\n    const keys = getFieldNames == null ? Object.keys(record) : getFieldNames(record);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = record[keys[i]];\n    }\n    return o;\n}\nfunction recordEquals(self, other, getFieldNames) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameType(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompare(self, other, getFieldNames) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameType(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport function Record() {\n}\nRecord.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map(k => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nRecord.prototype.toJSON = function () {\n    return recordToJson(this);\n};\nRecord.prototype.GetHashCode = function () {\n    const hashes = Object.keys(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nRecord.prototype.Equals = function (other) {\n    return recordEquals(this, other);\n};\nRecord.prototype.CompareTo = function (other) {\n    return recordCompare(this, other);\n};\nexport function anonRecord(o) {\n    return Object.assign(Object.create(Record.prototype), o);\n}\nexport const FSharpRef = declare(function FSharpRef(contents) {\n    this.contents = contents;\n}, Record);\n// EXCEPTIONS\nexport const Exception = declare(function Exception(msg) {\n    this.stack = Error().stack;\n    this.message = msg;\n});\nexport function isException(x) {\n    return x instanceof Error || x instanceof Exception;\n}\nfunction getFSharpExceptionFieldNames(self) {\n    return Object.keys(self).filter(k => k !== \"message\" && k !== \"stack\");\n}\nexport const FSharpException = declare(function FSharpException() {\n    Exception.call(this);\n}, Exception);\nFSharpException.prototype.toString = function () {\n    const fieldNames = getFSharpExceptionFieldNames(this);\n    const len = fieldNames.length;\n    if (len === 0) {\n        return this.message;\n    }\n    else if (len === 1) {\n        return this.message + \" \" + String(this[fieldNames[0]]);\n    }\n    else {\n        return this.message + \" (\" + fieldNames.map(k => String(this[k])).join(\",\") + \")\";\n    }\n};\nFSharpException.prototype.toJSON = function () {\n    return recordToJson(this, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.GetHashCode = function () {\n    const hashes = getFSharpExceptionFieldNames(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nFSharpException.prototype.Equals = function (other) {\n    return recordEquals(this, other, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.CompareTo = function (other) {\n    return recordCompare(this, other, getFSharpExceptionFieldNames);\n};\nexport const MatchFailureException = declare(function MatchFailureException(arg1, arg2, arg3) {\n    this.arg1 = arg1;\n    this.arg2 = arg2 | 0;\n    this.arg3 = arg3 | 0;\n    this.message = \"The match cases were incomplete\";\n}, FSharpException);\nexport const Attribute = declare(function Attribute() { });\n","import { declare, Union } from \"./Types\";\nimport { compare, equals, structuralHash } from \"./Util\";\n// Options are erased in runtime by Fable, but we have\n// the `Some` type below to wrap values that would evaluate\n// to null in runtime. These two rules must be followed:\n// 1- None is always null in runtime, a non-strict null check\n//    (`x == null`) is enough to check the case of an option.\n// 2- To get the value of an option the `getValue` helper\n//    below must **always** be used.\n// export type Option<T> = T | Some<T>;\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    toJSON() {\n        return this.value;\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        return other == null\n            ? false\n            : equals(this.value, other instanceof Some ? other.value : other);\n    }\n    CompareTo(other) {\n        return other == null\n            ? 1\n            : compare(this.value, other instanceof Some ? other.value : other);\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x, acceptNull) {\n    if (x == null) {\n        if (!acceptNull) {\n            throw new Error(\"Option has no value\");\n        }\n        return null;\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function defaultArg(arg, defaultValue, f) {\n    return arg == null ? defaultValue : (f != null ? f(value(arg)) : value(arg));\n}\nexport function defaultArgWith(arg, defThunk) {\n    return arg == null ? defThunk() : value(arg);\n}\nexport function filter(predicate, arg) {\n    return arg != null ? (!predicate(value(arg)) ? null : arg) : arg;\n}\nexport function map(predicate, ...args) {\n    return args.every(x => x != null) ? predicate.apply(null, args) : null;\n}\n// CHOICE\nexport const Choice = declare(function Choice(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function choice1(x) {\n    return new Choice(0, \"Choice1Of2\", x);\n}\nexport function choice2(x) {\n    return new Choice(1, \"Choice2Of2\", x);\n}\nexport function tryValueIfChoice1(x) {\n    return x.tag === 0 ? some(x.fields[0]) : null;\n}\nexport function tryValueIfChoice2(x) {\n    return x.tag === 1 ? some(x.fields[0]) : null;\n}\n// RESULT\nexport const Result = declare(function Result(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function ok(x) {\n    return new Result(0, \"Ok\", x);\n}\nexport function error(x) {\n    return new Result(1, \"Error\", x);\n}\nexport function mapOk(f, result) {\n    return result.tag === 0 ? ok(f(result.fields[0])) : result;\n}\nexport function mapError(f, result) {\n    return result.tag === 1 ? error(f(result.fields[0])) : result;\n}\nexport function bindOk(f, result) {\n    return result.tag === 0 ? f(result.fields[0]) : result;\n}\n","export var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [_all, sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(\"_\", \"\"));\n    if (res != null) {\n        const [_all, sign, prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, 0];\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/f572e3a17d313730cf11eb838f6d2a5e31626f8a/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { isValid } from \"./Int32\";\nimport { combineHashCodes } from \"./Util\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport default function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    return combineHashCodes([this.unsigned ? 1 : 0, this.high, this.low]);\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nexport const neg = op_UnaryNegation;\nexport const not = op_LogicalNot;\nexport const add = op_Addition;\nexport const sub = op_Subtraction;\nexport const mul = op_Multiply;\nexport const div = op_Division;\nexport const mod = op_Modulus;\nexport const shl = op_LeftShift;\nexport const shr = op_RightShift;\nexport const and = op_BitwiseAnd;\nexport const or = op_BitwiseOr;\nexport const xor = op_ExclusiveOr;\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return op_UnaryNegation(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * @param {number} value\n * @param {boolean} unsigned\n * @param {number} kind\n * @returns {!Long}\n * @inner\n */\nexport function fromInteger(value, unsigned, kind) {\n    var x;\n    var xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6: x = value >>> 0;\n    }\n    return fromBits(x, xh >> 31, unsigned);\n}\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return op_UnaryNegation(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = op_Addition(op_Multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = op_Multiply(result, radixToPower);\n            result = op_Addition(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= maxValue.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits, maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, ZERO];\n}\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = op_Division($this, radixLong), rem1 = op_Subtraction(op_Multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(op_UnaryNegation($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = op_Division(rem, radixToPower), intval = toInt(op_Subtraction(rem, op_Multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(op_UnaryNegation($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value is negative.\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value differs from the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value is less than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Compares this Long's value with the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(op_Subtraction($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Absolute value of the given number.\n */\nexport function abs($this) {\n    if (!$this.unsigned && isNegative($this))\n        return op_UnaryNegation($this);\n    else\n        return $this;\n}\n/**\n * Negates this Long's value.\n * @returns {!Long} Negated Long\n */\nexport function op_UnaryNegation($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return op_Addition(op_LogicalNot($this), ONE);\n}\n;\n/**\n * Returns the sum of this and the specified Long.\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function op_Addition($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function op_Subtraction($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return op_Addition($this, op_UnaryNegation(subtrahend));\n}\n;\n/**\n * Returns the product of this and the specified Long.\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function op_Multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return op_Multiply(op_UnaryNegation($this), op_UnaryNegation(multiplier));\n        else\n            return op_UnaryNegation(op_Multiply(op_UnaryNegation($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return op_UnaryNegation(op_Multiply($this, op_UnaryNegation(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function op_Division($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = op_RightShift($this, 1);\n                approx = op_LeftShift(op_Division(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = op_Subtraction($this, op_Multiply(divisor, approx));\n                    res = op_Addition(approx, op_Division(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return op_Division(op_UnaryNegation($this), op_UnaryNegation(divisor));\n            return op_UnaryNegation(op_Division(op_UnaryNegation($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return op_UnaryNegation(op_Division($this, op_UnaryNegation(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, op_RightShiftUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = op_Multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = op_Multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = op_Addition(res, approxRes);\n        rem = op_Subtraction(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long modulo the specified.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function op_Modulus($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return op_Subtraction($this, op_Multiply(op_Division($this, divisor), divisor));\n}\n;\n/**\n * Returns the bitwise NOT of this Long.\n * @returns {!Long}\n */\nexport function op_LogicalNot($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseAnd($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_ExclusiveOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_LeftShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShiftUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Converts this Long to signed.\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const zero = unsigned ? UZERO : ZERO;\n    return (x) => greaterThan(step, zero) && lessThanOrEqual(x, last)\n        || lessThan(step, zero) && greaterThanOrEqual(x, last)\n        ? [x, op_Addition(x, step)] : null;\n}\n","import { makeRangeStepFunction } from \"./Long\";\nimport { some, value } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() {\n        return this.current;\n    }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map(y => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            let cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? value(nonZero) : length(xs) - length(ys);\n}\nexport function delay(f) {\n    return {\n        [Symbol.iterator]: () => f()[Symbol.iterator](),\n    };\n}\nexport function empty() {\n    return unfold(() => void 0);\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? some(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => f(x), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => f(x, y), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => f(i, x), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => f(i, x, y), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? null : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan((last, next) => [last[1], next], [0, 0], xs));\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return [y];\n}\nexport function skip(n, xs) {\n    return {\n        [Symbol.iterator]: () => {\n            const iter = xs[Symbol.iterator]();\n            for (let i = 1; i <= n; i++) {\n                if (iter.next().done) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return iter;\n        },\n    };\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    return {\n        [Symbol.iterator]: () => iter,\n    };\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return {\n        [Symbol.iterator]: () => {\n            // Capture a copy of the first value in the closure\n            // so the sequence is restarted every time, see #1230\n            let acc = fst;\n            return {\n                next: () => {\n                    const res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                },\n            };\n        },\n    };\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return {\n        [Symbol.iterator]: () => {\n            let window = [];\n            const iter = source[Symbol.iterator]();\n            return {\n                next: () => {\n                    let cur;\n                    while (window.length < windowSize) {\n                        if ((cur = iter.next()).done) {\n                            return { done: true };\n                        }\n                        window.push(cur.value);\n                    }\n                    const value = window;\n                    window = window.slice(1);\n                    return { done: false, value };\n                },\n            };\n        },\n    };\n}\n","import { Record, Union, anonRecord as makeAnonRecord } from \"./Types\";\nimport { compareArraysWith, equalArraysWith } from \"./Util\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, constructor, fields, cases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.constructor = constructor;\n        this.fields = fields;\n        this.cases = cases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n    CompareTo(other) {\n        return compare(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function equals(t1, t2) {\n    return t1.fullname === t2.fullname\n        && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n}\n// System.Type is not comparable in .NET, but let's implement this\n// in case users want to create a dictionary with types as keys\nexport function compare(t1, t2) {\n    if (t1.fullname !== t2.fullname) {\n        return t1.fullname < t2.fullname ? -1 : 1;\n    }\n    else {\n        return compareArraysWith(getGenerics(t1), getGenerics(t2), compare);\n    }\n}\nexport function type(fullname, generics) {\n    return new TypeInfo(fullname, generics);\n}\nexport function record(fullname, generics, constructor, fields) {\n    return new TypeInfo(fullname, generics, constructor, fields);\n}\nexport function anonRecord(...fields) {\n    return new TypeInfo(\"\", null, null, () => fields);\n}\nexport function union(fullname, generics, constructor, cases) {\n    const t = new TypeInfo(fullname, generics, constructor, null, () => cases().map((x, i) => typeof x === \"string\" ? new CaseInfo(t, i, x) : new CaseInfo(t, i, x[0], x[1])));\n    return t;\n}\nexport function tuple(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport const obj = new TypeInfo(\"System.Object\");\nexport const unit = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char = new TypeInfo(\"System.Char\");\nexport const string = new TypeInfo(\"System.String\");\nexport const bool = new TypeInfo(\"System.Boolean\");\nexport const int8 = new TypeInfo(\"System.SByte\");\nexport const uint8 = new TypeInfo(\"System.Byte\");\nexport const int16 = new TypeInfo(\"System.Int16\");\nexport const uint16 = new TypeInfo(\"System.UInt16\");\nexport const int32 = new TypeInfo(\"System.Int32\");\nexport const uint32 = new TypeInfo(\"System.UInt32\");\nexport const float32 = new TypeInfo(\"System.Single\");\nexport const float64 = new TypeInfo(\"System.Double\");\nexport const decimal = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    return isArray(t) ? t.generics[0] : null;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj));\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t)) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t)) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields.map((t, i) => [\"Data\" + i, t]);\n}\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return new uci.declaringType.constructor(uci.tag, uci.name, ...values);\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.constructor != null\n        ? new t.constructor(...values)\n        : makeAnonRecord(fields.reduce((obj, [key,], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {}));\n}\nexport function makeTuple(values, t) {\n    return values;\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.name;\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = match;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (rep !== match && rep < 10 && match.length > 1) {\n            rep = \"0\" + rep;\n        }\n        return rep;\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    const d = new Date(date.getTime() + date.offset);\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(date.offset);\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, date.offset);\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport default function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + date.offset, kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(str) {\n    let date = new Date(str);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(str);\n        if (m != null) {\n            let baseDate = null;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds = parseInt(timeParts[0], 10) * 3600 +\n                    parseInt(timeParts[1] || \"0\", 10) * 60 +\n                    parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v) {\n    try {\n        // if value is null or whitespace, parsing fails\n        if (v === null || v.trim() === \"\") {\n            return [false, minValue()];\n        }\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, minValue()];\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    return DateTime(d.getTime() + ts, d.kind);\n}\nexport function addDays(d, v) {\n    return DateTime(d.getTime() + v * 86400000, d.kind);\n}\nexport function addHours(d, v) {\n    return DateTime(d.getTime() + v * 3600000, d.kind);\n}\nexport function addMinutes(d, v) {\n    return DateTime(d.getTime() + v * 60000, d.kind);\n}\nexport function addSeconds(d, v) {\n    return DateTime(d.getTime() + v * 1000, d.kind);\n}\nexport function addMilliseconds(d, v) {\n    return DateTime(d.getTime() + v, d.kind);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? DateTime(d.getTime() - that, d.kind)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\n","import { toString as dateToString } from \"./Date\";\nimport Long, { fromBytes as longFromBytes, toBytes as longToBytes, toString as longToString } from \"./Long\";\nimport { escape } from \"./RegExp\";\nconst fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return longToString(x.unsigned ? x : longFromBytes(longToBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return arg.cont((x) => { console.log(x); });\n}\nexport function toConsoleError(arg) {\n    return arg.cont((x) => { console.error(x); });\n}\nexport function toText(arg) {\n    return arg.cont((x) => x);\n}\nexport function toFail(arg) {\n    return arg.cont((x) => { throw new Error(x); });\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, pad, precision, format) => {\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                rep = Number(rep).toFixed(precision || 6);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = Number(rep).toPrecision(precision);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = Number(rep).toExponential(precision);\n                break;\n            case \"O\":\n            case \"A\":\n                rep = String(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n        }\n        const plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep, 10) >= 0;\n        pad = parseInt(pad, 10);\n        if (!isNaN(pad)) {\n            const ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\n            rep = padLeft(String(rep), Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\n        }\n        const once = prefix + (plusPrefix ? \"+\" + rep : rep);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (match, idx, pad, format, precision, pattern) => {\n        let rep = args[idx];\n        let padSymbol = \" \";\n        const isNumericType = (typeof rep === \"number\") || (rep instanceof Long);\n        // TODO: || (rep instanceof Decimal) || (rep instanceof BigInt);\n        if (isNumericType) {\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    rep = precision ? rep.toFixed(precision) : rep.toFixed(2);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision ? rep.toPrecision(precision) : rep.toPrecision();\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision ? rep.toExponential(precision) : rep.toExponential();\n                    break;\n                case \"p\":\n                case \"P\":\n                    rep = (precision ? (rep * 100).toFixed(precision) : (rep * 100).toFixed(2)) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision ? padLeft(rep.toString(), precision, \"0\") : rep.toString();\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    const m = /^(0+)(\\.0+)?$/.exec(pattern);\n                    if (m != null) {\n                        let decs = 0;\n                        if (m[2] != null) {\n                            rep = rep.toFixed(decs = m[2].length - 1);\n                        }\n                        pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\n                        padSymbol = \"0\";\n                    }\n                    else if (pattern) {\n                        rep = pattern;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        pad = parseInt((pad || \"\").substring(1), 10);\n        if (!isNaN(pad)) {\n            rep = padLeft(String(rep), Math.abs(pad), padSymbol, pad < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function join(delimiter, ...xs) {\n    return xs.map((x) => String(x)).join(delimiter);\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return join(delimiter, ...xs.slice(startIndex, endIndexPlusOne));\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). Trims braces. */\nexport function validateGuid(str, doNotThrow) {\n    const trimmedAndLowered = trim(str, \"{\", \"}\").toLowerCase();\n    if (guidRegex.test(trimmedAndLowered)) {\n        return doNotThrow ? [true, trimmedAndLowered] : trimmedAndLowered;\n    }\n    else if (doNotThrow) {\n        return [false, \"00000000-0000-0000-0000-000000000000\"];\n    }\n    throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    return _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : null;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : null;\n    if (count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\n","import { Record, List, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union, int32 } from \"./Reflection.js\";\nimport { value as value$$3, some } from \"./Option.js\";\nimport { iterate as iterate$$1, empty as empty$$1, toIterator, map as map$$1, unfold, getEnumerator, fold as fold$$1 } from \"./Seq.js\";\nimport { compare, structuralHash, isDisposable } from \"./Util.js\";\nimport { join, toText, printf } from \"./String.js\";\nexport const MapTree$00602 = declare(function Map_MapTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function MapTree$00602$reflection($gen$$3, $gen$$4) {\n  return union(\"Map.MapTree`2\", [$gen$$3, $gen$$4], MapTree$00602, () => [\"MapEmpty\", [\"MapOne\", [$gen$$3, $gen$$4]], [\"MapNode\", [$gen$$3, $gen$$4, MapTree$00602$reflection($gen$$3, $gen$$4), MapTree$00602$reflection($gen$$3, $gen$$4), int32]]]);\n}\nexport function MapTreeModule$$$sizeAux(acc, m) {\n  MapTreeModule$$$sizeAux: while (true) {\n    switch (m.tag) {\n      case 1:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 2:\n        {\n          const r = m.fields[3];\n          const l = m.fields[2];\n          const $acc$$5 = acc;\n          acc = MapTreeModule$$$sizeAux($acc$$5 + 1, l);\n          m = r;\n          continue MapTreeModule$$$sizeAux;\n        }\n\n      default:\n        {\n          return acc | 0;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$size(x) {\n  return MapTreeModule$$$sizeAux(0, x);\n}\nexport function MapTreeModule$$$empty() {\n  return new MapTree$00602(0, \"MapEmpty\");\n}\nexport function MapTreeModule$$$height(_arg1) {\n  switch (_arg1.tag) {\n    case 1:\n      {\n        return 1;\n      }\n\n    case 2:\n      {\n        const h = _arg1.fields[4] | 0;\n        return h | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport function MapTreeModule$$$isEmpty(m$$1) {\n  if (m$$1.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function MapTreeModule$$$mk(l$$1, k, v, r$$1) {\n  const matchValue = [l$$1, r$$1];\n  var $target$$6;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$6 = 0;\n    } else {\n      $target$$6 = 1;\n    }\n  } else {\n    $target$$6 = 1;\n  }\n\n  switch ($target$$6) {\n    case 0:\n      {\n        return new MapTree$00602(1, \"MapOne\", k, v);\n      }\n\n    case 1:\n      {\n        const hl = MapTreeModule$$$height(l$$1) | 0;\n        const hr = MapTreeModule$$$height(r$$1) | 0;\n        const m$$2 = (hl < hr ? hr : hl) | 0;\n        return new MapTree$00602(2, \"MapNode\", k, v, l$$1, r$$1, m$$2 + 1);\n      }\n  }\n}\nexport function MapTreeModule$$$rebalance(t1, k$$1, v$$1, t2) {\n  const t1h = MapTreeModule$$$height(t1) | 0;\n  const t2h = MapTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + 2) {\n    if (t2.tag === 2) {\n      const t2v = t2.fields[1];\n      const t2r = t2.fields[3];\n      const t2l = t2.fields[2];\n      const t2k = t2.fields[0];\n\n      if (MapTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 2) {\n          const t2lv = t2l.fields[1];\n          const t2lr = t2l.fields[3];\n          const t2ll = t2l.fields[2];\n          const t2lk = t2l.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2ll), t2lk, t2lv, MapTreeModule$$$mk(t2lr, t2k, t2v, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2l), t2k, t2v, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + 2) {\n    if (t1.tag === 2) {\n      const t1v = t1.fields[1];\n      const t1r = t1.fields[3];\n      const t1l = t1.fields[2];\n      const t1k = t1.fields[0];\n\n      if (MapTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 2) {\n          const t1rv = t1r.fields[1];\n          const t1rr = t1r.fields[3];\n          const t1rl = t1r.fields[2];\n          const t1rk = t1r.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1l, t1k, t1v, t1rl), t1rk, t1rv, MapTreeModule$$$mk(t1rr, k$$1, v$$1, t2));\n        } else {\n          throw new Error(\"re  balance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(t1l, t1k, t1v, MapTreeModule$$$mk(t1r, k$$1, v$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return MapTreeModule$$$mk(t1, k$$1, v$$1, t2);\n  }\n}\nexport function MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3) {\n  switch (m$$3.tag) {\n    case 1:\n      {\n        const k2 = m$$3.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, new MapTree$00602(0, \"MapEmpty\"), m$$3, 2);\n        } else if (c === 0) {\n          return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n        } else {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3, new MapTree$00602(0, \"MapEmpty\"), 2);\n        }\n      }\n\n    case 2:\n      {\n        const v2 = m$$3.fields[1];\n        const r$$2 = m$$3.fields[3];\n        const l$$2 = m$$3.fields[2];\n        const k2$$1 = m$$3.fields[0];\n        const h$$1 = m$$3.fields[4] | 0;\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$add(comparer, k$$2, v$$2, l$$2), k2$$1, v2, r$$2);\n        } else if (c$$1 === 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, l$$2, r$$2, h$$1);\n        } else {\n          return MapTreeModule$$$rebalance(l$$2, k2$$1, v2, MapTreeModule$$$add(comparer, k$$2, v$$2, r$$2));\n        }\n      }\n\n    default:\n      {\n        return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n      }\n  }\n}\nexport function MapTreeModule$$$find(comparer$$1, k$$3, m$$4) {\n  MapTreeModule$$$find: while (true) {\n    switch (m$$4.tag) {\n      case 1:\n        {\n          const v2$$1 = m$$4.fields[1];\n          const k2$$2 = m$$4.fields[0];\n          const c$$2 = comparer$$1.Compare(k$$3, k2$$2) | 0;\n\n          if (c$$2 === 0) {\n            return v2$$1;\n          } else {\n            throw new Error(\"key not found\");\n          }\n        }\n\n      case 2:\n        {\n          const v2$$2 = m$$4.fields[1];\n          const r$$3 = m$$4.fields[3];\n          const l$$3 = m$$4.fields[2];\n          const k2$$3 = m$$4.fields[0];\n          const c$$3 = comparer$$1.Compare(k$$3, k2$$3) | 0;\n\n          if (c$$3 < 0) {\n            const $comparer$$1$$7 = comparer$$1;\n            const $k$$3$$8 = k$$3;\n            comparer$$1 = $comparer$$1$$7;\n            k$$3 = $k$$3$$8;\n            m$$4 = l$$3;\n            continue MapTreeModule$$$find;\n          } else if (c$$3 === 0) {\n            return v2$$2;\n          } else {\n            const $comparer$$1$$9 = comparer$$1;\n            const $k$$3$$10 = k$$3;\n            comparer$$1 = $comparer$$1$$9;\n            k$$3 = $k$$3$$10;\n            m$$4 = r$$3;\n            continue MapTreeModule$$$find;\n          }\n        }\n\n      default:\n        {\n          throw new Error(\"key not found\");\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryFind(comparer$$2, k$$4, m$$5) {\n  MapTreeModule$$$tryFind: while (true) {\n    switch (m$$5.tag) {\n      case 1:\n        {\n          const v2$$3 = m$$5.fields[1];\n          const k2$$4 = m$$5.fields[0];\n          const c$$4 = comparer$$2.Compare(k$$4, k2$$4) | 0;\n\n          if (c$$4 === 0) {\n            return some(v2$$3);\n          } else {\n            return null;\n          }\n        }\n\n      case 2:\n        {\n          const v2$$4 = m$$5.fields[1];\n          const r$$4 = m$$5.fields[3];\n          const l$$4 = m$$5.fields[2];\n          const k2$$5 = m$$5.fields[0];\n          const c$$5 = comparer$$2.Compare(k$$4, k2$$5) | 0;\n\n          if (c$$5 < 0) {\n            const $comparer$$2$$11 = comparer$$2;\n            const $k$$4$$12 = k$$4;\n            comparer$$2 = $comparer$$2$$11;\n            k$$4 = $k$$4$$12;\n            m$$5 = l$$4;\n            continue MapTreeModule$$$tryFind;\n          } else if (c$$5 === 0) {\n            return some(v2$$4);\n          } else {\n            const $comparer$$2$$13 = comparer$$2;\n            const $k$$4$$14 = k$$4;\n            comparer$$2 = $comparer$$2$$13;\n            k$$4 = $k$$4$$14;\n            m$$5 = r$$4;\n            continue MapTreeModule$$$tryFind;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition1(comparer$$3, f, k$$5, v$$3, acc1, acc2) {\n  if (f(k$$5, v$$3)) {\n    return [MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc1), acc2];\n  } else {\n    return [acc1, MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc2)];\n  }\n}\nexport function MapTreeModule$$$partitionAux($arg$$21, $arg$$22, $arg$$23, $arg$$24, $arg$$25) {\n  MapTreeModule$$$partitionAux: while (true) {\n    const comparer$$4 = $arg$$21,\n          f$$1 = $arg$$22,\n          s = $arg$$23,\n          acc_0 = $arg$$24,\n          acc_1 = $arg$$25;\n    const acc$$1 = [acc_0, acc_1];\n\n    switch (s.tag) {\n      case 1:\n        {\n          const v$$4 = s.fields[1];\n          const k$$6 = s.fields[0];\n          return MapTreeModule$$$partition1(comparer$$4, f$$1, k$$6, v$$4, acc$$1[0], acc$$1[1]);\n        }\n\n      case 2:\n        {\n          const v$$5 = s.fields[1];\n          const r$$5 = s.fields[3];\n          const l$$5 = s.fields[2];\n          const k$$7 = s.fields[0];\n          const acc$$2 = MapTreeModule$$$partitionAux(comparer$$4, f$$1, r$$5, acc$$1[0], acc$$1[1]);\n          const acc$$3 = MapTreeModule$$$partition1(comparer$$4, f$$1, k$$7, v$$5, acc$$2[0], acc$$2[1]);\n          $arg$$21 = comparer$$4;\n          $arg$$22 = f$$1;\n          $arg$$23 = l$$5;\n          $arg$$24 = acc$$3[0];\n          $arg$$25 = acc$$3[1];\n          continue MapTreeModule$$$partitionAux;\n        }\n\n      default:\n        {\n          return acc$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition(comparer$$5, f$$2, s$$1) {\n  return MapTreeModule$$$partitionAux(comparer$$5, f$$2, s$$1, MapTreeModule$$$empty(), MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$filter1(comparer$$6, f$$3, k$$8, v$$6, acc$$4) {\n  if (f$$3(k$$8, v$$6)) {\n    return MapTreeModule$$$add(comparer$$6, k$$8, v$$6, acc$$4);\n  } else {\n    return acc$$4;\n  }\n}\nexport function MapTreeModule$$$filterAux($arg$$34, $arg$$35, $arg$$36, $arg$$37) {\n  MapTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$34,\n          f$$4 = $arg$$35,\n          s$$2 = $arg$$36,\n          acc$$5 = $arg$$37;\n\n    switch (s$$2.tag) {\n      case 1:\n        {\n          const v$$7 = s$$2.fields[1];\n          const k$$9 = s$$2.fields[0];\n          return MapTreeModule$$$filter1(comparer$$7, f$$4, k$$9, v$$7, acc$$5);\n        }\n\n      case 2:\n        {\n          const v$$8 = s$$2.fields[1];\n          const r$$6 = s$$2.fields[3];\n          const l$$6 = s$$2.fields[2];\n          const k$$10 = s$$2.fields[0];\n          const acc$$6 = MapTreeModule$$$filterAux(comparer$$7, f$$4, l$$6, acc$$5);\n          const acc$$7 = MapTreeModule$$$filter1(comparer$$7, f$$4, k$$10, v$$8, acc$$6);\n          $arg$$34 = comparer$$7;\n          $arg$$35 = f$$4;\n          $arg$$36 = r$$6;\n          $arg$$37 = acc$$7;\n          continue MapTreeModule$$$filterAux;\n        }\n\n      default:\n        {\n          return acc$$5;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$filter(comparer$$8, f$$5, s$$3) {\n  return MapTreeModule$$$filterAux(comparer$$8, f$$5, s$$3, MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$spliceOutSuccessor(m$$6) {\n  switch (m$$6.tag) {\n    case 1:\n      {\n        const v2$$5 = m$$6.fields[1];\n        const k2$$6 = m$$6.fields[0];\n        return [k2$$6, v2$$5, new MapTree$00602(0, \"MapEmpty\")];\n      }\n\n    case 2:\n      {\n        const v2$$6 = m$$6.fields[1];\n        const r$$7 = m$$6.fields[3];\n        const l$$7 = m$$6.fields[2];\n        const k2$$7 = m$$6.fields[0];\n\n        if (l$$7.tag === 0) {\n          return [k2$$7, v2$$6, r$$7];\n        } else {\n          const patternInput = MapTreeModule$$$spliceOutSuccessor(l$$7);\n          return [patternInput[0], patternInput[1], MapTreeModule$$$mk(patternInput[2], k2$$7, v2$$6, r$$7)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n      }\n  }\n}\nexport function MapTreeModule$$$remove(comparer$$9, k$$11, m$$7) {\n  switch (m$$7.tag) {\n    case 1:\n      {\n        const k2$$8 = m$$7.fields[0];\n        const c$$6 = comparer$$9.Compare(k$$11, k2$$8) | 0;\n\n        if (c$$6 === 0) {\n          return new MapTree$00602(0, \"MapEmpty\");\n        } else {\n          return m$$7;\n        }\n      }\n\n    case 2:\n      {\n        const v2$$7 = m$$7.fields[1];\n        const r$$8 = m$$7.fields[3];\n        const l$$8 = m$$7.fields[2];\n        const k2$$9 = m$$7.fields[0];\n        const c$$7 = comparer$$9.Compare(k$$11, k2$$9) | 0;\n\n        if (c$$7 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$remove(comparer$$9, k$$11, l$$8), k2$$9, v2$$7, r$$8);\n        } else if (c$$7 === 0) {\n          const matchValue$$1 = [l$$8, r$$8];\n\n          if (matchValue$$1[0].tag === 0) {\n            return r$$8;\n          } else if (matchValue$$1[1].tag === 0) {\n            return l$$8;\n          } else {\n            const patternInput$$1 = MapTreeModule$$$spliceOutSuccessor(r$$8);\n            return MapTreeModule$$$mk(l$$8, patternInput$$1[0], patternInput$$1[1], patternInput$$1[2]);\n          }\n        } else {\n          return MapTreeModule$$$rebalance(l$$8, k2$$9, v2$$7, MapTreeModule$$$remove(comparer$$9, k$$11, r$$8));\n        }\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mem(comparer$$10, k$$12, m$$8) {\n  MapTreeModule$$$mem: while (true) {\n    switch (m$$8.tag) {\n      case 1:\n        {\n          const k2$$10 = m$$8.fields[0];\n          return comparer$$10.Compare(k$$12, k2$$10) === 0;\n        }\n\n      case 2:\n        {\n          const r$$9 = m$$8.fields[3];\n          const l$$9 = m$$8.fields[2];\n          const k2$$11 = m$$8.fields[0];\n          const c$$8 = comparer$$10.Compare(k$$12, k2$$11) | 0;\n\n          if (c$$8 < 0) {\n            const $comparer$$10$$41 = comparer$$10;\n            const $k$$12$$42 = k$$12;\n            comparer$$10 = $comparer$$10$$41;\n            k$$12 = $k$$12$$42;\n            m$$8 = l$$9;\n            continue MapTreeModule$$$mem;\n          } else if (c$$8 === 0) {\n            return true;\n          } else {\n            const $comparer$$10$$43 = comparer$$10;\n            const $k$$12$$44 = k$$12;\n            comparer$$10 = $comparer$$10$$43;\n            k$$12 = $k$$12$$44;\n            m$$8 = r$$9;\n            continue MapTreeModule$$$mem;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$iter($arg$$45, $arg$$46) {\n  MapTreeModule$$$iter: while (true) {\n    const f$$6 = $arg$$45,\n          m$$9 = $arg$$46;\n\n    switch (m$$9.tag) {\n      case 1:\n        {\n          const v2$$8 = m$$9.fields[1];\n          const k2$$12 = m$$9.fields[0];\n          f$$6(k2$$12, v2$$8);\n          break;\n        }\n\n      case 2:\n        {\n          const v2$$9 = m$$9.fields[1];\n          const r$$10 = m$$9.fields[3];\n          const l$$10 = m$$9.fields[2];\n          const k2$$13 = m$$9.fields[0];\n          MapTreeModule$$$iter(f$$6, l$$10);\n          f$$6(k2$$13, v2$$9);\n          $arg$$45 = f$$6;\n          $arg$$46 = r$$10;\n          continue MapTreeModule$$$iter;\n          break;\n        }\n\n      default:\n        {}\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryPick($arg$$47, $arg$$48) {\n  MapTreeModule$$$tryPick: while (true) {\n    const f$$7 = $arg$$47,\n          m$$10 = $arg$$48;\n\n    switch (m$$10.tag) {\n      case 1:\n        {\n          const v2$$10 = m$$10.fields[1];\n          const k2$$14 = m$$10.fields[0];\n          return f$$7(k2$$14, v2$$10);\n        }\n\n      case 2:\n        {\n          const v2$$11 = m$$10.fields[1];\n          const r$$11 = m$$10.fields[3];\n          const l$$11 = m$$10.fields[2];\n          const k2$$15 = m$$10.fields[0];\n          const matchValue$$2 = MapTreeModule$$$tryPick(f$$7, l$$11);\n\n          if (matchValue$$2 == null) {\n            const matchValue$$3 = f$$7(k2$$15, v2$$11);\n\n            if (matchValue$$3 == null) {\n              $arg$$47 = f$$7;\n              $arg$$48 = r$$11;\n              continue MapTreeModule$$$tryPick;\n            } else {\n              const res$$1 = matchValue$$3;\n              return res$$1;\n            }\n          } else {\n            const res = matchValue$$2;\n            return res;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$exists($arg$$49, $arg$$50) {\n  MapTreeModule$$$exists: while (true) {\n    const f$$8 = $arg$$49,\n          m$$11 = $arg$$50;\n\n    switch (m$$11.tag) {\n      case 1:\n        {\n          const v2$$12 = m$$11.fields[1];\n          const k2$$16 = m$$11.fields[0];\n          return f$$8(k2$$16, v2$$12);\n        }\n\n      case 2:\n        {\n          const v2$$13 = m$$11.fields[1];\n          const r$$12 = m$$11.fields[3];\n          const l$$12 = m$$11.fields[2];\n          const k2$$17 = m$$11.fields[0];\n\n          if (MapTreeModule$$$exists(f$$8, l$$12) ? true : f$$8(k2$$17, v2$$13)) {\n            return true;\n          } else {\n            $arg$$49 = f$$8;\n            $arg$$50 = r$$12;\n            continue MapTreeModule$$$exists;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$forall($arg$$51, $arg$$52) {\n  MapTreeModule$$$forall: while (true) {\n    const f$$9 = $arg$$51,\n          m$$12 = $arg$$52;\n\n    switch (m$$12.tag) {\n      case 1:\n        {\n          const v2$$14 = m$$12.fields[1];\n          const k2$$18 = m$$12.fields[0];\n          return f$$9(k2$$18, v2$$14);\n        }\n\n      case 2:\n        {\n          const v2$$15 = m$$12.fields[1];\n          const r$$13 = m$$12.fields[3];\n          const l$$13 = m$$12.fields[2];\n          const k2$$19 = m$$12.fields[0];\n\n          if (MapTreeModule$$$forall(f$$9, l$$13) ? f$$9(k2$$19, v2$$15) : false) {\n            $arg$$51 = f$$9;\n            $arg$$52 = r$$13;\n            continue MapTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$map(f$$10, m$$13) {\n  switch (m$$13.tag) {\n    case 1:\n      {\n        const v$$9 = m$$13.fields[1];\n        const k$$13 = m$$13.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$13, f$$10(v$$9));\n      }\n\n    case 2:\n      {\n        const v$$10 = m$$13.fields[1];\n        const r$$14 = m$$13.fields[3];\n        const l$$14 = m$$13.fields[2];\n        const k$$14 = m$$13.fields[0];\n        const h$$2 = m$$13.fields[4] | 0;\n        const l2 = MapTreeModule$$$map(f$$10, l$$14);\n        const v2$$16 = f$$10(v$$10);\n        const r2 = MapTreeModule$$$map(f$$10, r$$14);\n        return new MapTree$00602(2, \"MapNode\", k$$14, v2$$16, l2, r2, h$$2);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mapi(f$$11, m$$14) {\n  switch (m$$14.tag) {\n    case 1:\n      {\n        const v$$11 = m$$14.fields[1];\n        const k$$15 = m$$14.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$15, f$$11(k$$15, v$$11));\n      }\n\n    case 2:\n      {\n        const v$$12 = m$$14.fields[1];\n        const r$$15 = m$$14.fields[3];\n        const l$$15 = m$$14.fields[2];\n        const k$$16 = m$$14.fields[0];\n        const h$$3 = m$$14.fields[4] | 0;\n        const l2$$1 = MapTreeModule$$$mapi(f$$11, l$$15);\n        const v2$$17 = f$$11(k$$16, v$$12);\n        const r2$$1 = MapTreeModule$$$mapi(f$$11, r$$15);\n        return new MapTree$00602(2, \"MapNode\", k$$16, v2$$17, l2$$1, r2$$1, h$$3);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$foldBack($arg$$57, $arg$$58, $arg$$59) {\n  MapTreeModule$$$foldBack: while (true) {\n    const f$$12 = $arg$$57,\n          m$$15 = $arg$$58,\n          x$$1 = $arg$$59;\n\n    switch (m$$15.tag) {\n      case 1:\n        {\n          const v$$13 = m$$15.fields[1];\n          const k$$17 = m$$15.fields[0];\n          return f$$12(k$$17, v$$13, x$$1);\n        }\n\n      case 2:\n        {\n          const v$$14 = m$$15.fields[1];\n          const r$$16 = m$$15.fields[3];\n          const l$$16 = m$$15.fields[2];\n          const k$$18 = m$$15.fields[0];\n          const x$$2 = MapTreeModule$$$foldBack(f$$12, r$$16, x$$1);\n          const x$$3 = f$$12(k$$18, v$$14, x$$2);\n          $arg$$57 = f$$12;\n          $arg$$58 = l$$16;\n          $arg$$59 = x$$3;\n          continue MapTreeModule$$$foldBack;\n        }\n\n      default:\n        {\n          return x$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$fold($arg$$60, $arg$$61, $arg$$62) {\n  MapTreeModule$$$fold: while (true) {\n    const f$$13 = $arg$$60,\n          x$$4 = $arg$$61,\n          m$$16 = $arg$$62;\n\n    switch (m$$16.tag) {\n      case 1:\n        {\n          const v$$15 = m$$16.fields[1];\n          const k$$19 = m$$16.fields[0];\n          return f$$13(x$$4, k$$19, v$$15);\n        }\n\n      case 2:\n        {\n          const v$$16 = m$$16.fields[1];\n          const r$$17 = m$$16.fields[3];\n          const l$$17 = m$$16.fields[2];\n          const k$$20 = m$$16.fields[0];\n          const x$$5 = MapTreeModule$$$fold(f$$13, x$$4, l$$17);\n          const x$$6 = f$$13(x$$5, k$$20, v$$16);\n          $arg$$60 = f$$13;\n          $arg$$61 = x$$6;\n          $arg$$62 = r$$17;\n          continue MapTreeModule$$$fold;\n        }\n\n      default:\n        {\n          return x$$4;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17, x$$7) {\n  switch (m$$17.tag) {\n    case 1:\n      {\n        const v$$17 = m$$17.fields[1];\n        const k$$21 = m$$17.fields[0];\n        const cLoKey = comparer$$11.Compare(lo, k$$21) | 0;\n        const cKeyHi = comparer$$11.Compare(k$$21, hi) | 0;\n        const x$$8 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f$$14(k$$21, v$$17, x$$7) : x$$7;\n        return x$$8;\n      }\n\n    case 2:\n      {\n        const v$$18 = m$$17.fields[1];\n        const r$$18 = m$$17.fields[3];\n        const l$$18 = m$$17.fields[2];\n        const k$$22 = m$$17.fields[0];\n        const cLoKey$$1 = comparer$$11.Compare(lo, k$$22) | 0;\n        const cKeyHi$$1 = comparer$$11.Compare(k$$22, hi) | 0;\n        const x$$9 = cLoKey$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, l$$18, x$$7) : x$$7;\n        const x$$10 = (cLoKey$$1 <= 0 ? cKeyHi$$1 <= 0 : false) ? f$$14(k$$22, v$$18, x$$9) : x$$9;\n        const x$$11 = cKeyHi$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, r$$18, x$$10) : x$$10;\n        return x$$11;\n      }\n\n    default:\n      {\n        return x$$7;\n      }\n  }\n}\nexport function MapTreeModule$$$foldSection(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12) {\n  if (comparer$$12.Compare(lo$$1, hi$$1) === 1) {\n    return x$$12;\n  } else {\n    return MapTreeModule$$$foldFromTo(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12);\n  }\n}\nexport function MapTreeModule$$$loop(m$$19, acc$$8) {\n  MapTreeModule$$$loop: while (true) {\n    switch (m$$19.tag) {\n      case 1:\n        {\n          const v$$19 = m$$19.fields[1];\n          const k$$23 = m$$19.fields[0];\n          return new List([k$$23, v$$19], acc$$8);\n        }\n\n      case 2:\n        {\n          const v$$20 = m$$19.fields[1];\n          const r$$19 = m$$19.fields[3];\n          const l$$19 = m$$19.fields[2];\n          const k$$24 = m$$19.fields[0];\n          const $acc$$8$$75 = acc$$8;\n          m$$19 = l$$19;\n          acc$$8 = new List([k$$24, v$$20], MapTreeModule$$$loop(r$$19, $acc$$8$$75));\n          continue MapTreeModule$$$loop;\n        }\n\n      default:\n        {\n          return acc$$8;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$toList(m$$20) {\n  return MapTreeModule$$$loop(m$$20, new List());\n}\nexport function MapTreeModule$$$ofList(comparer$$13, l$$20) {\n  return fold$$1(function (acc$$9, tupledArg) {\n    return MapTreeModule$$$add(comparer$$13, tupledArg[0], tupledArg[1], acc$$9);\n  }, MapTreeModule$$$empty(), l$$20);\n}\nexport function MapTreeModule$$$mkFromEnumerator(comparer$$14, acc$$10, e) {\n  MapTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const patternInput$$2 = e.Current;\n      const $acc$$10$$77 = acc$$10;\n      const $comparer$$14$$76 = comparer$$14;\n      const $e$$78 = e;\n      comparer$$14 = $comparer$$14$$76;\n      acc$$10 = MapTreeModule$$$add($comparer$$14$$76, patternInput$$2[0], patternInput$$2[1], $acc$$10$$77);\n      e = $e$$78;\n      continue MapTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$10;\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$ofArray(comparer$$15, arr) {\n  let res$$2 = MapTreeModule$$$empty();\n\n  for (let i = 0; i <= arr.length - 1; i++) {\n    const patternInput$$3 = arr[i];\n    res$$2 = MapTreeModule$$$add(comparer$$15, patternInput$$3[0], patternInput$$3[1], res$$2);\n  }\n\n  return res$$2;\n}\nexport function MapTreeModule$$$ofSeq(comparer$$16, c$$9) {\n  const ie = getEnumerator(c$$9);\n\n  try {\n    return MapTreeModule$$$mkFromEnumerator(comparer$$16, MapTreeModule$$$empty(), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function MapTreeModule$$$copyToArray(s$$4, arr$$1, i$$1) {\n  let j = i$$1 | 0;\n  MapTreeModule$$$iter(function f$$16(x$$15, y$$2) {\n    arr$$1[j] = [x$$15, y$$2];\n    j = j + 1;\n  }, s$$4);\n}\nexport const MapTreeModule$002EMapIterator$00602 = declare(function Map_MapTreeModule_MapIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function MapTreeModule$002EMapIterator$00602$reflection($gen$$79, $gen$$80) {\n  return record(\"Map.MapTreeModule.MapIterator`2\", [$gen$$79, $gen$$80], MapTreeModule$002EMapIterator$00602, () => [[\"stack\", list(MapTree$00602$reflection($gen$$79, $gen$$80))], [\"started\", bool]]);\n}\nexport function MapTreeModule$$$collapseLHS(stack) {\n  MapTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 1) {\n        return stack;\n      } else if (stack.head.tag === 2) {\n        const $stack$$81 = stack;\n        stack = new List($stack$$81.head.fields[2], new List(new MapTree$00602(1, \"MapOne\", $stack$$81.head.fields[0], $stack$$81.head.fields[1]), new List($stack$$81.head.fields[3], $stack$$81.tail)));\n        continue MapTreeModule$$$collapseLHS;\n      } else {\n        const $stack$$82 = stack;\n        stack = $stack$$82.tail;\n        continue MapTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$mkIterator(s$$5) {\n  return new MapTreeModule$002EMapIterator$00602(MapTreeModule$$$collapseLHS(new List(s$$5, new List())), false);\n}\nexport function MapTreeModule$$$notStarted() {\n  throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule$$$alreadyFinished() {\n  throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule$$$current(i$$2) {\n  if (i$$2.started) {\n    const matchValue$$4 = i$$2.stack;\n\n    if (matchValue$$4.tail == null) {\n      return MapTreeModule$$$alreadyFinished();\n    } else if (matchValue$$4.head.tag === 1) {\n      return [matchValue$$4.head.fields[0], matchValue$$4.head.fields[1]];\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n  } else {\n    return MapTreeModule$$$notStarted();\n  }\n}\nexport function MapTreeModule$$$moveNext(i$$3) {\n  if (i$$3.started) {\n    const matchValue$$5 = i$$3.stack;\n\n    if (matchValue$$5.tail == null) {\n      return false;\n    } else if (matchValue$$5.head.tag === 1) {\n      i$$3.stack = MapTreeModule$$$collapseLHS(matchValue$$5.tail);\n      return !(i$$3.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$3.started = true;\n    return !(i$$3.stack.tail == null);\n  }\n}\nexport const MapTreeModule$002EmkIEnumerator$0027$00602 = declare(function Map_MapTreeModule_mkIEnumerator_(s$$6) {\n  const $this$$1 = this;\n  $this$$1.s = s$$6;\n  $this$$1.i = MapTreeModule$$$mkIterator($this$$1.s);\n});\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$reflection($gen$$83, $gen$$84) {\n  return type(\"Map.MapTreeModule.mkIEnumerator'`2\", [$gen$$83, $gen$$84]);\n}\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$6) {\n  return this instanceof MapTreeModule$002EmkIEnumerator$0027$00602 ? MapTreeModule$002EmkIEnumerator$0027$00602.call(this, s$$6) : new MapTreeModule$002EmkIEnumerator$0027$00602(s$$6);\n}\nObject.defineProperty(MapTreeModule$002EmkIEnumerator$0027$00602.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return MapTreeModule$$$current(__.i);\n  }\n});\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return MapTreeModule$$$moveNext(__$$1.i);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = MapTreeModule$$$mkIterator(__$$2.s);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Dispose = function () {};\n\nexport function MapTreeModule$$$mkIEnumerator(s$$7) {\n  return MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$7);\n}\nexport function MapTreeModule$$$toSeq(s$$8) {\n  const en = MapTreeModule$$$mkIEnumerator(s$$8);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport const FSharpMap = declare(function Map_Map(comparer$$17, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$17;\n  $this$$2.tree = tree;\n});\nexport function FSharpMap$reflection($gen$$85, $gen$$86) {\n  return type(\"Map.FSharpMap\", [$gen$$85, $gen$$86]);\n}\nexport function FSharpMap$$$$002Ector$$58ADD115(comparer$$17, tree) {\n  return this instanceof FSharpMap ? FSharpMap.call(this, comparer$$17, tree) : new FSharpMap(comparer$$17, tree);\n}\nexport function FSharpMap$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpMap$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpMap$$Add$$5BDDA1(__$$6, k$$28, v$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$6.comparer, MapTreeModule$$$add(__$$6.comparer, k$$28, v$$24, __$$6.tree));\n}\nexport function FSharpMap$$get_IsEmpty(__$$7) {\n  return MapTreeModule$$$isEmpty(__$$7.tree);\n}\nexport function FSharpMap$$get_Item$$2B595(__$$8, k$$29) {\n  return MapTreeModule$$$find(__$$8.comparer, k$$29, __$$8.tree);\n}\nexport function FSharpMap$$TryGetValue$$5BDDA1(__$$9, k$$30, defValue) {\n  const matchValue$$6 = MapTreeModule$$$tryFind(__$$9.comparer, k$$30, __$$9.tree);\n\n  if (matchValue$$6 == null) {\n    return [false, defValue];\n  } else {\n    const v$$25 = value$$3(matchValue$$6);\n    return [true, v$$25];\n  }\n}\nexport function FSharpMap$$TryPick$$72321DD7(__$$10, f$$17) {\n  return MapTreeModule$$$tryPick(f$$17, __$$10.tree);\n}\nexport function FSharpMap$$Exists$$Z395DDC35(__$$11, f$$18) {\n  return MapTreeModule$$$exists(f$$18, __$$11.tree);\n}\nexport function FSharpMap$$Filter$$Z395DDC35(__$$12, f$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$12.comparer, MapTreeModule$$$filter(__$$12.comparer, f$$19, __$$12.tree));\n}\nexport function FSharpMap$$ForAll$$Z395DDC35(__$$13, f$$20) {\n  return MapTreeModule$$$forall(f$$20, __$$13.tree);\n}\nexport function FSharpMap$$Fold(__$$14, f$$21, acc$$11) {\n  return MapTreeModule$$$foldBack(f$$21, __$$14.tree, acc$$11);\n}\nexport function FSharpMap$$FoldSection(__$$15, lo$$2, hi$$2, f$$22, acc$$12) {\n  return MapTreeModule$$$foldSection(__$$15.comparer, lo$$2, hi$$2, f$$22, __$$15.tree, acc$$12);\n}\nexport function FSharpMap$$Iterate$$1DCFB91D(__$$16, f$$23) {\n  MapTreeModule$$$iter(f$$23, __$$16.tree);\n}\nexport function FSharpMap$$MapRange$$6DC7247(__$$17, f$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$17.comparer, MapTreeModule$$$map(f$$24, __$$17.tree));\n}\nexport function FSharpMap$$Map$$Z6F6B671C(__$$18, f$$25) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$18.comparer, MapTreeModule$$$mapi(f$$25, __$$18.tree));\n}\nexport function FSharpMap$$Partition$$Z395DDC35(__$$19, f$$26) {\n  const patternInput$$4 = MapTreeModule$$$partition(__$$19.comparer, f$$26, __$$19.tree);\n  return [FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[0]), FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[1])];\n}\nexport function FSharpMap$$get_Count(__$$20) {\n  return MapTreeModule$$$size(__$$20.tree);\n}\nexport function FSharpMap$$ContainsKey$$2B595(__$$21, k$$31) {\n  return MapTreeModule$$$mem(__$$21.comparer, k$$31, __$$21.tree);\n}\nexport function FSharpMap$$Remove$$2B595(__$$22, k$$32) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$22.comparer, MapTreeModule$$$remove(__$$22.comparer, k$$32, __$$22.tree));\n}\nexport function FSharpMap$$TryFind$$2B595(__$$23, k$$33) {\n  return MapTreeModule$$$tryFind(__$$23.comparer, k$$33, __$$23.tree);\n}\nexport function FSharpMap$$ToList(__$$24) {\n  return MapTreeModule$$$toList(__$$24.tree);\n}\n\nFSharpMap.prototype.toString = function () {\n  const this$ = this;\n  return \"map [\" + join(\"; \", ...map$$1(function mapping(kv) {\n    return toText(printf(\"(%A, %A)\"))(kv[0])(kv[1]);\n  }, this$)) + \"]\";\n};\n\nFSharpMap.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$16, y$$3) {\n    return (x$$16 << 1) + y$$3 + 631;\n  };\n\n  let res$$3 = 0;\n  const e$$1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const patternInput$$5 = e$$1.Current;\n    const activePatternResult3097 = patternInput$$5;\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3097[0]));\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3097[1]));\n  }\n\n  return Math.abs(res$$3) | 0;\n};\n\nFSharpMap.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return this$$$2.CompareTo(that) === 0;\n};\n\nFSharpMap.prototype[Symbol.iterator] = function () {\n  const __$$25 = this;\n  return toIterator(MapTreeModule$$$mkIEnumerator(__$$25.tree));\n};\n\nFSharpMap.prototype.CompareTo = function (obj) {\n  const m$$22 = this;\n  const m2 = obj;\n  let res$$4 = 0;\n  let finished = false;\n  const e1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m$$22));\n\n  try {\n    const e2 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m2));\n\n    try {\n      while (!finished ? res$$4 === 0 : false) {\n        const matchValue$$7 = [e1.MoveNext(), e2.MoveNext()];\n\n        if (matchValue$$7[0]) {\n          if (matchValue$$7[1]) {\n            const kvp1 = e1.Current;\n            const kvp2 = e2.Current;\n            const c$$10 = m$$22.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n            res$$4 = c$$10 !== 0 ? c$$10 : compare(kvp1[1], kvp2[1]);\n          } else {\n            res$$4 = 1;\n          }\n        } else if (matchValue$$7[1]) {\n          res$$4 = -1;\n        } else {\n          finished = true;\n        }\n      }\n\n      return res$$4 | 0;\n    } finally {\n      if (isDisposable(e2)) {\n        e2.Dispose();\n      }\n    }\n  } finally {\n    if (isDisposable(e1)) {\n      e1.Dispose();\n    }\n  }\n};\n\nexport function isEmpty(m$$23) {\n  return FSharpMap$$get_IsEmpty(m$$23);\n}\nexport function add(k$$34, v$$26, m$$24) {\n  return FSharpMap$$Add$$5BDDA1(m$$24, k$$34, v$$26);\n}\nexport function find(k$$35, m$$25) {\n  return FSharpMap$$get_Item$$2B595(m$$25, k$$35);\n}\nexport function tryFind(k$$36, m$$26) {\n  return FSharpMap$$TryFind$$2B595(m$$26, k$$36);\n}\nexport function remove(k$$37, m$$27) {\n  return FSharpMap$$Remove$$2B595(m$$27, k$$37);\n}\nexport function containsKey(k$$38, m$$28) {\n  return FSharpMap$$ContainsKey$$2B595(m$$28, k$$38);\n}\nexport function iterate(f$$27, m$$29) {\n  FSharpMap$$Iterate$$1DCFB91D(m$$29, f$$27);\n}\nexport function tryPick(f$$28, m$$30) {\n  return FSharpMap$$TryPick$$72321DD7(m$$30, f$$28);\n}\nexport function pick(f$$29, m$$31) {\n  const matchValue$$8 = tryPick(f$$29, m$$31);\n\n  if (matchValue$$8 != null) {\n    const res$$5 = value$$3(matchValue$$8);\n    return res$$5;\n  } else {\n    throw new Error(\"key not found\");\n  }\n}\nexport function exists(f$$30, m$$32) {\n  return FSharpMap$$Exists$$Z395DDC35(m$$32, f$$30);\n}\nexport function filter(f$$31, m$$33) {\n  return FSharpMap$$Filter$$Z395DDC35(m$$33, f$$31);\n}\nexport function partition(f$$32, m$$34) {\n  return FSharpMap$$Partition$$Z395DDC35(m$$34, f$$32);\n}\nexport function forAll(f$$33, m$$35) {\n  return FSharpMap$$ForAll$$Z395DDC35(m$$35, f$$33);\n}\nexport function mapRange(f$$34, m$$36) {\n  return FSharpMap$$MapRange$$6DC7247(m$$36, f$$34);\n}\nexport function map(f$$35, m$$37) {\n  return FSharpMap$$Map$$Z6F6B671C(m$$37, f$$35);\n}\nexport function fold(f$$36, z, m$$38) {\n  return MapTreeModule$$$fold(f$$36, z, FSharpMap$$get_Tree(m$$38));\n}\nexport function foldBack(f$$37, m$$39, z$$1) {\n  return MapTreeModule$$$foldBack(f$$37, FSharpMap$$get_Tree(m$$39), z$$1);\n}\nexport function toSeq(m$$40) {\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(m$$40));\n}\nexport function findKey(f$$38, m$$41) {\n  const _arg1$$1 = MapTreeModule$$$tryPick(function f$$39(k$$39, v$$27) {\n    if (f$$38(k$$39, v$$27)) {\n      return some(k$$39);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$41));\n\n  if (_arg1$$1 == null) {\n    throw new Error(\"Key not found\");\n  } else {\n    const k$$40 = value$$3(_arg1$$1);\n    return k$$40;\n  }\n}\nexport function tryFindKey(f$$40, m$$43) {\n  return MapTreeModule$$$tryPick(function f$$41(k$$41, v$$28) {\n    if (f$$40(k$$41, v$$28)) {\n      return some(k$$41);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$43));\n}\nexport function ofList(l$$22, comparer$$18) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$18, MapTreeModule$$$ofList(comparer$$18, l$$22));\n}\nexport function ofSeq(l$$23, comparer$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$19, MapTreeModule$$$ofSeq(comparer$$19, l$$23));\n}\nexport function ofArray(array, comparer$$20) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$20, MapTreeModule$$$ofArray(comparer$$20, array));\n}\nexport function toList(m$$45) {\n  return FSharpMap$$ToList(m$$45);\n}\nexport function toArray(m$$46) {\n  const res$$6 = new Array(FSharpMap$$get_Count(m$$46));\n  MapTreeModule$$$copyToArray(FSharpMap$$get_Tree(m$$46), res$$6, 0);\n  return res$$6;\n}\nexport function empty(comparer$$21) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$21, new MapTree$00602(0, \"MapEmpty\"));\n}\n\nfunction createMutablePrivate(comparer$$22, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return MapTreeModule$$$size(tree$$1);\n    },\n\n    clear() {\n      tree$$1 = new MapTree$00602(0, \"MapEmpty\");\n    },\n\n    delete(x$$18) {\n      if (MapTreeModule$$$mem(comparer$$22, x$$18, tree$$1)) {\n        tree$$1 = MapTreeModule$$$remove(comparer$$22, x$$18, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    entries() {\n      return MapTreeModule$$$toSeq(tree$$1);\n    },\n\n    get(k$$42) {\n      return MapTreeModule$$$find(comparer$$22, k$$42, tree$$1);\n    },\n\n    has(x$$19) {\n      return MapTreeModule$$$mem(comparer$$22, x$$19, tree$$1);\n    },\n\n    keys() {\n      return map$$1(function mapping$$1(kv$$1) {\n        return kv$$1[0];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    set(k$$43, v$$29) {\n      const this$$$3 = this;\n      tree$$1 = MapTreeModule$$$add(comparer$$22, k$$43, v$$29, tree$$1);\n      return this$$$3;\n    },\n\n    values() {\n      return map$$1(function mapping$$2(kv$$2) {\n        return kv$$2[1];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(MapTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return MapTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$3, comparer$$23) {\n  return createMutablePrivate(comparer$$23, MapTreeModule$$$ofSeq(comparer$$23, source$$3));\n}\nexport function groupBy(projection, xs, comparer$$24) {\n  const dict = createMutable(empty$$1(), comparer$$24);\n  iterate$$1(function (v$$30) {\n    const key = projection(v$$30);\n\n    if (dict.has(key)) {\n      dict.get(key).push(v$$30);\n    } else {\n      dict.set(key, Array.from([v$$30])), null;\n    }\n  }, xs);\n  return map$$1(function mapping$$3(kv$$3) {\n    return [kv$$3[0], kv$$3[1]];\n  }, dict);\n}\nexport function countBy(projection$$1, xs$$1, comparer$$25) {\n  const dict$$1 = createMutable(empty$$1(), comparer$$25);\n  iterate$$1(function (value$$1) {\n    const key$$1 = projection$$1(value$$1);\n    dict$$1.has(key$$1) ? dict$$1.set(key$$1, dict$$1.get(key$$1) + 1) : dict$$1.set(key$$1, 1), null;\n  }, xs$$1);\n  return map$$1(function mapping$$4(kv$$4) {\n    return [kv$$4[0], kv$$4[1]];\n  }, dict$$1);\n}\nexport function count(m$$47) {\n  return FSharpMap$$get_Count(m$$47);\n}","import { List, Record, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union as union$$1, int32 } from \"./Reflection.js\";\nimport { value as value$$2, some, Choice } from \"./Option.js\";\nimport { iterate as iterate$$1, empty as empty$$1, fold as fold$$1, toIterator, map as map$$1, reduce, getEnumerator, unfold } from \"./Seq.js\";\nimport { structuralHash, isDisposable } from \"./Util.js\";\nimport { join } from \"./String.js\";\nexport const SetTree$00601 = declare(function Set_SetTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function SetTree$00601$reflection($gen$$3) {\n  return union$$1(\"Set.SetTree`1\", [$gen$$3], SetTree$00601, () => [\"SetEmpty\", [\"SetNode\", [$gen$$3, SetTree$00601$reflection($gen$$3), SetTree$00601$reflection($gen$$3), int32]], [\"SetOne\", [$gen$$3]]]);\n}\nexport function SetTreeModule$$$countAux(s, acc) {\n  SetTreeModule$$$countAux: while (true) {\n    switch (s.tag) {\n      case 2:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 0:\n        {\n          return acc | 0;\n        }\n\n      default:\n        {\n          const r = s.fields[2];\n          const l = s.fields[1];\n          const $acc$$4 = acc;\n          s = l;\n          acc = SetTreeModule$$$countAux(r, $acc$$4 + 1);\n          continue SetTreeModule$$$countAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$count(s$$1) {\n  return SetTreeModule$$$countAux(s$$1, 0);\n}\nexport function SetTreeModule$$$SetOne(n) {\n  return new SetTree$00601(2, \"SetOne\", n);\n}\nexport function SetTreeModule$$$SetNode(x, l$$1, r$$1, h) {\n  return new SetTree$00601(1, \"SetNode\", x, l$$1, r$$1, h);\n}\nexport function SetTreeModule$$$height(t) {\n  switch (t.tag) {\n    case 2:\n      {\n        return 1;\n      }\n\n    case 1:\n      {\n        const h$$1 = t.fields[3] | 0;\n        return h$$1 | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport const SetTreeModule$$$tolerance = 2;\nexport function SetTreeModule$$$mk(l$$2, k, r$$2) {\n  const matchValue = [l$$2, r$$2];\n  var $target$$5;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$5 = 0;\n    } else {\n      $target$$5 = 1;\n    }\n  } else {\n    $target$$5 = 1;\n  }\n\n  switch ($target$$5) {\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k);\n      }\n\n    case 1:\n      {\n        const hl = SetTreeModule$$$height(l$$2) | 0;\n        const hr = SetTreeModule$$$height(r$$2) | 0;\n        const m = (hl < hr ? hr : hl) | 0;\n        return SetTreeModule$$$SetNode(k, l$$2, r$$2, m + 1);\n      }\n  }\n}\nexport function SetTreeModule$$$rebalance(t1, k$$1, t2) {\n  const t1h = SetTreeModule$$$height(t1) | 0;\n  const t2h = SetTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + SetTreeModule$$$tolerance) {\n    if (t2.tag === 1) {\n      const t2r = t2.fields[2];\n      const t2l = t2.fields[1];\n      const t2k = t2.fields[0];\n\n      if (SetTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 1) {\n          const t2lr = t2l.fields[2];\n          const t2ll = t2l.fields[1];\n          const t2lk = t2l.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2ll), t2lk, SetTreeModule$$$mk(t2lr, t2k, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2l), t2k, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + SetTreeModule$$$tolerance) {\n    if (t1.tag === 1) {\n      const t1r = t1.fields[2];\n      const t1l = t1.fields[1];\n      const t1k = t1.fields[0];\n\n      if (SetTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 1) {\n          const t1rr = t1r.fields[2];\n          const t1rl = t1r.fields[1];\n          const t1rk = t1r.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1l, t1k, t1rl), t1rk, SetTreeModule$$$mk(t1rr, k$$1, t2));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(t1l, t1k, SetTreeModule$$$mk(t1r, k$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return SetTreeModule$$$mk(t1, k$$1, t2);\n  }\n}\nexport function SetTreeModule$$$add(comparer, k$$2, t$$1) {\n  switch (t$$1.tag) {\n    case 2:\n      {\n        const k2$$1 = t$$1.fields[0];\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return SetTreeModule$$$SetNode(k$$2, new SetTree$00601(0, \"SetEmpty\"), t$$1, 2);\n        } else if (c$$1 === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$SetNode(k$$2, t$$1, new SetTree$00601(0, \"SetEmpty\"), 2);\n        }\n      }\n\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k$$2);\n      }\n\n    default:\n      {\n        const r$$3 = t$$1.fields[2];\n        const l$$3 = t$$1.fields[1];\n        const k2 = t$$1.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$add(comparer, k$$2, l$$3), k2, r$$3);\n        } else if (c === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$rebalance(l$$3, k2, SetTreeModule$$$add(comparer, k$$2, r$$3));\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t2$$1) {\n  const matchValue$$1 = [t1$$1, t2$$1];\n  var $target$$6, t2$$2, t1$$2, k1, t2$$3, k2$$2, t1$$3, h1, h2, k1$$1, k2$$3, t11, t12, t21, t22;\n\n  if (matchValue$$1[0].tag === 2) {\n    if (matchValue$$1[1].tag === 0) {\n      $target$$6 = 1;\n      t1$$2 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 2) {\n      $target$$6 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    } else {\n      $target$$6 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    }\n  } else if (matchValue$$1[0].tag === 1) {\n    if (matchValue$$1[1].tag === 2) {\n      $target$$6 = 3;\n      k2$$2 = matchValue$$1[1].fields[0];\n      t1$$3 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 1) {\n      $target$$6 = 4;\n      h1 = matchValue$$1[0].fields[3];\n      h2 = matchValue$$1[1].fields[3];\n      k1$$1 = matchValue$$1[0].fields[0];\n      k2$$3 = matchValue$$1[1].fields[0];\n      t11 = matchValue$$1[0].fields[1];\n      t12 = matchValue$$1[0].fields[2];\n      t21 = matchValue$$1[1].fields[1];\n      t22 = matchValue$$1[1].fields[2];\n    } else {\n      $target$$6 = 1;\n      t1$$2 = matchValue$$1[0];\n    }\n  } else {\n    $target$$6 = 0;\n    t2$$2 = matchValue$$1[1];\n  }\n\n  switch ($target$$6) {\n    case 0:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t2$$2);\n      }\n\n    case 1:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t1$$2);\n      }\n\n    case 2:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k1, t2$$3));\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k2$$2, t1$$3));\n      }\n\n    case 4:\n      {\n        if (h1 + SetTreeModule$$$tolerance < h2) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t21), k2$$3, t22);\n        } else if (h2 + SetTreeModule$$$tolerance < h1) {\n          return SetTreeModule$$$rebalance(t11, k1$$1, SetTreeModule$$$balance(comparer$$1, t12, k$$3, t2$$1));\n        } else {\n          return SetTreeModule$$$mk(t1$$1, k$$3, t2$$1);\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$split(comparer$$2, pivot, t$$2) {\n  switch (t$$2.tag) {\n    case 2:\n      {\n        const k1$$3 = t$$2.fields[0];\n        const c$$3 = comparer$$2.Compare(k1$$3, pivot) | 0;\n\n        if (c$$3 < 0) {\n          return [t$$2, false, new SetTree$00601(0, \"SetEmpty\")];\n        } else if (c$$3 === 0) {\n          return [new SetTree$00601(0, \"SetEmpty\"), true, new SetTree$00601(0, \"SetEmpty\")];\n        } else {\n          return [new SetTree$00601(0, \"SetEmpty\"), false, t$$2];\n        }\n      }\n\n    case 0:\n      {\n        return [new SetTree$00601(0, \"SetEmpty\"), false, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    default:\n      {\n        const t12$$1 = t$$2.fields[2];\n        const t11$$1 = t$$2.fields[1];\n        const k1$$2 = t$$2.fields[0];\n        const c$$2 = comparer$$2.Compare(pivot, k1$$2) | 0;\n\n        if (c$$2 < 0) {\n          const patternInput = SetTreeModule$$$split(comparer$$2, pivot, t11$$1);\n          return [patternInput[0], patternInput[1], SetTreeModule$$$balance(comparer$$2, patternInput[2], k1$$2, t12$$1)];\n        } else if (c$$2 === 0) {\n          return [t11$$1, true, t12$$1];\n        } else {\n          const patternInput$$1 = SetTreeModule$$$split(comparer$$2, pivot, t12$$1);\n          return [SetTreeModule$$$balance(comparer$$2, t11$$1, k1$$2, patternInput$$1[0]), patternInput$$1[1], patternInput$$1[2]];\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$spliceOutSuccessor(t$$3) {\n  switch (t$$3.tag) {\n    case 2:\n      {\n        const k2$$4 = t$$3.fields[0];\n        return [k2$$4, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    case 1:\n      {\n        const r$$4 = t$$3.fields[2];\n        const l$$4 = t$$3.fields[1];\n        const k2$$5 = t$$3.fields[0];\n\n        if (l$$4.tag === 0) {\n          return [k2$$5, r$$4];\n        } else {\n          const patternInput$$2 = SetTreeModule$$$spliceOutSuccessor(l$$4);\n          return [patternInput$$2[0], SetTreeModule$$$mk(patternInput$$2[1], k2$$5, r$$4)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n      }\n  }\n}\nexport function SetTreeModule$$$remove(comparer$$3, k$$4, t$$4) {\n  switch (t$$4.tag) {\n    case 2:\n      {\n        const k2$$6 = t$$4.fields[0];\n        const c$$4 = comparer$$3.Compare(k$$4, k2$$6) | 0;\n\n        if (c$$4 === 0) {\n          return new SetTree$00601(0, \"SetEmpty\");\n        } else {\n          return t$$4;\n        }\n      }\n\n    case 1:\n      {\n        const r$$5 = t$$4.fields[2];\n        const l$$5 = t$$4.fields[1];\n        const k2$$7 = t$$4.fields[0];\n        const c$$5 = comparer$$3.Compare(k$$4, k2$$7) | 0;\n\n        if (c$$5 < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$remove(comparer$$3, k$$4, l$$5), k2$$7, r$$5);\n        } else if (c$$5 === 0) {\n          const matchValue$$2 = [l$$5, r$$5];\n\n          if (matchValue$$2[0].tag === 0) {\n            return r$$5;\n          } else if (matchValue$$2[1].tag === 0) {\n            return l$$5;\n          } else {\n            const patternInput$$3 = SetTreeModule$$$spliceOutSuccessor(r$$5);\n            return SetTreeModule$$$mk(l$$5, patternInput$$3[0], patternInput$$3[1]);\n          }\n        } else {\n          return SetTreeModule$$$rebalance(l$$5, k2$$7, SetTreeModule$$$remove(comparer$$3, k$$4, r$$5));\n        }\n      }\n\n    default:\n      {\n        return t$$4;\n      }\n  }\n}\nexport function SetTreeModule$$$mem(comparer$$4, k$$5, t$$5) {\n  SetTreeModule$$$mem: while (true) {\n    switch (t$$5.tag) {\n      case 2:\n        {\n          const k2$$9 = t$$5.fields[0];\n          return comparer$$4.Compare(k$$5, k2$$9) === 0;\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$6 = t$$5.fields[2];\n          const l$$6 = t$$5.fields[1];\n          const k2$$8 = t$$5.fields[0];\n          const c$$6 = comparer$$4.Compare(k$$5, k2$$8) | 0;\n\n          if (c$$6 < 0) {\n            const $comparer$$4$$7 = comparer$$4;\n            const $k$$5$$8 = k$$5;\n            comparer$$4 = $comparer$$4$$7;\n            k$$5 = $k$$5$$8;\n            t$$5 = l$$6;\n            continue SetTreeModule$$$mem;\n          } else if (c$$6 === 0) {\n            return true;\n          } else {\n            const $comparer$$4$$9 = comparer$$4;\n            const $k$$5$$10 = k$$5;\n            comparer$$4 = $comparer$$4$$9;\n            k$$5 = $k$$5$$10;\n            t$$5 = r$$6;\n            continue SetTreeModule$$$mem;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$iter($arg$$11, $arg$$12) {\n  SetTreeModule$$$iter: while (true) {\n    const f = $arg$$11,\n          t$$6 = $arg$$12;\n\n    switch (t$$6.tag) {\n      case 2:\n        {\n          const k2$$11 = t$$6.fields[0];\n          f(k2$$11);\n          break;\n        }\n\n      case 0:\n        {\n          break;\n        }\n\n      default:\n        {\n          const r$$7 = t$$6.fields[2];\n          const l$$7 = t$$6.fields[1];\n          const k2$$10 = t$$6.fields[0];\n          SetTreeModule$$$iter(f, l$$7);\n          f(k2$$10);\n          $arg$$11 = f;\n          $arg$$12 = r$$7;\n          continue SetTreeModule$$$iter;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$foldBack($arg$$13, $arg$$14, $arg$$15) {\n  SetTreeModule$$$foldBack: while (true) {\n    const f$$1 = $arg$$13,\n          m$$1 = $arg$$14,\n          x$$1 = $arg$$15;\n\n    switch (m$$1.tag) {\n      case 2:\n        {\n          const k$$7 = m$$1.fields[0];\n          return f$$1(k$$7, x$$1);\n        }\n\n      case 0:\n        {\n          return x$$1;\n        }\n\n      default:\n        {\n          const r$$8 = m$$1.fields[2];\n          const l$$8 = m$$1.fields[1];\n          const k$$6 = m$$1.fields[0];\n          $arg$$13 = f$$1;\n          $arg$$14 = l$$8;\n          $arg$$15 = f$$1(k$$6, SetTreeModule$$$foldBack(f$$1, r$$8, x$$1));\n          continue SetTreeModule$$$foldBack;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$fold($arg$$16, $arg$$17, $arg$$18) {\n  SetTreeModule$$$fold: while (true) {\n    const f$$2 = $arg$$16,\n          x$$2 = $arg$$17,\n          m$$2 = $arg$$18;\n\n    switch (m$$2.tag) {\n      case 2:\n        {\n          const k$$9 = m$$2.fields[0];\n          return f$$2(x$$2, k$$9);\n        }\n\n      case 0:\n        {\n          return x$$2;\n        }\n\n      default:\n        {\n          const r$$9 = m$$2.fields[2];\n          const l$$9 = m$$2.fields[1];\n          const k$$8 = m$$2.fields[0];\n          const x$$3 = SetTreeModule$$$fold(f$$2, x$$2, l$$9);\n          const x$$4 = f$$2(x$$3, k$$8);\n          $arg$$16 = f$$2;\n          $arg$$17 = x$$4;\n          $arg$$18 = r$$9;\n          continue SetTreeModule$$$fold;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$forall($arg$$19, $arg$$20) {\n  SetTreeModule$$$forall: while (true) {\n    const f$$3 = $arg$$19,\n          m$$3 = $arg$$20;\n\n    switch (m$$3.tag) {\n      case 2:\n        {\n          const k2$$13 = m$$3.fields[0];\n          return f$$3(k2$$13);\n        }\n\n      case 0:\n        {\n          return true;\n        }\n\n      default:\n        {\n          const r$$10 = m$$3.fields[2];\n          const l$$10 = m$$3.fields[1];\n          const k2$$12 = m$$3.fields[0];\n\n          if (f$$3(k2$$12) ? SetTreeModule$$$forall(f$$3, l$$10) : false) {\n            $arg$$19 = f$$3;\n            $arg$$20 = r$$10;\n            continue SetTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$exists($arg$$21, $arg$$22) {\n  SetTreeModule$$$exists: while (true) {\n    const f$$4 = $arg$$21,\n          m$$4 = $arg$$22;\n\n    switch (m$$4.tag) {\n      case 2:\n        {\n          const k2$$15 = m$$4.fields[0];\n          return f$$4(k2$$15);\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$11 = m$$4.fields[2];\n          const l$$11 = m$$4.fields[1];\n          const k2$$14 = m$$4.fields[0];\n\n          if (f$$4(k2$$14) ? true : SetTreeModule$$$exists(f$$4, l$$11)) {\n            return true;\n          } else {\n            $arg$$21 = f$$4;\n            $arg$$22 = r$$11;\n            continue SetTreeModule$$$exists;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$isEmpty(m$$5) {\n  if (m$$5.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$subset(comparer$$5, a, b) {\n  return SetTreeModule$$$forall(function (x$$5) {\n    return SetTreeModule$$$mem(comparer$$5, x$$5, b);\n  }, a);\n}\nexport function SetTreeModule$$$psubset(comparer$$6, a$$1, b$$1) {\n  if (SetTreeModule$$$forall(function (x$$6) {\n    return SetTreeModule$$$mem(comparer$$6, x$$6, b$$1);\n  }, a$$1)) {\n    return SetTreeModule$$$exists(function (x$$7) {\n      return !SetTreeModule$$$mem(comparer$$6, x$$7, a$$1);\n    }, b$$1);\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$filterAux($arg$$23, $arg$$24, $arg$$25, $arg$$26) {\n  SetTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$23,\n          f$$5 = $arg$$24,\n          s$$2 = $arg$$25,\n          acc$$1 = $arg$$26;\n\n    switch (s$$2.tag) {\n      case 2:\n        {\n          const k$$11 = s$$2.fields[0];\n\n          if (f$$5(k$$11)) {\n            return SetTreeModule$$$add(comparer$$7, k$$11, acc$$1);\n          } else {\n            return acc$$1;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$1;\n        }\n\n      default:\n        {\n          const r$$12 = s$$2.fields[2];\n          const l$$12 = s$$2.fields[1];\n          const k$$10 = s$$2.fields[0];\n          const acc$$2 = f$$5(k$$10) ? SetTreeModule$$$add(comparer$$7, k$$10, acc$$1) : acc$$1;\n          $arg$$23 = comparer$$7;\n          $arg$$24 = f$$5;\n          $arg$$25 = l$$12;\n          $arg$$26 = SetTreeModule$$$filterAux(comparer$$7, f$$5, r$$12, acc$$2);\n          continue SetTreeModule$$$filterAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$filter(comparer$$8, f$$6, s$$3) {\n  return SetTreeModule$$$filterAux(comparer$$8, f$$6, s$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$diffAux(comparer$$9, m$$6, acc$$3) {\n  SetTreeModule$$$diffAux: while (true) {\n    switch (m$$6.tag) {\n      case 2:\n        {\n          const k$$13 = m$$6.fields[0];\n          return SetTreeModule$$$remove(comparer$$9, k$$13, acc$$3);\n        }\n\n      case 0:\n        {\n          return acc$$3;\n        }\n\n      default:\n        {\n          const r$$13 = m$$6.fields[2];\n          const l$$13 = m$$6.fields[1];\n          const k$$12 = m$$6.fields[0];\n          const $acc$$3$$31 = acc$$3;\n          const $comparer$$9$$30 = comparer$$9;\n          comparer$$9 = $comparer$$9$$30;\n          m$$6 = l$$13;\n          acc$$3 = SetTreeModule$$$diffAux($comparer$$9$$30, r$$13, SetTreeModule$$$remove($comparer$$9$$30, k$$12, $acc$$3$$31));\n          continue SetTreeModule$$$diffAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$diff(comparer$$10, a$$2, b$$2) {\n  return SetTreeModule$$$diffAux(comparer$$10, b$$2, a$$2);\n}\nexport function SetTreeModule$$$union(comparer$$11, t1$$4, t2$$4) {\n  const matchValue$$3 = [t1$$4, t2$$4];\n  var $target$$32, h1$$1, h2$$1, k1$$4, k2$$16, t11$$2, t12$$2, t21$$1, t22$$1, t$$7, t$$8, k1$$5, t2$$5, k2$$17, t1$$5;\n\n  if (matchValue$$3[0].tag === 0) {\n    $target$$32 = 1;\n    t$$7 = matchValue$$3[1];\n  } else if (matchValue$$3[0].tag === 2) {\n    if (matchValue$$3[1].tag === 0) {\n      $target$$32 = 2;\n      t$$8 = matchValue$$3[0];\n    } else if (matchValue$$3[1].tag === 2) {\n      $target$$32 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    } else {\n      $target$$32 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    }\n  } else if (matchValue$$3[1].tag === 0) {\n    $target$$32 = 2;\n    t$$8 = matchValue$$3[0];\n  } else if (matchValue$$3[1].tag === 2) {\n    $target$$32 = 4;\n    k2$$17 = matchValue$$3[1].fields[0];\n    t1$$5 = matchValue$$3[0];\n  } else {\n    $target$$32 = 0;\n    h1$$1 = matchValue$$3[0].fields[3];\n    h2$$1 = matchValue$$3[1].fields[3];\n    k1$$4 = matchValue$$3[0].fields[0];\n    k2$$16 = matchValue$$3[1].fields[0];\n    t11$$2 = matchValue$$3[0].fields[1];\n    t12$$2 = matchValue$$3[0].fields[2];\n    t21$$1 = matchValue$$3[1].fields[1];\n    t22$$1 = matchValue$$3[1].fields[2];\n  }\n\n  switch ($target$$32) {\n    case 0:\n      {\n        if (h1$$1 > h2$$1) {\n          const patternInput$$4 = SetTreeModule$$$split(comparer$$11, k1$$4, t2$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t11$$2, patternInput$$4[0]), k1$$4, SetTreeModule$$$union(comparer$$11, t12$$2, patternInput$$4[2]));\n        } else {\n          const patternInput$$5 = SetTreeModule$$$split(comparer$$11, k2$$16, t1$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t21$$1, patternInput$$5[0]), k2$$16, SetTreeModule$$$union(comparer$$11, t22$$1, patternInput$$5[2]));\n        }\n      }\n\n    case 1:\n      {\n        return t$$7;\n      }\n\n    case 2:\n      {\n        return t$$8;\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$11, k1$$5, t2$$5);\n      }\n\n    case 4:\n      {\n        return SetTreeModule$$$add(comparer$$11, k2$$17, t1$$5);\n      }\n  }\n}\nexport function SetTreeModule$$$intersectionAux(comparer$$12, b$$3, m$$7, acc$$4) {\n  SetTreeModule$$$intersectionAux: while (true) {\n    switch (m$$7.tag) {\n      case 2:\n        {\n          const k$$15 = m$$7.fields[0];\n\n          if (SetTreeModule$$$mem(comparer$$12, k$$15, b$$3)) {\n            return SetTreeModule$$$add(comparer$$12, k$$15, acc$$4);\n          } else {\n            return acc$$4;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$4;\n        }\n\n      default:\n        {\n          const r$$14 = m$$7.fields[2];\n          const l$$14 = m$$7.fields[1];\n          const k$$14 = m$$7.fields[0];\n          const acc$$5 = SetTreeModule$$$intersectionAux(comparer$$12, b$$3, r$$14, acc$$4);\n          const acc$$6 = SetTreeModule$$$mem(comparer$$12, k$$14, b$$3) ? SetTreeModule$$$add(comparer$$12, k$$14, acc$$5) : acc$$5;\n          const $b$$3$$34 = b$$3;\n          const $comparer$$12$$33 = comparer$$12;\n          comparer$$12 = $comparer$$12$$33;\n          b$$3 = $b$$3$$34;\n          m$$7 = l$$14;\n          acc$$4 = acc$$6;\n          continue SetTreeModule$$$intersectionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$intersection(comparer$$13, a$$3, b$$4) {\n  return SetTreeModule$$$intersectionAux(comparer$$13, b$$4, a$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$partition1(comparer$$14, f$$7, k$$16, acc1, acc2) {\n  if (f$$7(k$$16)) {\n    return [SetTreeModule$$$add(comparer$$14, k$$16, acc1), acc2];\n  } else {\n    return [acc1, SetTreeModule$$$add(comparer$$14, k$$16, acc2)];\n  }\n}\nexport function SetTreeModule$$$partitionAux($arg$$40, $arg$$41, $arg$$42, $arg$$43, $arg$$44) {\n  SetTreeModule$$$partitionAux: while (true) {\n    const comparer$$15 = $arg$$40,\n          f$$8 = $arg$$41,\n          s$$4 = $arg$$42,\n          acc_0 = $arg$$43,\n          acc_1 = $arg$$44;\n    const acc$$7 = [acc_0, acc_1];\n\n    switch (s$$4.tag) {\n      case 2:\n        {\n          const k$$18 = s$$4.fields[0];\n          return SetTreeModule$$$partition1(comparer$$15, f$$8, k$$18, acc$$7[0], acc$$7[1]);\n        }\n\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      default:\n        {\n          const r$$15 = s$$4.fields[2];\n          const l$$15 = s$$4.fields[1];\n          const k$$17 = s$$4.fields[0];\n          const acc$$8 = SetTreeModule$$$partitionAux(comparer$$15, f$$8, r$$15, acc$$7[0], acc$$7[1]);\n          const acc$$9 = SetTreeModule$$$partition1(comparer$$15, f$$8, k$$17, acc$$8[0], acc$$8[1]);\n          $arg$$40 = comparer$$15;\n          $arg$$41 = f$$8;\n          $arg$$42 = l$$15;\n          $arg$$43 = acc$$9[0];\n          $arg$$44 = acc$$9[1];\n          continue SetTreeModule$$$partitionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$partition(comparer$$16, f$$9, s$$5) {\n  const seed = [new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")];\n  return SetTreeModule$$$partitionAux(comparer$$16, f$$9, s$$5, seed[0], seed[1]);\n}\nexport function SetTreeModule$$$$007CMatchSetNode$007CMatchSetEmpty$007C(s$$6) {\n  switch (s$$6.tag) {\n    case 2:\n      {\n        const k2$$19 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$19, new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")]);\n      }\n\n    case 0:\n      {\n        return new Choice(1, \"Choice2Of2\", null);\n      }\n\n    default:\n      {\n        const r$$16 = s$$6.fields[2];\n        const l$$16 = s$$6.fields[1];\n        const k2$$18 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$18, l$$16, r$$16]);\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElementAux(s$$7, n$$1) {\n  SetTreeModule$$$minimumElementAux: while (true) {\n    switch (s$$7.tag) {\n      case 2:\n        {\n          const k$$20 = s$$7.fields[0];\n          return k$$20;\n        }\n\n      case 0:\n        {\n          return n$$1;\n        }\n\n      default:\n        {\n          const l$$17 = s$$7.fields[1];\n          const k$$19 = s$$7.fields[0];\n          s$$7 = l$$17;\n          n$$1 = k$$19;\n          continue SetTreeModule$$$minimumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$minimumElementOpt(s$$8) {\n  switch (s$$8.tag) {\n    case 2:\n      {\n        const k$$22 = s$$8.fields[0];\n        return some(k$$22);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const l$$18 = s$$8.fields[1];\n        const k$$21 = s$$8.fields[0];\n        return some(SetTreeModule$$$minimumElementAux(l$$18, k$$21));\n      }\n  }\n}\nexport function SetTreeModule$$$maximumElementAux(s$$9, n$$2) {\n  SetTreeModule$$$maximumElementAux: while (true) {\n    switch (s$$9.tag) {\n      case 2:\n        {\n          const k$$24 = s$$9.fields[0];\n          return k$$24;\n        }\n\n      case 0:\n        {\n          return n$$2;\n        }\n\n      default:\n        {\n          const r$$17 = s$$9.fields[2];\n          const k$$23 = s$$9.fields[0];\n          s$$9 = r$$17;\n          n$$2 = k$$23;\n          continue SetTreeModule$$$maximumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$maximumElementOpt(s$$10) {\n  switch (s$$10.tag) {\n    case 2:\n      {\n        const k$$26 = s$$10.fields[0];\n        return some(k$$26);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const r$$18 = s$$10.fields[2];\n        const k$$25 = s$$10.fields[0];\n        return some(SetTreeModule$$$maximumElementAux(r$$18, k$$25));\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElement(s$$11) {\n  const matchValue$$4 = SetTreeModule$$$minimumElementOpt(s$$11);\n\n  if (matchValue$$4 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$27 = value$$2(matchValue$$4);\n    return k$$27;\n  }\n}\nexport function SetTreeModule$$$maximumElement(s$$12) {\n  const matchValue$$5 = SetTreeModule$$$maximumElementOpt(s$$12);\n\n  if (matchValue$$5 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$28 = value$$2(matchValue$$5);\n    return k$$28;\n  }\n}\nexport const SetTreeModule$002ESetIterator$00601 = declare(function Set_SetTreeModule_SetIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function SetTreeModule$002ESetIterator$00601$reflection($gen$$48) {\n  return record(\"Set.SetTreeModule.SetIterator`1\", [$gen$$48], SetTreeModule$002ESetIterator$00601, () => [[\"stack\", list(SetTree$00601$reflection($gen$$48))], [\"started\", bool]]);\n}\nexport function SetTreeModule$$$collapseLHS(stack) {\n  SetTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 2) {\n        return stack;\n      } else if (stack.head.tag === 1) {\n        const $stack$$49 = stack;\n        stack = new List($stack$$49.head.fields[1], new List(SetTreeModule$$$SetOne($stack$$49.head.fields[0]), new List($stack$$49.head.fields[2], $stack$$49.tail)));\n        continue SetTreeModule$$$collapseLHS;\n      } else {\n        const $stack$$50 = stack;\n        stack = $stack$$50.tail;\n        continue SetTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$mkIterator(s$$13) {\n  return new SetTreeModule$002ESetIterator$00601(SetTreeModule$$$collapseLHS(new List(s$$13, new List())), false);\n}\nexport function SetTreeModule$$$notStarted() {\n  throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule$$$alreadyFinished() {\n  throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule$$$current(i) {\n  if (i.started) {\n    const matchValue$$6 = i.stack;\n\n    if (matchValue$$6.tail == null) {\n      return SetTreeModule$$$alreadyFinished();\n    } else if (matchValue$$6.head.tag === 2) {\n      return matchValue$$6.head.fields[0];\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n    }\n  } else {\n    return SetTreeModule$$$notStarted();\n  }\n}\nexport function SetTreeModule$$$moveNext(i$$1) {\n  if (i$$1.started) {\n    const matchValue$$7 = i$$1.stack;\n\n    if (matchValue$$7.tail == null) {\n      return false;\n    } else if (matchValue$$7.head.tag === 2) {\n      i$$1.stack = SetTreeModule$$$collapseLHS(matchValue$$7.tail);\n      return !(i$$1.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$1.started = true;\n    return !(i$$1.stack.tail == null);\n  }\n}\nexport const SetTreeModule$002EmkIEnumerator$00601 = declare(function Set_SetTreeModule_mkIEnumerator(s$$14) {\n  const $this$$1 = this;\n  $this$$1.s = s$$14;\n  $this$$1.i = SetTreeModule$$$mkIterator($this$$1.s);\n});\nexport function SetTreeModule$002EmkIEnumerator$00601$reflection($gen$$51) {\n  return type(\"Set.SetTreeModule.mkIEnumerator`1\", [$gen$$51]);\n}\nexport function SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$14) {\n  return this instanceof SetTreeModule$002EmkIEnumerator$00601 ? SetTreeModule$002EmkIEnumerator$00601.call(this, s$$14) : new SetTreeModule$002EmkIEnumerator$00601(s$$14);\n}\nObject.defineProperty(SetTreeModule$002EmkIEnumerator$00601.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return SetTreeModule$$$current(__.i);\n  }\n});\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return SetTreeModule$$$moveNext(__$$1.i);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = SetTreeModule$$$mkIterator(__$$2.s);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Dispose = function () {};\n\nexport function SetTreeModule$$$mkIEnumerator(s$$15) {\n  return SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$15);\n}\nexport function SetTreeModule$$$toSeq(s$$16) {\n  const en = SetTreeModule$$$mkIEnumerator(s$$16);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport function SetTreeModule$$$compareStacks(comparer$$17, l1, l2) {\n  SetTreeModule$$$compareStacks: while (true) {\n    const matchValue$$8 = [l1, l2];\n    var $target$$52, t1$$6, t2$$6, n1k, n2k, t1$$7, t2$$7, n1k$$1, n2k$$1, n2r, t1$$8, t2$$8, emp, n1k$$2, n1r, n2k$$2, t1$$9, t2$$9, n1k$$3, n1r$$1, n2k$$3, n2r$$1, t1$$10, t2$$10, n1k$$4, t1$$11, n1k$$5, n1l, n1r$$2, t1$$12, n2k$$4, t2$$11, n2k$$5, n2l, n2r$$2, t2$$12;\n\n    if (matchValue$$8[0].tail != null) {\n      if (matchValue$$8[1].tail != null) {\n        if (matchValue$$8[1].head.tag === 2) {\n          if (matchValue$$8[0].head.tag === 2) {\n            $target$$52 = 4;\n            n1k = matchValue$$8[0].head.fields[0];\n            n2k = matchValue$$8[1].head.fields[0];\n            t1$$7 = matchValue$$8[0].tail;\n            t2$$7 = matchValue$$8[1].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            if (matchValue$$8[0].head.fields[1].tag === 0) {\n              $target$$52 = 6;\n              emp = matchValue$$8[0].head.fields[1];\n              n1k$$2 = matchValue$$8[0].head.fields[0];\n              n1r = matchValue$$8[0].head.fields[2];\n              n2k$$2 = matchValue$$8[1].head.fields[0];\n              t1$$9 = matchValue$$8[0].tail;\n              t2$$9 = matchValue$$8[1].tail;\n            } else {\n              $target$$52 = 9;\n              n1k$$5 = matchValue$$8[0].head.fields[0];\n              n1l = matchValue$$8[0].head.fields[1];\n              n1r$$2 = matchValue$$8[0].head.fields[2];\n              t1$$12 = matchValue$$8[0].tail;\n            }\n          } else {\n            $target$$52 = 10;\n            n2k$$4 = matchValue$$8[1].head.fields[0];\n            t2$$11 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[1].head.tag === 1) {\n          if (matchValue$$8[1].head.fields[1].tag === 0) {\n            if (matchValue$$8[0].head.tag === 2) {\n              $target$$52 = 5;\n              n1k$$1 = matchValue$$8[0].head.fields[0];\n              n2k$$1 = matchValue$$8[1].head.fields[0];\n              n2r = matchValue$$8[1].head.fields[2];\n              t1$$8 = matchValue$$8[0].tail;\n              t2$$8 = matchValue$$8[1].tail;\n            } else if (matchValue$$8[0].head.tag === 1) {\n              if (matchValue$$8[0].head.fields[1].tag === 0) {\n                $target$$52 = 7;\n                n1k$$3 = matchValue$$8[0].head.fields[0];\n                n1r$$1 = matchValue$$8[0].head.fields[2];\n                n2k$$3 = matchValue$$8[1].head.fields[0];\n                n2r$$1 = matchValue$$8[1].head.fields[2];\n                t1$$10 = matchValue$$8[0].tail;\n                t2$$10 = matchValue$$8[1].tail;\n              } else {\n                $target$$52 = 9;\n                n1k$$5 = matchValue$$8[0].head.fields[0];\n                n1l = matchValue$$8[0].head.fields[1];\n                n1r$$2 = matchValue$$8[0].head.fields[2];\n                t1$$12 = matchValue$$8[0].tail;\n              }\n            } else {\n              $target$$52 = 11;\n              n2k$$5 = matchValue$$8[1].head.fields[0];\n              n2l = matchValue$$8[1].head.fields[1];\n              n2r$$2 = matchValue$$8[1].head.fields[2];\n              t2$$12 = matchValue$$8[1].tail;\n            }\n          } else if (matchValue$$8[0].head.tag === 2) {\n            $target$$52 = 8;\n            n1k$$4 = matchValue$$8[0].head.fields[0];\n            t1$$11 = matchValue$$8[0].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            $target$$52 = 9;\n            n1k$$5 = matchValue$$8[0].head.fields[0];\n            n1l = matchValue$$8[0].head.fields[1];\n            n1r$$2 = matchValue$$8[0].head.fields[2];\n            t1$$12 = matchValue$$8[0].tail;\n          } else {\n            $target$$52 = 11;\n            n2k$$5 = matchValue$$8[1].head.fields[0];\n            n2l = matchValue$$8[1].head.fields[1];\n            n2r$$2 = matchValue$$8[1].head.fields[2];\n            t2$$12 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[0].head.tag === 2) {\n          $target$$52 = 8;\n          n1k$$4 = matchValue$$8[0].head.fields[0];\n          t1$$11 = matchValue$$8[0].tail;\n        } else if (matchValue$$8[0].head.tag === 1) {\n          $target$$52 = 9;\n          n1k$$5 = matchValue$$8[0].head.fields[0];\n          n1l = matchValue$$8[0].head.fields[1];\n          n1r$$2 = matchValue$$8[0].head.fields[2];\n          t1$$12 = matchValue$$8[0].tail;\n        } else {\n          $target$$52 = 3;\n          t1$$6 = matchValue$$8[0].tail;\n          t2$$6 = matchValue$$8[1].tail;\n        }\n      } else {\n        $target$$52 = 2;\n      }\n    } else if (matchValue$$8[1].tail != null) {\n      $target$$52 = 1;\n    } else {\n      $target$$52 = 0;\n    }\n\n    switch ($target$$52) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          return -1 | 0;\n        }\n\n      case 2:\n        {\n          return 1;\n        }\n\n      case 3:\n        {\n          const $comparer$$17$$53 = comparer$$17;\n          comparer$$17 = $comparer$$17$$53;\n          l1 = t1$$6;\n          l2 = t2$$6;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 4:\n        {\n          const c$$7 = comparer$$17.Compare(n1k, n2k) | 0;\n\n          if (c$$7 !== 0) {\n            return c$$7 | 0;\n          } else {\n            const $comparer$$17$$54 = comparer$$17;\n            comparer$$17 = $comparer$$17$$54;\n            l1 = t1$$7;\n            l2 = t2$$7;\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 5:\n        {\n          const c$$8 = comparer$$17.Compare(n1k$$1, n2k$$1) | 0;\n\n          if (c$$8 !== 0) {\n            return c$$8 | 0;\n          } else {\n            const $comparer$$17$$55 = comparer$$17;\n            comparer$$17 = $comparer$$17$$55;\n            l1 = new List(new SetTree$00601(0, \"SetEmpty\"), t1$$8);\n            l2 = new List(n2r, t2$$8);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 6:\n        {\n          const c$$9 = comparer$$17.Compare(n1k$$2, n2k$$2) | 0;\n\n          if (c$$9 !== 0) {\n            return c$$9 | 0;\n          } else {\n            const $comparer$$17$$56 = comparer$$17;\n            comparer$$17 = $comparer$$17$$56;\n            l1 = new List(n1r, t1$$9);\n            l2 = new List(emp, t2$$9);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 7:\n        {\n          const c$$10 = comparer$$17.Compare(n1k$$3, n2k$$3) | 0;\n\n          if (c$$10 !== 0) {\n            return c$$10 | 0;\n          } else {\n            const $comparer$$17$$57 = comparer$$17;\n            comparer$$17 = $comparer$$17$$57;\n            l1 = new List(n1r$$1, t1$$10);\n            l2 = new List(n2r$$1, t2$$10);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 8:\n        {\n          const $comparer$$17$$58 = comparer$$17;\n          const $l2$$59 = l2;\n          comparer$$17 = $comparer$$17$$58;\n          l1 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n1k$$4), t1$$11));\n          l2 = $l2$$59;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 9:\n        {\n          const $comparer$$17$$60 = comparer$$17;\n          const $l2$$61 = l2;\n          comparer$$17 = $comparer$$17$$60;\n          l1 = new List(n1l, new List(SetTreeModule$$$SetNode(n1k$$5, new SetTree$00601(0, \"SetEmpty\"), n1r$$2, 0), t1$$12));\n          l2 = $l2$$61;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 10:\n        {\n          const $comparer$$17$$62 = comparer$$17;\n          const $l1$$63 = l1;\n          comparer$$17 = $comparer$$17$$62;\n          l1 = $l1$$63;\n          l2 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n2k$$4), t2$$11));\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 11:\n        {\n          const $comparer$$17$$64 = comparer$$17;\n          const $l1$$65 = l1;\n          comparer$$17 = $comparer$$17$$64;\n          l1 = $l1$$65;\n          l2 = new List(n2l, new List(SetTreeModule$$$SetNode(n2k$$5, new SetTree$00601(0, \"SetEmpty\"), n2r$$2, 0), t2$$12));\n          continue SetTreeModule$$$compareStacks;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$compare(comparer$$18, s1, s2) {\n  const matchValue$$9 = [s1, s2];\n\n  if (matchValue$$9[0].tag === 0) {\n    if (matchValue$$9[1].tag === 0) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (matchValue$$9[1].tag === 0) {\n    return 1;\n  } else {\n    return SetTreeModule$$$compareStacks(comparer$$18, new List(s1, new List()), new List(s2, new List())) | 0;\n  }\n}\nexport function SetTreeModule$$$choose(s$$17) {\n  return SetTreeModule$$$minimumElement(s$$17);\n}\nexport function SetTreeModule$$$loop(m$$8, acc$$10) {\n  SetTreeModule$$$loop: while (true) {\n    switch (m$$8.tag) {\n      case 2:\n        {\n          const k$$32 = m$$8.fields[0];\n          return new List(k$$32, acc$$10);\n        }\n\n      case 0:\n        {\n          return acc$$10;\n        }\n\n      default:\n        {\n          const r$$20 = m$$8.fields[2];\n          const l$$20 = m$$8.fields[1];\n          const k$$31 = m$$8.fields[0];\n          const $acc$$10$$66 = acc$$10;\n          m$$8 = l$$20;\n          acc$$10 = new List(k$$31, SetTreeModule$$$loop(r$$20, $acc$$10$$66));\n          continue SetTreeModule$$$loop;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$toList(s$$18) {\n  return SetTreeModule$$$loop(s$$18, new List());\n}\nexport function SetTreeModule$$$copyToArray(s$$19, arr, i$$2) {\n  let j = i$$2 | 0;\n  SetTreeModule$$$iter(function (x$$8) {\n    arr[j] = x$$8;\n    j = j + 1;\n  }, s$$19);\n}\nexport function SetTreeModule$$$mkFromEnumerator(comparer$$19, acc$$11, e) {\n  SetTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const $acc$$11$$68 = acc$$11;\n      const $comparer$$19$$67 = comparer$$19;\n      const $e$$69 = e;\n      comparer$$19 = $comparer$$19$$67;\n      acc$$11 = SetTreeModule$$$add($comparer$$19$$67, $e$$69.Current, $acc$$11$$68);\n      e = $e$$69;\n      continue SetTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$11;\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$ofSeq(comparer$$20, c$$11) {\n  const ie = getEnumerator(c$$11);\n\n  try {\n    return SetTreeModule$$$mkFromEnumerator(comparer$$20, new SetTree$00601(0, \"SetEmpty\"), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function SetTreeModule$$$ofArray(comparer$$21, arr$$1) {\n  let acc$$12 = new SetTree$00601(0, \"SetEmpty\");\n\n  for (let i$$3 = 0; i$$3 <= arr$$1.length - 1; i$$3++) {\n    acc$$12 = SetTreeModule$$$add(comparer$$21, arr$$1[i$$3], acc$$12);\n  }\n\n  return acc$$12;\n}\nexport const FSharpSet = declare(function Set_Set(comparer$$22, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$22;\n  $this$$2.tree = tree;\n});\nexport function FSharpSet$reflection($gen$$70) {\n  return type(\"Set.FSharpSet\", [$gen$$70]);\n}\nexport function FSharpSet$$$$002Ector$$2528C5CB(comparer$$22, tree) {\n  return this instanceof FSharpSet ? FSharpSet.call(this, comparer$$22, tree) : new FSharpSet(comparer$$22, tree);\n}\nexport function FSharpSet$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpSet$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpSet$$Add$$2B595(s$$20, x$$9) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$20), SetTreeModule$$$add(FSharpSet$$get_Comparer(s$$20), x$$9, FSharpSet$$get_Tree(s$$20)));\n}\nexport function FSharpSet$$Remove$$2B595(s$$21, x$$10) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$21), SetTreeModule$$$remove(FSharpSet$$get_Comparer(s$$21), x$$10, FSharpSet$$get_Tree(s$$21)));\n}\nexport function FSharpSet$$get_Count(s$$22) {\n  return SetTreeModule$$$count(FSharpSet$$get_Tree(s$$22));\n}\nexport function FSharpSet$$Contains$$2B595(s$$23, x$$11) {\n  return SetTreeModule$$$mem(FSharpSet$$get_Comparer(s$$23), x$$11, FSharpSet$$get_Tree(s$$23));\n}\nexport function FSharpSet$$Iterate$$5028453F(s$$24, x$$12) {\n  SetTreeModule$$$iter(x$$12, FSharpSet$$get_Tree(s$$24));\n}\nexport function FSharpSet$$Fold(s$$25, f$$10, z) {\n  return SetTreeModule$$$fold(function (x$$13, z$$1) {\n    return f$$10(z$$1, x$$13);\n  }, z, FSharpSet$$get_Tree(s$$25));\n}\nexport function FSharpSet$$get_IsEmpty(s$$26) {\n  return SetTreeModule$$$isEmpty(FSharpSet$$get_Tree(s$$26));\n}\nexport function FSharpSet$$Partition$$Z1D55A0D7(s$$27, f$$11) {\n  if (FSharpSet$$get_Tree(s$$27).tag === 0) {\n    return [s$$27, s$$27];\n  } else {\n    const patternInput$$6 = SetTreeModule$$$partition(FSharpSet$$get_Comparer(s$$27), f$$11, FSharpSet$$get_Tree(s$$27));\n    return [FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[0]), FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[1])];\n  }\n}\nexport function FSharpSet$$Filter$$Z1D55A0D7(s$$28, f$$12) {\n  if (FSharpSet$$get_Tree(s$$28).tag === 0) {\n    return s$$28;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$28), SetTreeModule$$$filter(FSharpSet$$get_Comparer(s$$28), f$$12, FSharpSet$$get_Tree(s$$28)));\n  }\n}\nexport function FSharpSet$$Map$$38806891(s$$29, f$$13, comparer$$23) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$23, SetTreeModule$$$fold(function (acc$$13, k$$33) {\n    return SetTreeModule$$$add(comparer$$23, f$$13(k$$33), acc$$13);\n  }, new SetTree$00601(0, \"SetEmpty\"), FSharpSet$$get_Tree(s$$29)));\n}\nexport function FSharpSet$$Exists$$Z1D55A0D7(s$$30, f$$14) {\n  return SetTreeModule$$$exists(f$$14, FSharpSet$$get_Tree(s$$30));\n}\nexport function FSharpSet$$ForAll$$Z1D55A0D7(s$$31, f$$15) {\n  return SetTreeModule$$$forall(f$$15, FSharpSet$$get_Tree(s$$31));\n}\nexport function FSharpSet$$$op_Subtraction(a$$4, b$$5) {\n  if (FSharpSet$$get_Tree(a$$4).tag === 0) {\n    return a$$4;\n  } else if (FSharpSet$$get_Tree(b$$5).tag === 0) {\n    return a$$4;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$4), SetTreeModule$$$diff(FSharpSet$$get_Comparer(a$$4), FSharpSet$$get_Tree(a$$4), FSharpSet$$get_Tree(b$$5)));\n  }\n}\nexport function FSharpSet$$$op_Addition(a$$5, b$$6) {\n  if (FSharpSet$$get_Tree(b$$6).tag === 0) {\n    return a$$5;\n  } else if (FSharpSet$$get_Tree(a$$5).tag === 0) {\n    return b$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$5), SetTreeModule$$$union(FSharpSet$$get_Comparer(a$$5), FSharpSet$$get_Tree(a$$5), FSharpSet$$get_Tree(b$$6)));\n  }\n}\nexport function FSharpSet$$$Intersection$$Z3BE9BFE0(a$$6, b$$7) {\n  if (FSharpSet$$get_Tree(b$$7).tag === 0) {\n    return b$$7;\n  } else if (FSharpSet$$get_Tree(a$$6).tag === 0) {\n    return a$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$6), SetTreeModule$$$intersection(FSharpSet$$get_Comparer(a$$6), FSharpSet$$get_Tree(a$$6), FSharpSet$$get_Tree(b$$7)));\n  }\n}\nexport function FSharpSet$$$IntersectionMany$$Z15B59630(sets) {\n  return reduce(FSharpSet$$$Intersection$$Z3BE9BFE0, sets);\n}\nexport function FSharpSet$$$Equality$$Z3BE9BFE0(a$$7, b$$8) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$7), FSharpSet$$get_Tree(a$$7), FSharpSet$$get_Tree(b$$8)) === 0;\n}\nexport function FSharpSet$$$Compare$$Z3BE9BFE0(a$$8, b$$9) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$8), FSharpSet$$get_Tree(a$$8), FSharpSet$$get_Tree(b$$9));\n}\nexport function FSharpSet$$get_Choose(x$$14) {\n  return SetTreeModule$$$choose(FSharpSet$$get_Tree(x$$14));\n}\nexport function FSharpSet$$get_MinimumElement(x$$15) {\n  return SetTreeModule$$$minimumElement(FSharpSet$$get_Tree(x$$15));\n}\nexport function FSharpSet$$get_MaximumElement(x$$16) {\n  return SetTreeModule$$$maximumElement(FSharpSet$$get_Tree(x$$16));\n}\nexport function FSharpSet$$IsSubsetOf$$6A20B1FF(x$$17, y) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$17), FSharpSet$$get_Tree(x$$17), FSharpSet$$get_Tree(y));\n}\nexport function FSharpSet$$IsSupersetOf$$6A20B1FF(x$$18, y$$1) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$18), FSharpSet$$get_Tree(y$$1), FSharpSet$$get_Tree(x$$18));\n}\nexport function FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$19, y$$2) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$19), FSharpSet$$get_Tree(x$$19), FSharpSet$$get_Tree(y$$2));\n}\nexport function FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$20, y$$3) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$20), FSharpSet$$get_Tree(y$$3), FSharpSet$$get_Tree(x$$20));\n}\n\nFSharpSet.prototype.toString = function () {\n  const this$ = this;\n  return \"set [\" + join(\"; \", ...map$$1(String, this$)) + \"]\";\n};\n\nFSharpSet.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$22, y$$4) {\n    return (x$$22 << 1) + y$$4 + 631;\n  };\n\n  let res = 0;\n  const e$$1 = SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    res = combineHash(res, structuralHash(e$$1.Current));\n  }\n\n  return Math.abs(res) | 0;\n};\n\nFSharpSet.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$2), FSharpSet$$get_Tree(this$$$2), FSharpSet$$get_Tree(that)) === 0;\n};\n\nFSharpSet.prototype.CompareTo = function (that$$1) {\n  const this$$$3 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$3), FSharpSet$$get_Tree(this$$$3), FSharpSet$$get_Tree(that$$1)) | 0;\n};\n\nFSharpSet.prototype[Symbol.iterator] = function () {\n  const s$$32 = this;\n  return toIterator(SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(s$$32)));\n};\n\nexport function isEmpty(s$$33) {\n  return FSharpSet$$get_IsEmpty(s$$33);\n}\nexport function contains(x$$23, s$$34) {\n  return FSharpSet$$Contains$$2B595(s$$34, x$$23);\n}\nexport function add(x$$24, s$$35) {\n  return FSharpSet$$Add$$2B595(s$$35, x$$24);\n}\nexport function singleton(x$$25, comparer$$24) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$24, new SetTree$00601(2, \"SetOne\", x$$25));\n}\nexport function remove(x$$26, s$$36) {\n  return FSharpSet$$Remove$$2B595(s$$36, x$$26);\n}\nexport function union(s1$$2, s2$$2) {\n  return FSharpSet$$$op_Addition(s1$$2, s2$$2);\n}\nexport function unionMany(sets$$1, comparer$$25) {\n  return fold$$1(FSharpSet$$$op_Addition, FSharpSet$$$$002Ector$$2528C5CB(comparer$$25, new SetTree$00601(0, \"SetEmpty\")), sets$$1);\n}\nexport function intersect(s1$$3, s2$$3) {\n  return FSharpSet$$$Intersection$$Z3BE9BFE0(s1$$3, s2$$3);\n}\nexport function intersectMany(sets$$2) {\n  return FSharpSet$$$IntersectionMany$$Z15B59630(sets$$2);\n}\nexport function iterate(f$$16, s$$37) {\n  FSharpSet$$Iterate$$5028453F(s$$37, f$$16);\n}\nexport function empty(comparer$$26) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$26, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function forAll(f$$17, s$$38) {\n  return FSharpSet$$ForAll$$Z1D55A0D7(s$$38, f$$17);\n}\nexport function exists(f$$18, s$$39) {\n  return FSharpSet$$Exists$$Z1D55A0D7(s$$39, f$$18);\n}\nexport function filter(f$$19, s$$40) {\n  return FSharpSet$$Filter$$Z1D55A0D7(s$$40, f$$19);\n}\nexport function partition(f$$20, s$$41) {\n  return FSharpSet$$Partition$$Z1D55A0D7(s$$41, f$$20);\n}\nexport function fold(f$$21, z$$2, s$$42) {\n  return SetTreeModule$$$fold(f$$21, z$$2, FSharpSet$$get_Tree(s$$42));\n}\nexport function foldBack(f$$22, s$$43, z$$3) {\n  return SetTreeModule$$$foldBack(f$$22, FSharpSet$$get_Tree(s$$43), z$$3);\n}\nexport function map(f$$23, s$$44, comparer$$27) {\n  return FSharpSet$$Map$$38806891(s$$44, f$$23, comparer$$27);\n}\nexport function count(s$$45) {\n  return FSharpSet$$get_Count(s$$45);\n}\nexport function minimumElement(s$$46) {\n  return FSharpSet$$get_MinimumElement(s$$46);\n}\nexport function maximumElement(s$$47) {\n  return FSharpSet$$get_MaximumElement(s$$47);\n}\nexport function ofList(li, comparer$$28) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$28, SetTreeModule$$$ofSeq(comparer$$28, li));\n}\nexport function ofArray(arr$$2, comparer$$29) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$29, SetTreeModule$$$ofArray(comparer$$29, arr$$2));\n}\nexport function toList(s$$48) {\n  return SetTreeModule$$$toList(FSharpSet$$get_Tree(s$$48));\n}\nexport function toArray(s$$49, cons) {\n  const n$$3 = count(s$$49) | 0;\n  const res$$1 = new cons(n$$3);\n  SetTreeModule$$$copyToArray(FSharpSet$$get_Tree(s$$49), res$$1, 0);\n  return res$$1;\n}\nexport function toSeq(s$$50) {\n  return SetTreeModule$$$toSeq(FSharpSet$$get_Tree(s$$50));\n}\nexport function ofSeq(elements, comparer$$30) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$30, SetTreeModule$$$ofSeq(comparer$$30, elements));\n}\nexport function difference(x$$28, y$$6) {\n  return FSharpSet$$$op_Subtraction(x$$28, y$$6);\n}\nexport function isSubset(x$$29, y$$7) {\n  return FSharpSet$$IsSubsetOf$$6A20B1FF(x$$29, y$$7);\n}\nexport function isSuperset(x$$30, y$$8) {\n  return FSharpSet$$IsSupersetOf$$6A20B1FF(x$$30, y$$8);\n}\nexport function isProperSubset(x$$31, y$$9) {\n  return FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$31, y$$9);\n}\nexport function isProperSuperset(x$$32, y$$10) {\n  return FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$32, y$$10);\n}\nexport function minElement(s$$51) {\n  return FSharpSet$$get_MinimumElement(s$$51);\n}\nexport function maxElement(s$$52) {\n  return FSharpSet$$get_MaximumElement(s$$52);\n}\n\nfunction createMutablePrivate(comparer$$31, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return SetTreeModule$$$count(tree$$1);\n    },\n\n    add(x$$33) {\n      const this$$$4 = this;\n      tree$$1 = SetTreeModule$$$add(comparer$$31, x$$33, tree$$1);\n      return this$$$4;\n    },\n\n    add_(x$$34) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$34, tree$$1)) {\n        return false;\n      } else {\n        tree$$1 = SetTreeModule$$$add(comparer$$31, x$$34, tree$$1);\n        return true;\n      }\n    },\n\n    clear() {\n      tree$$1 = new SetTree$00601(0, \"SetEmpty\");\n    },\n\n    delete(x$$35) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$35, tree$$1)) {\n        tree$$1 = SetTreeModule$$$remove(comparer$$31, x$$35, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    has(x$$36) {\n      return SetTreeModule$$$mem(comparer$$31, x$$36, tree$$1);\n    },\n\n    values() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(SetTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return SetTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source, comparer$$32) {\n  return createMutablePrivate(comparer$$32, SetTreeModule$$$ofSeq(comparer$$32, source));\n}\nexport function distinct(xs, comparer$$33) {\n  return createMutable(xs, comparer$$33);\n}\nexport function distinctBy(projection, xs$$1, comparer$$34) {\n  const li$$1 = [];\n  const hashSet = createMutable(empty$$1(), comparer$$34);\n  iterate$$1(function (x$$37) {\n    if (hashSet.add_(projection(x$$37))) {\n      li$$1.push(x$$37);\n    }\n  }, xs$$1);\n  return li$$1;\n}\nexport function unionWith(s1$$4, s2$$4) {\n  return fold$$1(function folder(acc$$14, x$$38) {\n    return acc$$14.add(x$$38);\n  }, s1$$4, s2$$4);\n}\nexport function intersectWith(s1$$5, s2$$5, comparer$$35) {\n  const s2$$6 = ofSeq(s2$$5, comparer$$35);\n  iterate$$1(function (x$$39) {\n    if (!FSharpSet$$Contains$$2B595(s2$$6, x$$39)) {\n      s1$$5.delete(x$$39), null;\n    }\n  }, s1$$5);\n}\nexport function exceptWith(s1$$6, s2$$7) {\n  iterate$$1(function (x$$40) {\n    s1$$6.delete(x$$40), null;\n  }, s2$$7);\n}\nexport function isSubsetOf(s1$$7, s2$$8, comparer$$36) {\n  return isSubset(ofSeq(s1$$7, comparer$$36), ofSeq(s2$$8, comparer$$36));\n}\nexport function isSupersetOf(s1$$8, s2$$9, comparer$$37) {\n  return isSuperset(ofSeq(s1$$8, comparer$$37), ofSeq(s2$$9, comparer$$37));\n}\nexport function isProperSubsetOf(s1$$9, s2$$10, comparer$$38) {\n  return isProperSubset(ofSeq(s1$$9, comparer$$38), ofSeq(s2$$10, comparer$$38));\n}\nexport function isProperSupersetOf(s1$$10, s2$$11, comparer$$39) {\n  return isProperSuperset(ofSeq(s1$$10, comparer$$39), ofSeq(s2$$11, comparer$$39));\n}","import { defaultArg, value as value$$10, some } from \"./Option.js\";\nimport { compare, getItemFromDict, addToDict, addToSet, tryGetValue, comparerFromEqualityComparer, max as max$$1, comparePrimitives } from \"./Util.js\";\nimport { createMutable } from \"./Map.js\";\nimport { iterateIndexed as iterateIndexed$$1, iterate as iterate$$1 } from \"./Seq.js\";\nimport { createMutable as createMutable$$1 } from \"./Set.js\";\nimport { List } from \"./Types.js\";\n\nfunction indexNotFound() {\n  throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\n\nexport function append(array1, array2, cons) {\n  if (ArrayBuffer.isView(array1)) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new cons(len1 + len2);\n\n    for (let i = 0; i <= len1 - 1; i++) {\n      newArray[i] = array1[i];\n    }\n\n    for (let i$$1 = 0; i$$1 <= len2 - 1; i$$1++) {\n      newArray[i$$1 + len1] = array2[i$$1];\n    }\n\n    return newArray;\n  } else {\n    return array1.concat(array2);\n  }\n}\nexport function filter(predicate, array) {\n  return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n  target.fill(value, targetIndex, targetIndex + count);\n  return target;\n}\nexport function getSubArray(array$$3, start$$1, count$$2) {\n  return array$$3.slice(start$$1, start$$1 + count$$2);\n}\nexport function last(array$$5) {\n  if (array$$5.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  return array$$5[array$$5.length - 1];\n}\nexport function tryLast(array$$6) {\n  if (array$$6.length === 0) {\n    return null;\n  } else {\n    return some(array$$6[array$$6.length - 1]);\n  }\n}\nexport function mapIndexed(f, source, cons$$1) {\n  if (ArrayBuffer.isView(source)) {\n    const len = source.length | 0;\n    const target$$1 = new cons$$1(len);\n\n    for (let i$$2 = 0; i$$2 <= len - 1; i$$2++) {\n      target$$1[i$$2] = f(i$$2, source[i$$2]);\n    }\n\n    return target$$1;\n  } else {\n    return source.map(function (delegateArg0, delegateArg1) {\n      return f(delegateArg1, delegateArg0);\n    });\n  }\n}\nexport function map(f$$1, source$$1, cons$$2) {\n  if (ArrayBuffer.isView(source$$1)) {\n    const len$$1 = source$$1.length | 0;\n    const target$$2 = new cons$$2(len$$1);\n\n    for (let i$$4 = 0; i$$4 <= len$$1 - 1; i$$4++) {\n      target$$2[i$$4] = f$$1(source$$1[i$$4]);\n    }\n\n    return target$$2;\n  } else {\n    return source$$1.map(function (x$$1) {\n      return f$$1(x$$1);\n    });\n  }\n}\nexport function mapIndexed2(f$$2, source1, source2, cons$$3) {\n  if (source1.length !== source2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result = new cons$$3(source1.length);\n\n  for (let i$$5 = 0; i$$5 <= source1.length - 1; i$$5++) {\n    result[i$$5] = f$$2(i$$5, source1[i$$5], source2[i$$5]);\n  }\n\n  return result;\n}\nexport function map2(f$$3, source1$$1, source2$$1, cons$$4) {\n  if (source1$$1.length !== source2$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$1 = new cons$$4(source1$$1.length);\n\n  for (let i$$6 = 0; i$$6 <= source1$$1.length - 1; i$$6++) {\n    result$$1[i$$6] = f$$3(source1$$1[i$$6], source2$$1[i$$6]);\n  }\n\n  return result$$1;\n}\nexport function mapIndexed3(f$$4, source1$$2, source2$$2, source3, cons$$5) {\n  if (source1$$2.length !== source2$$2.length ? true : source2$$2.length !== source3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$2 = new cons$$5(source1$$2.length);\n\n  for (let i$$7 = 0; i$$7 <= source1$$2.length - 1; i$$7++) {\n    result$$2[i$$7] = f$$4(i$$7, source1$$2[i$$7], source2$$2[i$$7], source3[i$$7]);\n  }\n\n  return result$$2;\n}\nexport function map3(f$$5, source1$$3, source2$$3, source3$$1, cons$$6) {\n  if (source1$$3.length !== source2$$3.length ? true : source2$$3.length !== source3$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$3 = new cons$$6(source1$$3.length);\n\n  for (let i$$8 = 0; i$$8 <= source1$$3.length - 1; i$$8++) {\n    result$$3[i$$8] = f$$5(source1$$3[i$$8], source2$$3[i$$8], source3$$1[i$$8]);\n  }\n\n  return result$$3;\n}\nexport function mapFold(mapping$$2, state, array$$9, cons$$7) {\n  const matchValue = array$$9.length | 0;\n\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    const len$$2 = matchValue | 0;\n    let acc = state;\n    const res = new cons$$7(len$$2);\n\n    for (let i$$9 = 0; i$$9 <= array$$9.length - 1; i$$9++) {\n      const patternInput = mapping$$2(acc, array$$9[i$$9]);\n      res[i$$9] = patternInput[0];\n      acc = patternInput[1];\n    }\n\n    return [res, acc];\n  }\n}\nexport function mapFoldBack(mapping$$3, array$$10, state$$1, cons$$8) {\n  const matchValue$$1 = array$$10.length | 0;\n\n  if (matchValue$$1 === 0) {\n    return [[], state$$1];\n  } else {\n    const len$$3 = matchValue$$1 | 0;\n    let acc$$1 = state$$1;\n    const res$$1 = new cons$$8(len$$3);\n\n    for (let i$$10 = array$$10.length - 1; i$$10 >= 0; i$$10--) {\n      const patternInput$$1 = mapping$$3(array$$10[i$$10], acc$$1);\n      res$$1[i$$10] = patternInput$$1[0];\n      acc$$1 = patternInput$$1[1];\n    }\n\n    return [res$$1, acc$$1];\n  }\n}\nexport function indexed(source$$2) {\n  const len$$4 = source$$2.length | 0;\n  const target$$3 = new Array(len$$4);\n\n  for (let i$$11 = 0; i$$11 <= len$$4 - 1; i$$11++) {\n    target$$3[i$$11] = [i$$11, source$$2[i$$11]];\n  }\n\n  return target$$3;\n}\nexport function truncate(count$$4, array$$11) {\n  const count$$5 = max$$1(comparePrimitives, 0, count$$4) | 0;\n  return array$$11.slice(0, 0 + count$$5);\n}\nexport function concat(arrays, cons$$9) {\n  const arrays$$1 = Array.from(arrays);\n  const matchValue$$2 = arrays$$1.length | 0;\n\n  switch (matchValue$$2) {\n    case 0:\n      {\n        return new cons$$9(0);\n      }\n\n    case 1:\n      {\n        return arrays$$1[0];\n      }\n\n    default:\n      {\n        if (ArrayBuffer.isView(arrays$$1[0])) {\n          let totalIdx = 0;\n          let totalLength = 0;\n\n          for (let idx = 0; idx <= arrays$$1.length - 1; idx++) {\n            const arr$$4 = arrays$$1[idx];\n            totalLength = totalLength + arr$$4.length;\n          }\n\n          const result$$4 = new cons$$9(totalLength);\n\n          for (let idx$$1 = 0; idx$$1 <= arrays$$1.length - 1; idx$$1++) {\n            const arr$$5 = arrays$$1[idx$$1];\n\n            for (let j = 0; j <= arr$$5.length - 1; j++) {\n              result$$4[totalIdx] = arr$$5[j];\n              totalIdx = totalIdx + 1;\n            }\n          }\n\n          return result$$4;\n        } else {\n          return arrays$$1[0].concat(...arrays$$1.slice(1));\n        }\n      }\n  }\n}\nexport function collect(mapping$$4, array$$14, cons$$10) {\n  const mapped = map(mapping$$4, array$$14, Array);\n  return concat(mapped, cons$$10);\n}\nexport function countBy(projection, array$$15, eq) {\n  const dict = createMutable([], comparerFromEqualityComparer(eq));\n\n  for (let idx$$2 = 0; idx$$2 <= array$$15.length - 1; idx$$2++) {\n    const value$$2 = array$$15[idx$$2];\n    const key = projection(value$$2);\n    const matchValue$$3 = tryGetValue(dict, key, 0);\n\n    if (matchValue$$3[0]) {\n      dict.set(key, matchValue$$3[1] + 1);\n    } else {\n      dict.set(key, 1);\n    }\n  }\n\n  const res$$2 = new Array(dict.size);\n  let i$$12 = 0;\n  iterate$$1(function (group) {\n    res$$2[i$$12] = [group[0], group[1]];\n    i$$12 = i$$12 + 1;\n  }, dict);\n  return res$$2;\n}\nexport function distinctBy(projection$$1, array$$16, eq$$1) {\n  const hashSet = createMutable$$1([], comparerFromEqualityComparer(eq$$1));\n  return filter(function predicate$$2($arg$$3) {\n    return addToSet(projection$$1($arg$$3), hashSet);\n  }, array$$16);\n}\nexport function distinct(array$$18, eq$$2) {\n  return distinctBy(function (x$$2) {\n    return x$$2;\n  }, array$$18, eq$$2);\n}\nexport function where(predicate$$3, array$$19) {\n  return array$$19.filter(predicate$$3);\n}\nexport function contains(value$$3, array$$21, eq$$3) {\n  const loop = function loop(i$$13) {\n    loop: while (true) {\n      if (i$$13 >= array$$21.length) {\n        return false;\n      } else if (eq$$3.Equals(value$$3, array$$21[i$$13])) {\n        return true;\n      } else {\n        const $i$$13$$51 = i$$13;\n        i$$13 = $i$$13$$51 + 1;\n        continue loop;\n      }\n\n      break;\n    }\n  };\n\n  return loop(0);\n}\nexport function except(itemsToExclude, array$$22, eq$$4) {\n  if (array$$22.length === 0) {\n    return array$$22;\n  } else {\n    const cached = createMutable$$1(itemsToExclude, comparerFromEqualityComparer(eq$$4));\n    return array$$22.filter(function predicate$$5(arg00$$1) {\n      return addToSet(arg00$$1, cached);\n    });\n  }\n}\nexport function groupBy(projection$$2, array$$25, cons$$11, eq$$5) {\n  const dict$$1 = createMutable([], comparerFromEqualityComparer(eq$$5));\n  const keys = [];\n\n  for (let idx$$3 = 0; idx$$3 <= array$$25.length - 1; idx$$3++) {\n    const v = array$$25[idx$$3];\n    const key$$1 = projection$$2(v);\n    const matchValue$$4 = tryGetValue(dict$$1, key$$1, null);\n\n    if (matchValue$$4[0]) {\n      dict$$1.set(key$$1, new List(v, matchValue$$4[1]));\n    } else {\n      addToDict(dict$$1, key$$1, new List(v, new List()));\n      keys.push(key$$1);\n    }\n  }\n\n  const result$$5 = new Array(keys.length);\n  iterateIndexed$$1(function action(i$$14, key$$2) {\n    result$$5[i$$14] = [key$$2, cons$$11.from(getItemFromDict(dict$$1, key$$2)).reverse()];\n  }, keys);\n  return result$$5;\n}\nexport function empty(cons$$12) {\n  return new cons$$12(0);\n}\nexport function singleton(value$$4, cons$$14) {\n  const ar = new cons$$14(1);\n  ar[0] = value$$4;\n  return ar;\n}\nexport function initialize(count$$8, initializer, cons$$15) {\n  if (count$$8 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$6 = new cons$$15(count$$8);\n\n  for (let i$$15 = 0; i$$15 <= count$$8 - 1; i$$15++) {\n    result$$6[i$$15] = initializer(i$$15);\n  }\n\n  return result$$6;\n}\nexport function pairwise(array$$28) {\n  if (array$$28.length < 2) {\n    return [];\n  } else {\n    const count$$9 = array$$28.length - 1 | 0;\n    const result$$7 = new Array(count$$9);\n\n    for (let i$$16 = 0; i$$16 <= count$$9 - 1; i$$16++) {\n      result$$7[i$$16] = [array$$28[i$$16], array$$28[i$$16 + 1]];\n    }\n\n    return result$$7;\n  }\n}\nexport function replicate(count$$10, initial, cons$$16) {\n  if (count$$10 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$8 = new cons$$16(count$$10);\n\n  for (let i$$17 = 0; i$$17 <= result$$8.length - 1; i$$17++) {\n    result$$8[i$$17] = initial;\n  }\n\n  return result$$8;\n}\nexport function copy(array$$29, cons$$17) {\n  return array$$29.slice();\n}\nexport function reverse(array$$31, cons$$18) {\n  return array$$31.slice().reverse();\n}\nexport function scan(folder, state$$2, array$$35, cons$$19) {\n  const res$$3 = new cons$$19(array$$35.length + 1);\n  res$$3[0] = state$$2;\n\n  for (let i$$18 = 0; i$$18 <= array$$35.length - 1; i$$18++) {\n    res$$3[i$$18 + 1] = folder(res$$3[i$$18], array$$35[i$$18]);\n  }\n\n  return res$$3;\n}\nexport function scanBack(folder$$1, array$$36, state$$3, cons$$20) {\n  const res$$4 = new cons$$20(array$$36.length + 1);\n  res$$4[array$$36.length] = state$$3;\n\n  for (let i$$19 = array$$36.length - 1; i$$19 >= 0; i$$19--) {\n    res$$4[i$$19] = folder$$1(array$$36[i$$19], res$$4[i$$19 + 1]);\n  }\n\n  return res$$4;\n}\nexport function skip(count$$11, array$$37, cons$$21) {\n  if (count$$11 > array$$37.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$11 === array$$37.length) {\n    return new cons$$21(0);\n  } else {\n    const count$$12 = (count$$11 < 0 ? 0 : count$$11) | 0;\n    return array$$37.slice(count$$12);\n  }\n}\nexport function skipWhile(predicate$$7, array$$39, cons$$23) {\n  let count$$14 = 0;\n\n  while (count$$14 < array$$39.length ? predicate$$7(array$$39[count$$14]) : false) {\n    count$$14 = count$$14 + 1;\n  }\n\n  if (count$$14 === array$$39.length) {\n    return new cons$$23(0);\n  } else {\n    return array$$39.slice(count$$14);\n  }\n}\nexport function take(count$$16, array$$41, cons$$25) {\n  if (count$$16 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  if (count$$16 > array$$41.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$16 === 0) {\n    return new cons$$25(0);\n  } else {\n    return array$$41.slice(0, 0 + count$$16);\n  }\n}\nexport function takeWhile(predicate$$8, array$$43, cons$$27) {\n  let count$$18 = 0;\n\n  while (count$$18 < array$$43.length ? predicate$$8(array$$43[count$$18]) : false) {\n    count$$18 = count$$18 + 1;\n  }\n\n  if (count$$18 === 0) {\n    return new cons$$27(0);\n  } else {\n    return array$$43.slice(0, 0 + count$$18);\n  }\n}\nexport function addRangeInPlace(range, array$$45) {\n  iterate$$1(function (x$$3) {\n    array$$45.push(x$$3), null;\n  }, range);\n}\nexport function removeInPlace(item$$2, array$$47) {\n  const i$$20 = array$$47.indexOf(item$$2);\n\n  if (i$$20 > -1) {\n    array$$47.splice(i$$20, 1), null;\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function removeAllInPlace(predicate$$9, array$$50) {\n  const countRemoveAll = function countRemoveAll(count$$20) {\n    const i$$21 = array$$50.findIndex(predicate$$9);\n\n    if (i$$21 > -1) {\n      array$$50.splice(i$$21, 1), null;\n      return countRemoveAll(count$$20) + 1 | 0;\n    } else {\n      return count$$20 | 0;\n    }\n  };\n\n  return countRemoveAll(0) | 0;\n}\nexport function copyTo(source$$4, sourceIndex, target$$4, targetIndex$$1, count$$21) {\n  const diff = targetIndex$$1 - sourceIndex | 0;\n\n  for (let i$$22 = sourceIndex; i$$22 <= sourceIndex + count$$21 - 1; i$$22++) {\n    target$$4[i$$22 + diff] = source$$4[i$$22];\n  }\n}\nexport function partition(f$$6, source$$5, cons$$29) {\n  const len$$9 = source$$5.length | 0;\n  const res1 = new cons$$29(len$$9);\n  const res2 = new cons$$29(len$$9);\n  let iTrue = 0;\n  let iFalse = 0;\n\n  for (let i$$23 = 0; i$$23 <= len$$9 - 1; i$$23++) {\n    if (f$$6(source$$5[i$$23])) {\n      res1[iTrue] = source$$5[i$$23];\n      iTrue = iTrue + 1;\n    } else {\n      res2[iFalse] = source$$5[i$$23];\n      iFalse = iFalse + 1;\n    }\n  }\n\n  return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\nexport function find(predicate$$11, array$$55) {\n  const matchValue$$5 = array$$55.find(predicate$$11);\n\n  if (matchValue$$5 == null) {\n    return indexNotFound();\n  } else {\n    const res$$5 = value$$10(matchValue$$5);\n    return res$$5;\n  }\n}\nexport function tryFind(predicate$$13, array$$57) {\n  return array$$57.find(predicate$$13);\n}\nexport function findIndex(predicate$$15, array$$59) {\n  var index;\n  const matchValue$$6 = array$$59.findIndex(predicate$$15);\n\n  if (index = matchValue$$6 | 0, index > -1) {\n    const index$$1 = matchValue$$6 | 0;\n    return index$$1 | 0;\n  } else {\n    return indexNotFound() | 0;\n  }\n}\nexport function tryFindIndex(predicate$$17, array$$61) {\n  var index$$2;\n  const matchValue$$7 = array$$61.findIndex(predicate$$17);\n\n  if (index$$2 = matchValue$$7 | 0, index$$2 > -1) {\n    const index$$3 = matchValue$$7 | 0;\n    return index$$3;\n  } else {\n    return null;\n  }\n}\nexport function pick(chooser, array$$63) {\n  const loop$$1 = function loop$$1(i$$24) {\n    loop$$1: while (true) {\n      if (i$$24 >= array$$63.length) {\n        return indexNotFound();\n      } else {\n        const matchValue$$8 = chooser(array$$63[i$$24]);\n\n        if (matchValue$$8 != null) {\n          const res$$6 = value$$10(matchValue$$8);\n          return res$$6;\n        } else {\n          const $i$$24$$88 = i$$24;\n          i$$24 = $i$$24$$88 + 1;\n          continue loop$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(0);\n}\nexport function tryPick(chooser$$1, array$$64) {\n  const loop$$2 = function loop$$2(i$$25) {\n    loop$$2: while (true) {\n      if (i$$25 >= array$$64.length) {\n        return null;\n      } else {\n        const matchValue$$9 = chooser$$1(array$$64[i$$25]);\n\n        if (matchValue$$9 == null) {\n          const $i$$25$$91 = i$$25;\n          i$$25 = $i$$25$$91 + 1;\n          continue loop$$2;\n        } else {\n          const res$$7 = matchValue$$9;\n          return res$$7;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$2(0);\n}\nexport function findBack(predicate$$19, array$$65) {\n  const loop$$3 = function loop$$3(i$$26) {\n    loop$$3: while (true) {\n      if (i$$26 < 0) {\n        return indexNotFound();\n      } else if (predicate$$19(array$$65[i$$26])) {\n        return array$$65[i$$26];\n      } else {\n        const $i$$26$$94 = i$$26;\n        i$$26 = $i$$26$$94 - 1;\n        continue loop$$3;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$3(array$$65.length - 1);\n}\nexport function tryFindBack(predicate$$20, array$$66) {\n  const loop$$4 = function loop$$4(i$$27) {\n    loop$$4: while (true) {\n      if (i$$27 < 0) {\n        return null;\n      } else if (predicate$$20(array$$66[i$$27])) {\n        return some(array$$66[i$$27]);\n      } else {\n        const $i$$27$$97 = i$$27;\n        i$$27 = $i$$27$$97 - 1;\n        continue loop$$4;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$4(array$$66.length - 1);\n}\nexport function findLastIndex(predicate$$21, array$$67) {\n  const loop$$5 = function loop$$5(i$$28) {\n    loop$$5: while (true) {\n      if (i$$28 < 0) {\n        return -1 | 0;\n      } else if (predicate$$21(array$$67[i$$28])) {\n        return i$$28 | 0;\n      } else {\n        const $i$$28$$100 = i$$28;\n        i$$28 = $i$$28$$100 - 1;\n        continue loop$$5;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$5(array$$67.length - 1) | 0;\n}\nexport function findIndexBack(predicate$$22, array$$68) {\n  const loop$$6 = function loop$$6(i$$29) {\n    loop$$6: while (true) {\n      if (i$$29 < 0) {\n        return indexNotFound() | 0;\n      } else if (predicate$$22(array$$68[i$$29])) {\n        return i$$29 | 0;\n      } else {\n        const $i$$29$$103 = i$$29;\n        i$$29 = $i$$29$$103 - 1;\n        continue loop$$6;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$6(array$$68.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate$$23, array$$69) {\n  const loop$$7 = function loop$$7(i$$30) {\n    loop$$7: while (true) {\n      if (i$$30 < 0) {\n        return null;\n      } else if (predicate$$23(array$$69[i$$30])) {\n        return i$$30;\n      } else {\n        const $i$$30$$106 = i$$30;\n        i$$30 = $i$$30$$106 - 1;\n        continue loop$$7;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$7(array$$69.length - 1);\n}\nexport function choose(chooser$$2, array$$70, cons$$30) {\n  const f$$7 = function f$$7(x$$4) {\n    return chooser$$2(x$$4) != null;\n  };\n\n  const g = function g(x$$5) {\n    return value$$10(chooser$$2(x$$5));\n  };\n\n  const arr$$6 = array$$70.filter(f$$7);\n  return map(g, arr$$6, cons$$30);\n}\nexport function foldIndexed(folder$$2, state$$4, array$$72) {\n  return array$$72.reduce(function (delegateArg0$$1, delegateArg1$$1, delegateArg2) {\n    return folder$$2(delegateArg2, delegateArg0$$1, delegateArg1$$1);\n  }, state$$4);\n}\nexport function fold(folder$$4, state$$6, array$$74) {\n  return array$$74.reduce(folder$$4, state$$6);\n}\nexport function iterate(action$$1, array$$76) {\n  for (let i$$32 = 0; i$$32 <= array$$76.length - 1; i$$32++) {\n    action$$1(array$$76[i$$32]);\n  }\n}\nexport function iterateIndexed(action$$2, array$$77) {\n  for (let i$$33 = 0; i$$33 <= array$$77.length - 1; i$$33++) {\n    action$$2(i$$33, array$$77[i$$33]);\n  }\n}\nexport function iterate2(action$$3, array1$$2, array2$$2) {\n  if (array1$$2.length !== array2$$2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$34 = 0; i$$34 <= array1$$2.length - 1; i$$34++) {\n    action$$3(array1$$2[i$$34], array2$$2[i$$34]);\n  }\n}\nexport function iterateIndexed2(action$$4, array1$$3, array2$$3) {\n  if (array1$$3.length !== array2$$3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$35 = 0; i$$35 <= array1$$3.length - 1; i$$35++) {\n    action$$4(i$$35, array1$$3[i$$35], array2$$3[i$$35]);\n  }\n}\nexport function isEmpty(array$$78) {\n  return array$$78.length === 0;\n}\nexport function forAll(predicate$$25, array$$79) {\n  return array$$79.every(predicate$$25);\n}\nexport function permute(f$$8, array$$81) {\n  const size = array$$81.length | 0;\n  const res$$8 = new array$$81.constructor(array$$81.length);\n  const checkFlags = new Array(size);\n  iterateIndexed(function (i$$36, x$$8) {\n    const j$$1 = f$$8(i$$36) | 0;\n\n    if (j$$1 < 0 ? true : j$$1 >= size) {\n      throw new Error(\"Not a valid permutation\");\n    }\n\n    res$$8[j$$1] = x$$8;\n    checkFlags[j$$1] = 1;\n  }, array$$81);\n  const isValid = forAll(function (y) {\n    return 1 === y;\n  }, checkFlags);\n\n  if (!isValid) {\n    throw new Error(\"Not a valid permutation\");\n  }\n\n  return res$$8;\n}\nexport function setSlice(target$$5, lower, upper, source$$6) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const upper$$1 = defaultArg(upper, 0) | 0;\n  const length = (upper$$1 > 0 ? upper$$1 : target$$5.length - 1) - lower$$1 | 0;\n\n  if (ArrayBuffer.isView(target$$5) ? source$$6.length <= length : false) {\n    return target$$5.set(source$$6, lower$$1);\n  } else {\n    for (let i$$37 = 0; i$$37 <= length; i$$37++) {\n      target$$5[i$$37 + lower$$1] = source$$6[i$$37];\n    }\n  }\n}\nexport function sortInPlaceBy(projection$$3, xs, comparer) {\n  xs.sort(function (x$$10, y$$1) {\n    return comparer.Compare(projection$$3(x$$10), projection$$3(y$$1));\n  });\n}\nexport function sortInPlace(xs$$1, comparer$$1) {\n  xs$$1.sort(function (x$$11, y$$2) {\n    return comparer$$1.Compare(x$$11, y$$2);\n  });\n}\n\nfunction copyArray(array$$82) {\n  const result$$9 = new array$$82.constructor(array$$82.length);\n\n  for (let i$$38 = 0; i$$38 <= array$$82.length - 1; i$$38++) {\n    result$$9[i$$38] = array$$82[i$$38];\n  }\n\n  return result$$9;\n}\n\nexport function sort(xs$$2, comparer$$2) {\n  const xs$$3 = copyArray(xs$$2);\n  xs$$3.sort(function (x$$12, y$$3) {\n    return comparer$$2.Compare(x$$12, y$$3);\n  });\n  return xs$$3;\n}\nexport function sortBy(projection$$4, xs$$4, comparer$$4) {\n  const xs$$5 = copyArray(xs$$4);\n  xs$$5.sort(function (x$$13, y$$4) {\n    return comparer$$4.Compare(projection$$4(x$$13), projection$$4(y$$4));\n  });\n  return xs$$5;\n}\nexport function sortDescending(xs$$6, comparer$$6) {\n  const xs$$7 = copyArray(xs$$6);\n  xs$$7.sort(function (x$$14, y$$5) {\n    return comparer$$6.Compare(x$$14, y$$5) * -1;\n  });\n  return xs$$7;\n}\nexport function sortByDescending(projection$$5, xs$$8, comparer$$8) {\n  const xs$$9 = copyArray(xs$$8);\n  xs$$9.sort(function (x$$15, y$$6) {\n    return comparer$$8.Compare(projection$$5(x$$15), projection$$5(y$$6)) * -1;\n  });\n  return xs$$9;\n}\nexport function sortWith(comparer$$10, xs$$10) {\n  const xs$$11 = copyArray(xs$$10);\n  xs$$11.sort(comparer$$10);\n  return xs$$11;\n}\nexport function unfold(generator, state$$8) {\n  const res$$9 = [];\n\n  const loop$$8 = function loop$$8(state$$9) {\n    loop$$8: while (true) {\n      const matchValue$$10 = generator(state$$9);\n\n      if (matchValue$$10 != null) {\n        const x$$16 = matchValue$$10[0];\n        const s$0027$$2 = matchValue$$10[1];\n        res$$9.push(x$$16), null;\n        state$$9 = s$0027$$2;\n        continue loop$$8;\n      }\n\n      break;\n    }\n  };\n\n  loop$$8(state$$8);\n  return res$$9;\n}\nexport function unzip(array$$84) {\n  const len$$11 = array$$84.length | 0;\n  const res1$$1 = new Array(len$$11);\n  const res2$$1 = new Array(len$$11);\n  iterateIndexed(function (i$$39, tupledArg) {\n    res1$$1[i$$39] = tupledArg[0];\n    res2$$1[i$$39] = tupledArg[1];\n  }, array$$84);\n  return [res1$$1, res2$$1];\n}\nexport function unzip3(array$$85) {\n  const len$$14 = array$$85.length | 0;\n  const res1$$2 = new Array(len$$14);\n  const res2$$2 = new Array(len$$14);\n  const res3 = new Array(len$$14);\n  iterateIndexed(function (i$$40, tupledArg$$1) {\n    res1$$2[i$$40] = tupledArg$$1[0];\n    res2$$2[i$$40] = tupledArg$$1[1];\n    res3[i$$40] = tupledArg$$1[2];\n  }, array$$85);\n  return [res1$$2, res2$$2, res3];\n}\nexport function zip(array1$$4, array2$$4) {\n  if (array1$$4.length !== array2$$4.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$10 = new Array(array1$$4.length);\n\n  for (let i$$41 = 0; i$$41 <= array1$$4.length - 1; i$$41++) {\n    result$$10[i$$41] = [array1$$4[i$$41], array2$$4[i$$41]];\n  }\n\n  return result$$10;\n}\nexport function zip3(array1$$5, array2$$5, array3) {\n  if (array1$$5.length !== array2$$5.length ? true : array2$$5.length !== array3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$11 = new Array(array1$$5.length);\n\n  for (let i$$42 = 0; i$$42 <= array1$$5.length - 1; i$$42++) {\n    result$$11[i$$42] = [array1$$5[i$$42], array2$$5[i$$42], array3[i$$42]];\n  }\n\n  return result$$11;\n}\nexport function chunkBySize(chunkSize, array$$86) {\n  if (chunkSize < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n  }\n\n  if (array$$86.length === 0) {\n    return [[]];\n  } else {\n    const result$$12 = [];\n\n    for (let x$$17 = 0; x$$17 <= ~~Math.ceil(array$$86.length / chunkSize) - 1; x$$17++) {\n      const start$$8 = x$$17 * chunkSize | 0;\n      const slice = array$$86.slice(start$$8, start$$8 + chunkSize);\n      result$$12.push(slice), null;\n    }\n\n    return result$$12;\n  }\n}\nexport function splitAt(index$$4, array$$89) {\n  if (index$$4 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: index\");\n  }\n\n  if (index$$4 > array$$89.length) {\n    throw new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\");\n  }\n\n  return [array$$89.slice(0, 0 + index$$4), array$$89.slice(index$$4)];\n}\nexport function compareWith(comparer$$12, array1$$6, array2$$6) {\n  if (array1$$6 == null) {\n    if (array2$$6 == null) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (array2$$6 == null) {\n    return 1;\n  } else {\n    let i$$43 = 0;\n    let result$$13 = 0;\n    const length1 = array1$$6.length | 0;\n    const length2 = array2$$6.length | 0;\n\n    if (length1 > length2) {\n      return 1;\n    } else if (length1 < length2) {\n      return -1 | 0;\n    } else {\n      while (i$$43 < length1 ? result$$13 === 0 : false) {\n        result$$13 = comparer$$12(array1$$6[i$$43], array2$$6[i$$43]);\n        i$$43 = i$$43 + 1;\n      }\n\n      return result$$13 | 0;\n    }\n  }\n}\nexport function equalsWith(comparer$$13, array1$$7, array2$$7) {\n  return compareWith(compare, array1$$7, array2$$7) === 0;\n}\nexport function exactlyOne(array$$92) {\n  if (array$$92.length === 1) {\n    return array$$92[0];\n  } else if (array$$92.length === 0) {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n  } else {\n    throw new Error(\"Input array too long\\\\nParameter name: array\");\n  }\n}\nexport function head(array$$93) {\n  if (array$$93.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  } else {\n    return array$$93[0];\n  }\n}\nexport function tryHead(array$$94) {\n  if (array$$94.length === 0) {\n    return null;\n  } else {\n    return some(array$$94[0]);\n  }\n}\nexport function tail(array$$95) {\n  if (array$$95.length === 0) {\n    throw new Error(\"Not enough elements\\\\nParameter name: array\");\n  }\n\n  return array$$95.slice(1);\n}\nexport function item(index$$5, array$$97) {\n  return array$$97[index$$5];\n}\nexport function tryItem(index$$6, array$$98) {\n  if (index$$6 < 0 ? true : index$$6 >= array$$98.length) {\n    return null;\n  } else {\n    return some(array$$98[index$$6]);\n  }\n}\nexport function foldBackIndexed(folder$$6, array$$99, state$$10) {\n  return array$$99.reduceRight(function (delegateArg0$$3, delegateArg1$$3, delegateArg2$$1) {\n    return folder$$6(delegateArg2$$1, delegateArg1$$3, delegateArg0$$3);\n  }, state$$10);\n}\nexport function foldBack(folder$$8, array$$101, state$$12) {\n  return array$$101.reduceRight(function (delegateArg0$$4, delegateArg1$$4) {\n    return folder$$8(delegateArg1$$4, delegateArg0$$4);\n  }, state$$12);\n}\nexport function foldIndexed2(folder$$10, state$$14, array1$$8, array2$$8) {\n  let acc$$6 = state$$14;\n\n  if (array1$$8.length !== array2$$8.length) {\n    throw new Error(\"Arrays have different lengths\");\n  }\n\n  for (let i$$45 = 0; i$$45 <= array1$$8.length - 1; i$$45++) {\n    acc$$6 = folder$$10(i$$45, acc$$6, array1$$8[i$$45], array2$$8[i$$45]);\n  }\n\n  return acc$$6;\n}\nexport function fold2(folder$$11, state$$15, array1$$9, array2$$9) {\n  return foldIndexed2(function (_arg1, acc$$7, x$$20, y$$7) {\n    return folder$$11(acc$$7, x$$20, y$$7);\n  }, state$$15, array1$$9, array2$$9);\n}\nexport function foldBackIndexed2(folder$$12, array1$$10, array2$$10, state$$16) {\n  let acc$$8 = state$$16;\n\n  if (array1$$10.length !== array2$$10.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const size$$1 = array1$$10.length | 0;\n\n  for (let i$$46 = 1; i$$46 <= size$$1; i$$46++) {\n    acc$$8 = folder$$12(i$$46 - 1, array1$$10[size$$1 - i$$46], array2$$10[size$$1 - i$$46], acc$$8);\n  }\n\n  return acc$$8;\n}\nexport function foldBack2(f$$9, array1$$11, array2$$11, state$$17) {\n  return foldBackIndexed2(function (_arg1$$1, x$$21, y$$8, acc$$9) {\n    return f$$9(x$$21, y$$8, acc$$9);\n  }, array1$$11, array2$$11, state$$17);\n}\nexport function reduce(reduction, array$$103) {\n  if (array$$103.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$103.reduce(reduction);\n}\nexport function reduceBack(reduction$$2, array$$105) {\n  if (array$$105.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$105.reduceRight(reduction$$2);\n}\nexport function forAll2(predicate$$27, array1$$12, array2$$12) {\n  return fold2(function (acc$$10, x$$22, y$$9) {\n    return acc$$10 ? predicate$$27(x$$22, y$$9) : false;\n  }, true, array1$$12, array2$$12);\n}\nexport function existsOffset($arg$$178, $arg$$179, $arg$$180) {\n  existsOffset: while (true) {\n    const predicate$$28 = $arg$$178,\n          array$$107 = $arg$$179,\n          index$$7 = $arg$$180;\n\n    if (index$$7 === array$$107.length) {\n      return false;\n    } else if (predicate$$28(array$$107[index$$7])) {\n      return true;\n    } else {\n      $arg$$178 = predicate$$28;\n      $arg$$179 = array$$107;\n      $arg$$180 = index$$7 + 1;\n      continue existsOffset;\n    }\n\n    break;\n  }\n}\nexport function exists(predicate$$29, array$$108) {\n  return existsOffset(predicate$$29, array$$108, 0);\n}\nexport function existsOffset2($arg$$183, $arg$$184, $arg$$185, $arg$$186) {\n  existsOffset2: while (true) {\n    const predicate$$30 = $arg$$183,\n          array1$$13 = $arg$$184,\n          array2$$13 = $arg$$185,\n          index$$8 = $arg$$186;\n\n    if (index$$8 === array1$$13.length) {\n      return false;\n    } else if (predicate$$30(array1$$13[index$$8], array2$$13[index$$8])) {\n      return true;\n    } else {\n      $arg$$183 = predicate$$30;\n      $arg$$184 = array1$$13;\n      $arg$$185 = array2$$13;\n      $arg$$186 = index$$8 + 1;\n      continue existsOffset2;\n    }\n\n    break;\n  }\n}\nexport function exists2(predicate$$31, array1$$14, array2$$14) {\n  if (array1$$14.length !== array2$$14.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  return existsOffset2(predicate$$31, array1$$14, array2$$14, 0);\n}\nexport function sum(array$$109, adder) {\n  let acc$$11 = adder.GetZero();\n\n  for (let i$$47 = 0; i$$47 <= array$$109.length - 1; i$$47++) {\n    acc$$11 = adder.Add(acc$$11, array$$109[i$$47]);\n  }\n\n  return acc$$11;\n}\nexport function sumBy(projection$$6, array$$110, adder$$1) {\n  let acc$$12 = adder$$1.GetZero();\n\n  for (let i$$48 = 0; i$$48 <= array$$110.length - 1; i$$48++) {\n    acc$$12 = adder$$1.Add(acc$$12, projection$$6(array$$110[i$$48]));\n  }\n\n  return acc$$12;\n}\nexport function maxBy(projection$$7, xs$$12, comparer$$14) {\n  return reduce(function (x$$23, y$$10) {\n    return comparer$$14.Compare(projection$$7(y$$10), projection$$7(x$$23)) > 0 ? y$$10 : x$$23;\n  }, xs$$12);\n}\nexport function max(xs$$13, comparer$$15) {\n  return reduce(function (x$$24, y$$11) {\n    return comparer$$15.Compare(y$$11, x$$24) > 0 ? y$$11 : x$$24;\n  }, xs$$13);\n}\nexport function minBy(projection$$8, xs$$14, comparer$$16) {\n  return reduce(function (x$$25, y$$12) {\n    return comparer$$16.Compare(projection$$8(y$$12), projection$$8(x$$25)) > 0 ? x$$25 : y$$12;\n  }, xs$$14);\n}\nexport function min(xs$$15, comparer$$17) {\n  return reduce(function (x$$26, y$$13) {\n    return comparer$$17.Compare(y$$13, x$$26) > 0 ? x$$26 : y$$13;\n  }, xs$$15);\n}\nexport function average(array$$111, averager) {\n  if (array$$111.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total = averager.GetZero();\n\n  for (let i$$49 = 0; i$$49 <= array$$111.length - 1; i$$49++) {\n    total = averager.Add(total, array$$111[i$$49]);\n  }\n\n  return averager.DivideByInt(total, array$$111.length);\n}\nexport function averageBy(projection$$9, array$$112, averager$$1) {\n  if (array$$112.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total$$1 = averager$$1.GetZero();\n\n  for (let i$$50 = 0; i$$50 <= array$$112.length - 1; i$$50++) {\n    total$$1 = averager$$1.Add(total$$1, projection$$9(array$$112[i$$50]));\n  }\n\n  return averager$$1.DivideByInt(total$$1, array$$112.length);\n}\nexport function ofSeq(source$$8, cons$$31) {\n  return cons$$31.from(source$$8);\n}\nexport function ofList(source$$9, cons$$32) {\n  return cons$$32.from(source$$9);\n}\nexport function toList(source$$10) {\n  const len$$20 = source$$10.length | 0;\n  let target$$7 = new List();\n\n  for (let i$$51 = len$$20 - 1; i$$51 >= 0; i$$51--) {\n    target$$7 = new List(source$$10[i$$51], target$$7);\n  }\n\n  return target$$7;\n}\nexport function windowed(windowSize, source$$11) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  const res$$10 = new Array(max$$1(comparePrimitives, 0, source$$11.length - windowSize));\n\n  for (let i$$52 = windowSize; i$$52 <= source$$11.length; i$$52++) {\n    res$$10[i$$52 - windowSize] = source$$11.slice(i$$52 - windowSize, i$$52 - 1 + 1);\n  }\n\n  return res$$10;\n}","import { defaultArg, value as value$$1, some } from \"./Option.js\";\nimport { FSharpRef, List } from \"./Types.js\";\nimport { iterate as iterate$$1, collect as collect$$1, scanBack as scanBack$$1, scan as scan$$1, foldBack2 as foldBack2$$1, fold2 as fold2$$1, fold as fold$$1, map as map$$1 } from \"./Seq.js\";\nimport { partialApply, getItemFromDict, addToDict, tryGetValue, addToSet, comparerFromEqualityComparer, count } from \"./Util.js\";\nimport { ofList } from \"./Array.js\";\nimport { permute as permute$$1, findIndexBack as findIndexBack$$1, tryFindIndexBack as tryFindIndexBack$$1 } from \"./Array\";\nimport { createMutable } from \"./Set.js\";\nimport { createMutable as createMutable$$1 } from \"./Map.js\";\nexport function head(_arg1) {\n  if (_arg1.tail != null) {\n    const x = _arg1.head;\n    return x;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function tryHead(_arg1$$1) {\n  if (_arg1$$1.tail != null) {\n    const x$$1 = _arg1$$1.head;\n    return some(x$$1);\n  } else {\n    return null;\n  }\n}\nexport function tail(_arg1$$2) {\n  if (_arg1$$2.tail != null) {\n    const xs = _arg1$$2.tail;\n    return xs;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function last(_arg1$$3) {\n  last: while (true) {\n    if (_arg1$$3.tail != null) {\n      if (_arg1$$3.tail.tail == null) {\n        return _arg1$$3.head;\n      } else {\n        const $_arg1$$3$$2 = _arg1$$3;\n        _arg1$$3 = $_arg1$$3$$2.tail;\n        continue last;\n      }\n    } else {\n      throw new Error(\"List was empty\");\n    }\n\n    break;\n  }\n}\nexport function tryLast(_arg1$$4) {\n  tryLast: while (true) {\n    if (_arg1$$4.tail != null) {\n      if (_arg1$$4.tail.tail == null) {\n        return some(_arg1$$4.head);\n      } else {\n        const $_arg1$$4$$3 = _arg1$$4;\n        _arg1$$4 = $_arg1$$4$$3.tail;\n        continue tryLast;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function compareWith(comparer, xs$$3, ys) {\n  if (xs$$3 === ys) {\n    return 0;\n  } else {\n    const loop = function loop(xs$$4, ys$$1) {\n      loop: while (true) {\n        const matchValue = [xs$$4, ys$$1];\n\n        if (matchValue[0].tail != null) {\n          if (matchValue[1].tail != null) {\n            const matchValue$$1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n\n            if (matchValue$$1 === 0) {\n              xs$$4 = matchValue[0].tail;\n              ys$$1 = matchValue[1].tail;\n              continue loop;\n            } else {\n              const res = matchValue$$1 | 0;\n              return res | 0;\n            }\n          } else {\n            return 1;\n          }\n        } else if (matchValue[1].tail == null) {\n          return 0;\n        } else {\n          return -1 | 0;\n        }\n\n        break;\n      }\n    };\n\n    return loop(xs$$3, ys) | 0;\n  }\n}\nexport function foldIndexedAux($arg$$7, $arg$$8, $arg$$9, $arg$$10) {\n  foldIndexedAux: while (true) {\n    const f = $arg$$7,\n          i = $arg$$8,\n          acc = $arg$$9,\n          _arg1$$5 = $arg$$10;\n\n    if (_arg1$$5.tail != null) {\n      const xs$$6 = _arg1$$5.tail;\n      const x$$5 = _arg1$$5.head;\n      $arg$$7 = f;\n      $arg$$8 = i + 1;\n      $arg$$9 = f(i, acc, x$$5);\n      $arg$$10 = xs$$6;\n      continue foldIndexedAux;\n    } else {\n      return acc;\n    }\n\n    break;\n  }\n}\nexport function foldIndexed(f$$1, state, xs$$7) {\n  return foldIndexedAux(f$$1, 0, state, xs$$7);\n}\nexport function fold($arg$$14, $arg$$15, $arg$$16) {\n  fold: while (true) {\n    const f$$2 = $arg$$14,\n          state$$1 = $arg$$15,\n          xs$$8 = $arg$$16;\n\n    if (xs$$8.tail != null) {\n      const t = xs$$8.tail;\n      const h = xs$$8.head;\n      $arg$$14 = f$$2;\n      $arg$$15 = f$$2(state$$1, h);\n      $arg$$16 = t;\n      continue fold;\n    } else {\n      return state$$1;\n    }\n\n    break;\n  }\n}\nexport function reverse(xs$$9) {\n  return fold(function (acc$$1, x$$6) {\n    return new List(x$$6, acc$$1);\n  }, new List(), xs$$9);\n}\nexport function foldBack(f$$3, xs$$10, state$$2) {\n  return fold(function (acc$$2, x$$7) {\n    return f$$3(x$$7, acc$$2);\n  }, state$$2, reverse(xs$$10));\n}\nexport function toSeq(xs$$11) {\n  return map$$1(function (x$$8) {\n    return x$$8;\n  }, xs$$11);\n}\nexport function ofSeq(xs$$12) {\n  return reverse(fold$$1(function (acc$$3, x$$9) {\n    return new List(x$$9, acc$$3);\n  }, new List(), xs$$12));\n}\nexport function concat(lists) {\n  return reverse(fold$$1(function (state$$3, xs$$14) {\n    return fold(function f$$4(acc$$4, x$$10) {\n      return new List(x$$10, acc$$4);\n    }, state$$3, xs$$14);\n  }, new List(), lists));\n}\nexport function foldIndexed2Aux($arg$$20, $arg$$21, $arg$$22, $arg$$23, $arg$$24) {\n  foldIndexed2Aux: while (true) {\n    const f$$5 = $arg$$20,\n          i$$1 = $arg$$21,\n          acc$$5 = $arg$$22,\n          bs = $arg$$23,\n          cs = $arg$$24;\n    const matchValue$$2 = [bs, cs];\n    var $target$$25, x$$11, xs$$16, y$$1, ys$$3;\n\n    if (matchValue$$2[0].tail != null) {\n      if (matchValue$$2[1].tail != null) {\n        $target$$25 = 1;\n        x$$11 = matchValue$$2[0].head;\n        xs$$16 = matchValue$$2[0].tail;\n        y$$1 = matchValue$$2[1].head;\n        ys$$3 = matchValue$$2[1].tail;\n      } else {\n        $target$$25 = 2;\n      }\n    } else if (matchValue$$2[1].tail == null) {\n      $target$$25 = 0;\n    } else {\n      $target$$25 = 2;\n    }\n\n    switch ($target$$25) {\n      case 0:\n        {\n          return acc$$5;\n        }\n\n      case 1:\n        {\n          $arg$$20 = f$$5;\n          $arg$$21 = i$$1 + 1;\n          $arg$$22 = f$$5(i$$1, acc$$5, x$$11, y$$1);\n          $arg$$23 = xs$$16;\n          $arg$$24 = ys$$3;\n          continue foldIndexed2Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed2(f$$6, state$$4, xs$$17, ys$$4) {\n  return foldIndexed2Aux(f$$6, 0, state$$4, xs$$17, ys$$4);\n}\nexport function fold2(f$$7, state$$5, xs$$18, ys$$5) {\n  return fold2$$1(f$$7, state$$5, xs$$18, ys$$5);\n}\nexport function foldBack2(f$$8, xs$$19, ys$$6, state$$6) {\n  return foldBack2$$1(f$$8, xs$$19, ys$$6, state$$6);\n}\nexport function unfold(f$$9, state$$7) {\n  const unfoldInner = function unfoldInner(acc$$6, state$$8) {\n    unfoldInner: while (true) {\n      const matchValue$$3 = f$$9(state$$8);\n\n      if (matchValue$$3 != null) {\n        const x$$12 = matchValue$$3[0];\n        const state$$9 = matchValue$$3[1];\n        const $acc$$6$$40 = acc$$6;\n        acc$$6 = new List(x$$12, $acc$$6$$40);\n        state$$8 = state$$9;\n        continue unfoldInner;\n      } else {\n        return reverse(acc$$6);\n      }\n\n      break;\n    }\n  };\n\n  return unfoldInner(new List(), state$$7);\n}\nexport function foldIndexed3Aux($arg$$41, $arg$$42, $arg$$43, $arg$$44, $arg$$45, $arg$$46) {\n  foldIndexed3Aux: while (true) {\n    const f$$10 = $arg$$41,\n          i$$2 = $arg$$42,\n          acc$$7 = $arg$$43,\n          bs$$1 = $arg$$44,\n          cs$$1 = $arg$$45,\n          ds = $arg$$46;\n    const matchValue$$4 = [bs$$1, cs$$1, ds];\n    var $target$$47, x$$13, xs$$20, y$$2, ys$$7, z, zs;\n\n    if (matchValue$$4[0].tail != null) {\n      if (matchValue$$4[1].tail != null) {\n        if (matchValue$$4[2].tail != null) {\n          $target$$47 = 1;\n          x$$13 = matchValue$$4[0].head;\n          xs$$20 = matchValue$$4[0].tail;\n          y$$2 = matchValue$$4[1].head;\n          ys$$7 = matchValue$$4[1].tail;\n          z = matchValue$$4[2].head;\n          zs = matchValue$$4[2].tail;\n        } else {\n          $target$$47 = 2;\n        }\n      } else {\n        $target$$47 = 2;\n      }\n    } else if (matchValue$$4[1].tail == null) {\n      if (matchValue$$4[2].tail == null) {\n        $target$$47 = 0;\n      } else {\n        $target$$47 = 2;\n      }\n    } else {\n      $target$$47 = 2;\n    }\n\n    switch ($target$$47) {\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      case 1:\n        {\n          $arg$$41 = f$$10;\n          $arg$$42 = i$$2 + 1;\n          $arg$$43 = f$$10(i$$2, acc$$7, x$$13, y$$2, z);\n          $arg$$44 = xs$$20;\n          $arg$$45 = ys$$7;\n          $arg$$46 = zs;\n          continue foldIndexed3Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed3(f$$11, seed, xs$$21, ys$$8, zs$$1) {\n  return foldIndexed3Aux(f$$11, 0, seed, xs$$21, ys$$8, zs$$1);\n}\nexport function fold3(f$$12, state$$10, xs$$22, ys$$9, zs$$2) {\n  return foldIndexed3(function (_arg1$$6, acc$$8, x$$14, y$$3, z$$1) {\n    return f$$12(acc$$8, x$$14, y$$3, z$$1);\n  }, state$$10, xs$$22, ys$$9, zs$$2);\n}\nexport function scan(f$$13, state$$11, xs$$23) {\n  return ofSeq(scan$$1(f$$13, state$$11, xs$$23));\n}\nexport function scanBack(f$$14, xs$$25, state$$12) {\n  return ofSeq(scanBack$$1(f$$14, xs$$25, state$$12));\n}\nexport function length(xs$$27) {\n  return fold(function (acc$$9, _arg1$$7) {\n    return acc$$9 + 1;\n  }, 0, xs$$27);\n}\nexport function append(xs$$28, ys$$10) {\n  return fold(function (acc$$10, x$$15) {\n    return new List(x$$15, acc$$10);\n  }, ys$$10, reverse(xs$$28));\n}\nexport function collect(f$$15, xs$$29) {\n  return ofSeq(collect$$1(f$$15, xs$$29));\n}\nexport function map(f$$16, xs$$31) {\n  return reverse(fold(function (acc$$11, x$$16) {\n    return new List(f$$16(x$$16), acc$$11);\n  }, new List(), xs$$31));\n}\nexport function mapIndexed(f$$17, xs$$33) {\n  return reverse(foldIndexed(function (i$$3, acc$$12, x$$17) {\n    return new List(f$$17(i$$3, x$$17), acc$$12);\n  }, new List(), xs$$33));\n}\nexport function indexed(xs$$35) {\n  return mapIndexed(function (i$$4, x$$18) {\n    return [i$$4, x$$18];\n  }, xs$$35);\n}\nexport function map2(f$$18, xs$$36, ys$$11) {\n  return reverse(fold2(function (acc$$13, x$$19, y$$4) {\n    return new List(f$$18(x$$19, y$$4), acc$$13);\n  }, new List(), xs$$36, ys$$11));\n}\nexport function mapIndexed2(f$$19, xs$$38, ys$$12) {\n  return reverse(foldIndexed2(function (i$$5, acc$$14, x$$20, y$$5) {\n    return new List(f$$19(i$$5, x$$20, y$$5), acc$$14);\n  }, new List(), xs$$38, ys$$12));\n}\nexport function map3(f$$20, xs$$40, ys$$13, zs$$3) {\n  return reverse(fold3(function (acc$$15, x$$21, y$$6, z$$2) {\n    return new List(f$$20(x$$21, y$$6, z$$2), acc$$15);\n  }, new List(), xs$$40, ys$$13, zs$$3));\n}\nexport function mapIndexed3(f$$21, xs$$42, ys$$14, zs$$4) {\n  return reverse(foldIndexed3(function (i$$6, acc$$16, x$$22, y$$7, z$$3) {\n    return new List(f$$21(i$$6, x$$22, y$$7, z$$3), acc$$16);\n  }, new List(), xs$$42, ys$$14, zs$$4));\n}\nexport function mapFold(f$$22, s, xs$$44) {\n  const foldFn = function foldFn(tupledArg, x$$23) {\n    const patternInput = f$$22(tupledArg[1], x$$23);\n    return [new List(patternInput[0], tupledArg[0]), patternInput[1]];\n  };\n\n  const patternInput$$1 = fold(foldFn, [new List(), s], xs$$44);\n  return [reverse(patternInput$$1[0]), patternInput$$1[1]];\n}\nexport function mapFoldBack(f$$23, xs$$45, s$$2) {\n  return mapFold(function (s$$3, v) {\n    return f$$23(v, s$$3);\n  }, s$$2, reverse(xs$$45));\n}\nexport function iterate(f$$24, xs$$46) {\n  fold(function (unitVar0, x$$24) {\n    f$$24(x$$24);\n  }, null, xs$$46);\n}\nexport function iterate2(f$$25, xs$$47, ys$$15) {\n  fold2(function (unitVar0$$1, x$$25, y$$8) {\n    f$$25(x$$25, y$$8);\n  }, null, xs$$47, ys$$15);\n}\nexport function iterateIndexed(f$$26, xs$$48) {\n  foldIndexed(function (i$$7, unitVar1, x$$26) {\n    f$$26(i$$7, x$$26);\n  }, null, xs$$48);\n}\nexport function iterateIndexed2(f$$27, xs$$49, ys$$16) {\n  foldIndexed2(function (i$$8, unitVar1$$1, x$$27, y$$9) {\n    f$$27(i$$8, x$$27, y$$9);\n  }, null, xs$$49, ys$$16);\n}\nexport function ofArray(xs$$50) {\n  let res$$1 = new List();\n\n  for (let i$$9 = count(xs$$50) - 1; i$$9 >= 0; i$$9--) {\n    res$$1 = new List(xs$$50[i$$9], res$$1);\n  }\n\n  return res$$1;\n}\nexport function empty() {\n  return new List();\n}\nexport function isEmpty(_arg1$$8) {\n  if (_arg1$$8.tail == null) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function tryPickIndexedAux($arg$$100, $arg$$101, $arg$$102) {\n  tryPickIndexedAux: while (true) {\n    const f$$28 = $arg$$100,\n          i$$10 = $arg$$101,\n          _arg1$$9 = $arg$$102;\n\n    if (_arg1$$9.tail != null) {\n      const xs$$51 = _arg1$$9.tail;\n      const x$$28 = _arg1$$9.head;\n      const result = f$$28(i$$10, x$$28);\n\n      if (result == null) {\n        $arg$$100 = f$$28;\n        $arg$$101 = i$$10 + 1;\n        $arg$$102 = xs$$51;\n        continue tryPickIndexedAux;\n      } else {\n        return result;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function tryPickIndexed(f$$29, xs$$52) {\n  return tryPickIndexedAux(f$$29, 0, xs$$52);\n}\nexport function tryPick(f$$30, xs$$53) {\n  return tryPickIndexed(function (_arg1$$10, x$$29) {\n    return f$$30(x$$29);\n  }, xs$$53);\n}\nexport function pick(f$$31, xs$$54) {\n  const matchValue$$5 = tryPick(f$$31, xs$$54);\n\n  if (matchValue$$5 != null) {\n    const x$$30 = value$$1(matchValue$$5);\n    return x$$30;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function tryFindIndexed(f$$32, xs$$55) {\n  return tryPickIndexed(function (i$$11, x$$31) {\n    return f$$32(i$$11, x$$31) ? some(x$$31) : null;\n  }, xs$$55);\n}\nexport function tryFind(f$$33, xs$$56) {\n  return tryPickIndexed(function (_arg1$$11, x$$32) {\n    return f$$33(x$$32) ? some(x$$32) : null;\n  }, xs$$56);\n}\nexport function findIndexed(f$$34, xs$$57) {\n  const matchValue$$6 = tryFindIndexed(f$$34, xs$$57);\n\n  if (matchValue$$6 != null) {\n    const x$$33 = value$$1(matchValue$$6);\n    return x$$33;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function find(f$$35, xs$$58) {\n  return findIndexed(function (_arg1$$12, x$$34) {\n    return f$$35(x$$34);\n  }, xs$$58);\n}\nexport function findBack(f$$36, xs$$59) {\n  return find(f$$36, reverse(xs$$59));\n}\nexport function tryFindBack(f$$37, xs$$62) {\n  return tryFind(f$$37, reverse(xs$$62));\n}\nexport function tryFindIndex(f$$38, xs$$65) {\n  return tryPickIndexed(function (i$$12, x$$35) {\n    return f$$38(x$$35) ? i$$12 : null;\n  }, xs$$65);\n}\nexport function tryFindIndexBack(f$$39, xs$$66) {\n  return tryFindIndexBack$$1(f$$39, ofList(xs$$66, Array));\n}\nexport function findIndex(f$$40, xs$$67) {\n  const matchValue$$7 = tryFindIndex(f$$40, xs$$67);\n\n  if (matchValue$$7 != null) {\n    const x$$36 = matchValue$$7 | 0;\n    return x$$36 | 0;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function findIndexBack(f$$41, xs$$68) {\n  return findIndexBack$$1(f$$41, ofList(xs$$68, Array));\n}\nexport function item(n, xs$$69) {\n  return findIndexed(function (i$$13, _arg1$$13) {\n    return n === i$$13;\n  }, xs$$69);\n}\nexport function tryItem(n$$1, xs$$70) {\n  return tryFindIndexed(function (i$$14, _arg1$$14) {\n    return n$$1 === i$$14;\n  }, xs$$70);\n}\nexport function filter(f$$42, xs$$71) {\n  return reverse(fold(function (acc$$17, x$$37) {\n    return f$$42(x$$37) ? new List(x$$37, acc$$17) : acc$$17;\n  }, new List(), xs$$71));\n}\nexport function partition(f$$43, xs$$73) {\n  return fold(function (tupledArg$$1, x$$38) {\n    return f$$43(x$$38) ? [new List(x$$38, tupledArg$$1[0]), tupledArg$$1[1]] : [tupledArg$$1[0], new List(x$$38, tupledArg$$1[1])];\n  }, [new List(), new List()], reverse(xs$$73));\n}\nexport function choose(f$$44, xs$$74) {\n  return reverse(fold(function (acc$$18, x$$39) {\n    const matchValue$$8 = f$$44(x$$39);\n\n    if (matchValue$$8 == null) {\n      return acc$$18;\n    } else {\n      const y$$10 = value$$1(matchValue$$8);\n      return new List(y$$10, acc$$18);\n    }\n  }, new List(), xs$$74));\n}\nexport function contains(value, list, eq) {\n  const loop$$1 = function loop$$1(xs$$76) {\n    loop$$1: while (true) {\n      if (xs$$76.tail != null) {\n        const v$$1 = xs$$76.head;\n        const rest = xs$$76.tail;\n\n        if (eq.Equals(value, v$$1)) {\n          return true;\n        } else {\n          xs$$76 = rest;\n          continue loop$$1;\n        }\n      } else {\n        return false;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(list);\n}\nexport function except(itemsToExclude, array$$2, eq$$1) {\n  if (isEmpty(array$$2)) {\n    return array$$2;\n  } else {\n    const cached = createMutable(itemsToExclude, comparerFromEqualityComparer(eq$$1));\n    return filter(function f$$45(arg00) {\n      return addToSet(arg00, cached);\n    }, array$$2);\n  }\n}\nexport function initialize(n$$2, f$$46) {\n  let xs$$78 = new List();\n\n  for (let i$$15 = 1; i$$15 <= n$$2; i$$15++) {\n    xs$$78 = new List(f$$46(n$$2 - i$$15), xs$$78);\n  }\n\n  return xs$$78;\n}\nexport function replicate(n$$3, x$$40) {\n  return initialize(n$$3, function (_arg1$$15) {\n    return x$$40;\n  });\n}\nexport function reduce(f$$47, _arg1$$16) {\n  if (_arg1$$16.tail != null) {\n    const t$$1 = _arg1$$16.tail;\n    const h$$1 = _arg1$$16.head;\n    return fold(f$$47, h$$1, t$$1);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function reduceBack(f$$48, _arg1$$17) {\n  if (_arg1$$17.tail != null) {\n    const t$$2 = _arg1$$17.tail;\n    const h$$2 = _arg1$$17.head;\n    return foldBack(f$$48, t$$2, h$$2);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function forAll(f$$49, xs$$79) {\n  return fold(function (acc$$19, x$$41) {\n    return acc$$19 ? f$$49(x$$41) : false;\n  }, true, xs$$79);\n}\nexport function forAll2(f$$50, xs$$80, ys$$17) {\n  return fold2(function (acc$$20, x$$42, y$$11) {\n    return acc$$20 ? f$$50(x$$42, y$$11) : false;\n  }, true, xs$$80, ys$$17);\n}\nexport function exists($arg$$146, $arg$$147) {\n  exists: while (true) {\n    const f$$51 = $arg$$146,\n          _arg1$$18 = $arg$$147;\n\n    if (_arg1$$18.tail != null) {\n      const xs$$81 = _arg1$$18.tail;\n      const x$$43 = _arg1$$18.head;\n\n      if (f$$51(x$$43)) {\n        return true;\n      } else {\n        $arg$$146 = f$$51;\n        $arg$$147 = xs$$81;\n        continue exists;\n      }\n    } else {\n      return false;\n    }\n\n    break;\n  }\n}\nexport function exists2($arg$$148, $arg$$149, $arg$$150) {\n  exists2: while (true) {\n    const f$$52 = $arg$$148,\n          bs$$2 = $arg$$149,\n          cs$$2 = $arg$$150;\n    const matchValue$$9 = [bs$$2, cs$$2];\n    var $target$$151, x$$44, xs$$82, y$$12, ys$$18;\n\n    if (matchValue$$9[0].tail != null) {\n      if (matchValue$$9[1].tail != null) {\n        $target$$151 = 1;\n        x$$44 = matchValue$$9[0].head;\n        xs$$82 = matchValue$$9[0].tail;\n        y$$12 = matchValue$$9[1].head;\n        ys$$18 = matchValue$$9[1].tail;\n      } else {\n        $target$$151 = 2;\n      }\n    } else if (matchValue$$9[1].tail == null) {\n      $target$$151 = 0;\n    } else {\n      $target$$151 = 2;\n    }\n\n    switch ($target$$151) {\n      case 0:\n        {\n          return false;\n        }\n\n      case 1:\n        {\n          if (f$$52(x$$44, y$$12)) {\n            return true;\n          } else {\n            $arg$$148 = f$$52;\n            $arg$$149 = xs$$82;\n            $arg$$150 = ys$$18;\n            continue exists2;\n          }\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function unzip(xs$$83) {\n  return foldBack(function (tupledArg$$2, tupledArg$$3) {\n    return [new List(tupledArg$$2[0], tupledArg$$3[0]), new List(tupledArg$$2[1], tupledArg$$3[1])];\n  }, xs$$83, [new List(), new List()]);\n}\nexport function unzip3(xs$$84) {\n  return foldBack(function (tupledArg$$4, tupledArg$$5) {\n    return [new List(tupledArg$$4[0], tupledArg$$5[0]), new List(tupledArg$$4[1], tupledArg$$5[1]), new List(tupledArg$$4[2], tupledArg$$5[2])];\n  }, xs$$84, [new List(), new List(), new List()]);\n}\nexport function zip(xs$$85, ys$$19) {\n  return map2(function (x$$47, y$$15) {\n    return [x$$47, y$$15];\n  }, xs$$85, ys$$19);\n}\nexport function zip3(xs$$86, ys$$20, zs$$5) {\n  return map3(function (x$$48, y$$16, z$$5) {\n    return [x$$48, y$$16, z$$5];\n  }, xs$$86, ys$$20, zs$$5);\n}\nexport function sort(xs$$87, comparer$$1) {\n  var xs$$88;\n  return ofArray((xs$$88 = ofList(xs$$87, Array), (xs$$88.sort(function (x$$49, y$$17) {\n    return comparer$$1.Compare(x$$49, y$$17);\n  }), xs$$88)));\n}\nexport function sortBy(projection, xs$$90, comparer$$3) {\n  var xs$$91;\n  return ofArray((xs$$91 = ofList(xs$$90, Array), (xs$$91.sort(function (x$$50, y$$18) {\n    return comparer$$3.Compare(projection(x$$50), projection(y$$18));\n  }), xs$$91)));\n}\nexport function sortDescending(xs$$93, comparer$$5) {\n  var xs$$94;\n  return ofArray((xs$$94 = ofList(xs$$93, Array), (xs$$94.sort(function (x$$51, y$$19) {\n    return comparer$$5.Compare(x$$51, y$$19) * -1;\n  }), xs$$94)));\n}\nexport function sortByDescending(projection$$1, xs$$96, comparer$$7) {\n  var xs$$97;\n  return ofArray((xs$$97 = ofList(xs$$96, Array), (xs$$97.sort(function (x$$52, y$$20) {\n    return comparer$$7.Compare(projection$$1(x$$52), projection$$1(y$$20)) * -1;\n  }), xs$$97)));\n}\nexport function sortWith(comparer$$9, xs$$99) {\n  var xs$$100;\n  return ofArray((xs$$100 = ofList(xs$$99, Array), (xs$$100.sort(comparer$$9), xs$$100)));\n}\nexport function sum(xs$$102, adder) {\n  return fold(function (acc$$21, x$$53) {\n    return adder.Add(acc$$21, x$$53);\n  }, adder.GetZero(), xs$$102);\n}\nexport function sumBy(f$$53, xs$$103, adder$$1) {\n  return fold(function (acc$$22, x$$54) {\n    return adder$$1.Add(acc$$22, f$$53(x$$54));\n  }, adder$$1.GetZero(), xs$$103);\n}\nexport function maxBy(projection$$2, xs$$104, comparer$$11) {\n  return reduce(function (x$$55, y$$21) {\n    return comparer$$11.Compare(projection$$2(y$$21), projection$$2(x$$55)) > 0 ? y$$21 : x$$55;\n  }, xs$$104);\n}\nexport function max(li, comparer$$12) {\n  return reduce(function (x$$56, y$$22) {\n    return comparer$$12.Compare(y$$22, x$$56) > 0 ? y$$22 : x$$56;\n  }, li);\n}\nexport function minBy(projection$$3, xs$$105, comparer$$13) {\n  return reduce(function (x$$57, y$$23) {\n    return comparer$$13.Compare(projection$$3(y$$23), projection$$3(x$$57)) > 0 ? x$$57 : y$$23;\n  }, xs$$105);\n}\nexport function min(xs$$106, comparer$$14) {\n  return reduce(function (x$$58, y$$24) {\n    return comparer$$14.Compare(y$$24, x$$58) > 0 ? x$$58 : y$$24;\n  }, xs$$106);\n}\nexport function average(xs$$107, averager) {\n  const total = fold(function (acc$$23, x$$59) {\n    return averager.Add(acc$$23, x$$59);\n  }, averager.GetZero(), xs$$107);\n  return averager.DivideByInt(total, length(xs$$107));\n}\nexport function averageBy(f$$54, xs$$108, averager$$1) {\n  const total$$1 = fold(function (acc$$24, x$$60) {\n    return averager$$1.Add(acc$$24, f$$54(x$$60));\n  }, averager$$1.GetZero(), xs$$108);\n  return averager$$1.DivideByInt(total$$1, length(xs$$108));\n}\nexport function permute(f$$55, xs$$109) {\n  return ofArray(permute$$1(f$$55, ofList(xs$$109, Array)));\n}\nexport function skip(i$$16, xs$$111) {\n  const skipInner = function skipInner(i$$17, xs$$112) {\n    skipInner: while (true) {\n      const matchValue$$10 = [i$$17, xs$$112];\n\n      if (matchValue$$10[0] === 0) {\n        return xs$$112;\n      } else if (matchValue$$10[1].tail != null) {\n        const xs$$113 = matchValue$$10[1].tail;\n        const $i$$17$$174 = i$$17;\n        i$$17 = $i$$17$$174 - 1;\n        xs$$112 = xs$$113;\n        continue skipInner;\n      } else {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      }\n\n      break;\n    }\n  };\n\n  const matchValue$$11 = [i$$16, xs$$111];\n\n  if (matchValue$$11[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$175, i$$20, xs$$115;\n\n    if (matchValue$$11[0] === 0) {\n      $target$$175 = 0;\n    } else if (matchValue$$11[0] === 1) {\n      if (matchValue$$11[1].tail != null) {\n        $target$$175 = 1;\n      } else {\n        $target$$175 = 2;\n        i$$20 = matchValue$$11[0];\n        xs$$115 = matchValue$$11[1];\n      }\n    } else {\n      $target$$175 = 2;\n      i$$20 = matchValue$$11[0];\n      xs$$115 = matchValue$$11[1];\n    }\n\n    switch ($target$$175) {\n      case 0:\n        {\n          return xs$$111;\n        }\n\n      case 1:\n        {\n          const xs$$114 = matchValue$$11[1].tail;\n          return xs$$114;\n        }\n\n      case 2:\n        {\n          return skipInner(i$$20, xs$$115);\n        }\n    }\n  }\n}\nexport function skipWhile($arg$$176, $arg$$177) {\n  var t$$3, h$$3;\n\n  skipWhile: while (true) {\n    const predicate = $arg$$176,\n          xs$$116 = $arg$$177;\n    var $target$$178, h$$4, t$$4;\n\n    if (xs$$116.tail != null) {\n      if (t$$3 = xs$$116.tail, (h$$3 = xs$$116.head, predicate(h$$3))) {\n        $target$$178 = 0;\n        h$$4 = xs$$116.head;\n        t$$4 = xs$$116.tail;\n      } else {\n        $target$$178 = 1;\n      }\n    } else {\n      $target$$178 = 1;\n    }\n\n    switch ($target$$178) {\n      case 0:\n        {\n          $arg$$176 = predicate;\n          $arg$$177 = t$$4;\n          continue skipWhile;\n        }\n\n      case 1:\n        {\n          return xs$$116;\n        }\n    }\n\n    break;\n  }\n}\nexport function takeSplitAux(error, i$$21, acc$$25, xs$$117) {\n  takeSplitAux: while (true) {\n    const matchValue$$12 = [i$$21, xs$$117];\n\n    if (matchValue$$12[0] === 0) {\n      return [reverse(acc$$25), xs$$117];\n    } else if (matchValue$$12[1].tail != null) {\n      const xs$$118 = matchValue$$12[1].tail;\n      const x$$61 = matchValue$$12[1].head;\n      const $acc$$25$$181 = acc$$25;\n      const $error$$179 = error;\n      const $i$$21$$180 = i$$21;\n      error = $error$$179;\n      i$$21 = $i$$21$$180 - 1;\n      acc$$25 = new List(x$$61, $acc$$25$$181);\n      xs$$117 = xs$$118;\n      continue takeSplitAux;\n    } else {\n      if (error) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      } else {\n        return [reverse(acc$$25), xs$$117];\n      }\n    }\n\n    break;\n  }\n}\nexport function take(i$$22, xs$$119) {\n  const matchValue$$13 = [i$$22, xs$$119];\n\n  if (matchValue$$13[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$182, i$$25, xs$$120;\n\n    if (matchValue$$13[0] === 0) {\n      $target$$182 = 0;\n    } else if (matchValue$$13[0] === 1) {\n      if (matchValue$$13[1].tail != null) {\n        $target$$182 = 1;\n      } else {\n        $target$$182 = 2;\n        i$$25 = matchValue$$13[0];\n        xs$$120 = matchValue$$13[1];\n      }\n    } else {\n      $target$$182 = 2;\n      i$$25 = matchValue$$13[0];\n      xs$$120 = matchValue$$13[1];\n    }\n\n    switch ($target$$182) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          const x$$62 = matchValue$$13[1].head;\n          return new List(x$$62, new List());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$25, new List(), xs$$120)[0];\n        }\n    }\n  }\n}\nexport function takeWhile(predicate$$1, xs$$121) {\n  if (xs$$121.tail != null) {\n    if (xs$$121.tail.tail == null) {\n      if (predicate$$1(xs$$121.head)) {\n        return xs$$121;\n      } else {\n        return xs$$121.tail;\n      }\n    } else {\n      if (!predicate$$1(xs$$121.head)) {\n        return new List();\n      } else {\n        return new List(xs$$121.head, takeWhile(predicate$$1, xs$$121.tail));\n      }\n    }\n  } else {\n    return xs$$121;\n  }\n}\nexport function truncate(i$$26, xs$$123) {\n  const matchValue$$14 = [i$$26, xs$$123];\n\n  if (matchValue$$14[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$185, i$$29, xs$$124;\n\n    if (matchValue$$14[0] === 0) {\n      $target$$185 = 0;\n    } else if (matchValue$$14[0] === 1) {\n      if (matchValue$$14[1].tail != null) {\n        $target$$185 = 1;\n      } else {\n        $target$$185 = 2;\n        i$$29 = matchValue$$14[0];\n        xs$$124 = matchValue$$14[1];\n      }\n    } else {\n      $target$$185 = 2;\n      i$$29 = matchValue$$14[0];\n      xs$$124 = matchValue$$14[1];\n    }\n\n    switch ($target$$185) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          const x$$65 = matchValue$$14[1].head;\n          return new List(x$$65, new List());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(false, i$$29, new List(), xs$$124)[0];\n        }\n    }\n  }\n}\nexport function splitAt(i$$30, xs$$125) {\n  const matchValue$$15 = [i$$30, xs$$125];\n\n  if (matchValue$$15[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$186, i$$33, xs$$127;\n\n    if (matchValue$$15[0] === 0) {\n      $target$$186 = 0;\n    } else if (matchValue$$15[0] === 1) {\n      if (matchValue$$15[1].tail != null) {\n        $target$$186 = 1;\n      } else {\n        $target$$186 = 2;\n        i$$33 = matchValue$$15[0];\n        xs$$127 = matchValue$$15[1];\n      }\n    } else {\n      $target$$186 = 2;\n      i$$33 = matchValue$$15[0];\n      xs$$127 = matchValue$$15[1];\n    }\n\n    switch ($target$$186) {\n      case 0:\n        {\n          return [new List(), xs$$125];\n        }\n\n      case 1:\n        {\n          const xs$$126 = matchValue$$15[1].tail;\n          const x$$66 = matchValue$$15[1].head;\n          return [new List(x$$66, new List()), xs$$126];\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$33, new List(), xs$$127);\n        }\n    }\n  }\n}\nexport function outOfRange() {\n  throw new Error(\"Index out of range\");\n}\nexport function slice(lower, upper, xs$$128) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const hasUpper = upper != null;\n\n  if (lower$$1 < 0) {\n    return outOfRange();\n  } else if (hasUpper ? upper < lower$$1 : false) {\n    return new List();\n  } else {\n    let lastIndex = -1 | 0;\n    const res$$2 = foldIndexed(function f$$56(i$$34, acc$$26, x$$67) {\n      lastIndex = i$$34;\n\n      if (lower$$1 <= i$$34 ? !hasUpper ? true : i$$34 <= upper : false) {\n        return new List(x$$67, acc$$26);\n      } else {\n        return acc$$26;\n      }\n    }, new List(), xs$$128);\n\n    if (lower$$1 > lastIndex + 1 ? true : hasUpper ? upper > lastIndex : false) {\n      outOfRange();\n    }\n\n    return reverse(res$$2);\n  }\n}\nexport function distinctBy(projection$$4, xs$$130, eq$$2) {\n  const hashSet = createMutable([], comparerFromEqualityComparer(eq$$2));\n  return filter(function f$$57($arg$$1) {\n    return addToSet(projection$$4($arg$$1), hashSet);\n  }, xs$$130);\n}\nexport function distinct(xs$$132, eq$$3) {\n  return distinctBy(function (x$$68) {\n    return x$$68;\n  }, xs$$132, eq$$3);\n}\nexport function exactlyOne(xs$$133) {\n  if (xs$$133.tail != null) {\n    if (xs$$133.tail.tail != null) {\n      throw new Error(\"Input list too long\\\\nParameter name: list\");\n    } else {\n      return xs$$133.head;\n    }\n  } else {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: list\");\n  }\n}\nexport function groupBy(projection$$5, xs$$135, eq$$4) {\n  const dict = createMutable$$1([], comparerFromEqualityComparer(eq$$4));\n  const keys = [];\n  iterate$$1(function (v$$2) {\n    const key = projection$$5(v$$2);\n    const matchValue$$16 = tryGetValue(dict, key, null);\n\n    if (matchValue$$16[0]) {\n      dict.set(key, new List(v$$2, matchValue$$16[1]));\n    } else {\n      addToDict(dict, key, new List(v$$2, new List()));\n      keys.push(key);\n    }\n  }, xs$$135);\n  return ofSeq(map$$1(function mapping(key$$1) {\n    return [key$$1, reverse(getItemFromDict(dict, key$$1))];\n  }, keys));\n}\nexport function countBy(projection$$6, xs$$137, eq$$5) {\n  const dict$$1 = createMutable$$1([], comparerFromEqualityComparer(eq$$5));\n  iterate(function (v$$3) {\n    const key$$2 = projection$$6(v$$3);\n    const matchValue$$17 = tryGetValue(dict$$1, key$$2, null);\n\n    if (matchValue$$17[0]) {\n      matchValue$$17[1].contents = matchValue$$17[1].contents + 1;\n    } else {\n      dict$$1.set(key$$2, new FSharpRef(1));\n    }\n  }, xs$$137);\n  let result$$1 = new List();\n  iterate$$1(function (group) {\n    result$$1 = new List([group[0], group[1].contents], result$$1);\n  }, dict$$1);\n  return result$$1;\n}\nexport function where(predicate$$2, xs$$138) {\n  return filter(predicate$$2, xs$$138);\n}\nexport function pairwise(xs$$139) {\n  const inner = function inner(xs$$140, acc$$27, x1$$1) {\n    inner: while (true) {\n      if (xs$$140.tail != null) {\n        const xs$$141 = xs$$140.tail;\n        const x2$$1 = xs$$140.head;\n        acc$$27.push([x1$$1, x2$$1]);\n        const $acc$$27$$198 = acc$$27;\n        xs$$140 = xs$$141;\n        acc$$27 = $acc$$27$$198;\n        x1$$1 = x2$$1;\n        continue inner;\n      } else {\n        return ofArray(acc$$27);\n      }\n\n      break;\n    }\n  };\n\n  var $target$$199, x1$$2, x2$$2, xs$$142;\n\n  if (xs$$139.tail != null) {\n    if (xs$$139.tail.tail != null) {\n      $target$$199 = 1;\n      x1$$2 = xs$$139.head;\n      x2$$2 = xs$$139.tail.head;\n      xs$$142 = xs$$139.tail.tail;\n    } else {\n      $target$$199 = 0;\n    }\n  } else {\n    $target$$199 = 0;\n  }\n\n  switch ($target$$199) {\n    case 0:\n      {\n        return new List();\n      }\n\n    case 1:\n      {\n        const acc$$28 = [];\n        acc$$28.push([x1$$2, x2$$2]);\n        return function (arg00$$2) {\n          const clo1 = partialApply(2, inner, [arg00$$2]);\n          return function (arg10) {\n            const clo2 = clo1(arg10);\n            return function (arg20) {\n              return clo2(arg20);\n            };\n          };\n        }(xs$$142)(acc$$28)(x2$$2);\n      }\n  }\n}\nexport function windowed(windowSize, source$$1) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$3 = new List();\n\n  for (let i$$35 = length(source$$1); i$$35 >= windowSize; i$$35--) {\n    res$$3 = new List(slice(i$$35 - windowSize, i$$35 - 1, source$$1), res$$3);\n  }\n\n  return res$$3;\n}","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","import { List, declare, Record } from \"../Types.js\";\nimport { record, array, int32 } from \"../Reflection.js\";\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, toInt, op_Modulus, op_Multiply, fromInteger, fromBits } from \"../Long.js\";\nimport { ofList, copy, initialize, map, fill } from \"../Array.js\";\nimport { int32ToString } from \"../Util.js\";\nimport { isNullOrEmpty, join } from \"../String.js\";\nexport const BigNat = declare(function BigInt_BigNat(arg1, arg2) {\n  this.bound = arg1 | 0;\n  this.digits = arg2;\n}, Record);\nexport function BigNat$reflection() {\n  return record(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32], [\"digits\", array(int32)]]);\n}\nexport function BigNatModule$002EFFT$$$pow32(x, n) {\n  BigNatModule$002EFFT$$$pow32: while (true) {\n    if (n === 0) {\n      return 1;\n    } else if (n % 2 === 0) {\n      const $n$$2 = n;\n      const $x$$1 = x;\n      x = $x$$1 * $x$$1;\n      n = ~~($n$$2 / 2);\n      continue BigNatModule$002EFFT$$$pow32;\n    } else {\n      return x * BigNatModule$002EFFT$$$pow32(x * x, ~~(n / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$$$leastBounding2Power(b) {\n  const findBounding2Power = function findBounding2Power(b$$1, tp, i) {\n    findBounding2Power: while (true) {\n      if (b$$1 <= tp) {\n        return [tp, i];\n      } else {\n        const $b$$1$$3 = b$$1;\n        const $i$$5 = i;\n        const $tp$$4 = tp;\n        b$$1 = $b$$1$$3;\n        tp = $tp$$4 * 2;\n        i = $i$$5 + 1;\n        continue findBounding2Power;\n      }\n\n      break;\n    }\n  };\n\n  return findBounding2Power(b, 1, 0);\n}\nconst BigNatModule$002EFFT$$$patternInput$004074 = [fromBits(2013265921, 0, false), 27, 15, 31, 440564289];\nexport const BigNatModule$002EFFT$$$w = BigNatModule$002EFFT$$$patternInput$004074[4];\nexport const BigNatModule$002EFFT$$$p = BigNatModule$002EFFT$$$patternInput$004074[0];\nexport const BigNatModule$002EFFT$$$m = BigNatModule$002EFFT$$$patternInput$004074[2];\nexport const BigNatModule$002EFFT$$$k = BigNatModule$002EFFT$$$patternInput$004074[1];\nexport const BigNatModule$002EFFT$$$g = BigNatModule$002EFFT$$$patternInput$004074[3];\nexport const BigNatModule$002EFFT$$$primeP = BigNatModule$002EFFT$$$p;\nexport const BigNatModule$002EFFT$$$maxBitsInsideFp = 30;\nexport const BigNatModule$002EFFT$002EFp$$$p = 2013265921;\nexport const BigNatModule$002EFFT$002EFp$$$p64 = fromBits(2013265921, 0, true);\nexport function BigNatModule$002EFFT$002EFp$$$toInt(x$$1) {\n  return ~~x$$1;\n}\nexport function BigNatModule$002EFFT$002EFp$$$ofInt32(x$$2) {\n  return x$$2 >>> 0;\n}\nexport const BigNatModule$002EFFT$002EFp$$$mzero = 0;\nexport const BigNatModule$002EFFT$002EFp$$$mone = 1;\nexport const BigNatModule$002EFFT$002EFp$$$mtwo = 2;\nexport function BigNatModule$002EFFT$002EFp$$$mpow(x$$3, n$$1) {\n  BigNatModule$002EFFT$002EFp$$$mpow: while (true) {\n    if (n$$1 === 0) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (n$$1 % 2 === 0) {\n      const $n$$1$$7 = n$$1;\n      const $x$$3$$6 = x$$3;\n      x$$3 = toInt(op_Modulus(op_Multiply(fromInteger($x$$3$$6, true, 6), fromInteger($x$$3$$6, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      n$$1 = ~~($n$$1$$7 / 2);\n      continue BigNatModule$002EFFT$002EFp$$$mpow;\n    } else {\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(BigNatModule$002EFFT$002EFp$$$mpow(toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(x$$3, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, ~~(n$$1 / 2)), true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$mpowL(x$$7, n$$2) {\n  BigNatModule$002EFFT$002EFp$$$mpowL: while (true) {\n    if (equals(n$$2, fromBits(0, 0, false))) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (equals(op_Modulus(n$$2, fromBits(2, 0, false)), fromBits(0, 0, false))) {\n      const $n$$2$$9 = n$$2;\n      const $x$$7$$8 = x$$7;\n      x$$7 = toInt(op_Modulus(op_Multiply(fromInteger($x$$7$$8, true, 6), fromInteger($x$$7$$8, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      n$$2 = op_Division($n$$2$$9, fromBits(2, 0, false));\n      continue BigNatModule$002EFFT$002EFp$$$mpowL;\n    } else {\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(BigNatModule$002EFFT$002EFp$$$mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(x$$7, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, op_Division(n$$2, fromBits(2, 0, false))), true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(n$$3) {\n  return BigNatModule$002EFFT$002EFp$$$mpow(BigNatModule$002EFFT$$$w >>> 0, BigNatModule$002EFFT$$$pow32(2, BigNatModule$002EFFT$$$k - n$$3));\n}\nexport function BigNatModule$002EFFT$002EFp$$$minv(x$$11) {\n  return BigNatModule$002EFFT$002EFp$$$mpowL(x$$11, op_Subtraction(BigNatModule$002EFFT$$$primeP, fromBits(2, 0, false)));\n}\nexport function BigNatModule$002EFFT$$$computeFFT(lambda, mu, n$$4, w, u, res, offset) {\n  if (n$$4 === 1) {\n    res[offset] = u[mu];\n  } else {\n    const halfN = ~~(n$$4 / 2) | 0;\n    const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    const offsetHalfN = offset + halfN | 0;\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\n    let wj = BigNatModule$002EFFT$002EFp$$$mone;\n\n    for (let j = 0; j <= halfN - 1; j++) {\n      const even = res[offset + j];\n      const odd = res[offsetHalfN + j];\n      res[offset + j] = (even + (toInt(op_Modulus(op_Multiply(fromInteger(wj, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0)) % BigNatModule$002EFFT$002EFp$$$p;\n      res[offsetHalfN + j] = (even + BigNatModule$002EFFT$002EFp$$$p - (toInt(op_Modulus(op_Multiply(fromInteger(wj, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0)) % BigNatModule$002EFFT$002EFp$$$p;\n      wj = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(wj, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n  }\n}\nexport function BigNatModule$002EFFT$$$computFftInPlace(n$$5, w$$1, u$$1) {\n  const lambda$$1 = 1;\n  const mu$$1 = 0;\n  const res$$1 = fill(new Uint32Array(n$$5), 0, n$$5, BigNatModule$002EFFT$002EFp$$$mzero);\n  const offset$$1 = 0;\n  BigNatModule$002EFFT$$$computeFFT(lambda$$1, mu$$1, n$$5, w$$1, u$$1, res$$1, offset$$1);\n  return res$$1;\n}\nexport function BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$6, w$$2, uT) {\n  const bigKInv = BigNatModule$002EFFT$002EFp$$$minv(n$$6 >>> 0);\n  return map(function (y$$12) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y$$12, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, BigNatModule$002EFFT$$$computFftInPlace(n$$6, BigNatModule$002EFFT$002EFp$$$minv(w$$2), uT), Uint32Array);\n}\nexport const BigNatModule$002EFFT$$$maxTwoPower = 29;\nexport const BigNatModule$002EFFT$$$twoPowerTable = initialize(BigNatModule$002EFFT$$$maxTwoPower - 1, function (i$$1) {\n  return BigNatModule$002EFFT$$$pow32(2, i$$1);\n}, Int32Array);\nexport function BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(bigK, k, u$$2, v) {\n  const w$$3 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(k);\n  const n$$7 = bigK | 0;\n  const uT$$1 = BigNatModule$002EFFT$$$computFftInPlace(n$$7, w$$3, u$$2);\n  const vT = BigNatModule$002EFFT$$$computFftInPlace(n$$7, w$$3, v);\n  const rT = initialize(n$$7, function (i$$2) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(uT$$1[i$$2], true, 6), fromInteger(vT[i$$2], true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r = BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$7, w$$3, rT);\n  return r;\n}\nexport function BigNatModule$002EFFT$$$padTo(n$$8, u$$3) {\n  const uBound = u$$3.length | 0;\n  return initialize(n$$8, function (i$$3) {\n    return i$$3 < uBound ? BigNatModule$002EFFT$002EFp$$$ofInt32(u$$3[i$$3]) : BigNatModule$002EFFT$002EFp$$$mzero;\n  }, Uint32Array);\n}\nexport function BigNatModule$002EFFT$$$computeFftPolynomialProduct(degu, u$$4, degv, v$$1) {\n  const deguv = degu + degv | 0;\n  const bound = deguv + 1 | 0;\n  const patternInput = BigNatModule$002EFFT$$$leastBounding2Power(bound);\n  const w$$4 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(patternInput[1]);\n  const u$$5 = BigNatModule$002EFFT$$$padTo(patternInput[0], u$$4);\n  const v$$2 = BigNatModule$002EFFT$$$padTo(patternInput[0], v$$1);\n  const n$$9 = patternInput[0] | 0;\n  const uT$$2 = BigNatModule$002EFFT$$$computFftInPlace(n$$9, w$$4, u$$5);\n  const vT$$1 = BigNatModule$002EFFT$$$computFftInPlace(n$$9, w$$4, v$$2);\n  const rT$$1 = initialize(n$$9, function (i$$4) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(uT$$2[i$$4], true, 6), fromInteger(vT$$1[i$$4], true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r$$1 = BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$9, w$$4, rT$$1);\n  return map(BigNatModule$002EFFT$002EFp$$$toInt, r$$1, Int32Array);\n}\nexport const BigNatModule$002EFFT$$$mzero = BigNatModule$002EFFT$002EFp$$$mzero;\nexport const BigNatModule$002EFFT$$$mone = BigNatModule$002EFFT$002EFp$$$mone;\nexport const BigNatModule$002EFFT$$$maxFp = (BigNatModule$002EFFT$002EFp$$$p + BigNatModule$002EFFT$002EFp$$$p - BigNatModule$002EFFT$$$mone) % BigNatModule$002EFFT$002EFp$$$p;\nexport function BigNatModule$$$bound(n$$10) {\n  return n$$10.bound;\n}\nexport function BigNatModule$$$setBound(n$$11, v$$3) {\n  n$$11.bound = v$$3;\n}\nexport function BigNatModule$$$coeff(n$$12, i$$5) {\n  return n$$12.digits[i$$5];\n}\nexport function BigNatModule$$$coeff64(n$$13, i$$6) {\n  return fromInteger(BigNatModule$$$coeff(n$$13, i$$6), false, 2);\n}\nexport function BigNatModule$$$setCoeff(n$$14, i$$7, v$$4) {\n  n$$14.digits[i$$7] = v$$4;\n}\nexport function BigNatModule$$$pow64(x$$23, n$$15) {\n  BigNatModule$$$pow64: while (true) {\n    if (n$$15 === 0) {\n      return fromBits(1, 0, false);\n    } else if (n$$15 % 2 === 0) {\n      const $n$$15$$11 = n$$15;\n      const $x$$23$$10 = x$$23;\n      x$$23 = op_Multiply($x$$23$$10, $x$$23$$10);\n      n$$15 = ~~($n$$15$$11 / 2);\n      continue BigNatModule$$$pow64;\n    } else {\n      return op_Multiply(x$$23, BigNatModule$$$pow64(op_Multiply(x$$23, x$$23), ~~(n$$15 / 2)));\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$pow32(x$$24, n$$16) {\n  BigNatModule$$$pow32: while (true) {\n    if (n$$16 === 0) {\n      return 1;\n    } else if (n$$16 % 2 === 0) {\n      const $n$$16$$13 = n$$16;\n      const $x$$24$$12 = x$$24;\n      x$$24 = $x$$24$$12 * $x$$24$$12;\n      n$$16 = ~~($n$$16$$13 / 2);\n      continue BigNatModule$$$pow32;\n    } else {\n      return x$$24 * BigNatModule$$$pow32(x$$24 * x$$24, ~~(n$$16 / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$hash(n$$17) {\n  let res$$2 = 0;\n\n  for (let i$$8 = 0; i$$8 <= n$$17.bound - 1; i$$8++) {\n    res$$2 = n$$17.digits[i$$8] + (res$$2 << 3);\n  }\n\n  return res$$2 | 0;\n}\nexport function BigNatModule$$$maxInt(a, b$$2) {\n  if (a < b$$2) {\n    return b$$2 | 0;\n  } else {\n    return a | 0;\n  }\n}\nexport function BigNatModule$$$minInt(a$$1, b$$3) {\n  if (a$$1 < b$$3) {\n    return a$$1 | 0;\n  } else {\n    return b$$3 | 0;\n  }\n}\nexport const BigNatModule$$$baseBits = 24;\nexport const BigNatModule$$$baseN = 16777216;\nexport const BigNatModule$$$baseMask = 16777215;\nexport const BigNatModule$$$baseNi64 = fromBits(16777216, 0, false);\nexport const BigNatModule$$$baseMaski64 = fromBits(16777215, 0, false);\nexport const BigNatModule$$$baseMaskU = fromBits(16777215, 0, true);\nexport const BigNatModule$$$baseMask32A = 16777215;\nexport const BigNatModule$$$baseMask32B = 255;\nexport const BigNatModule$$$baseShift32B = 24;\nexport const BigNatModule$$$baseMask64A = 16777215;\nexport const BigNatModule$$$baseMask64B = 16777215;\nexport const BigNatModule$$$baseMask64C = 65535;\nexport const BigNatModule$$$baseShift64B = 24;\nexport const BigNatModule$$$baseShift64C = 48;\nexport function BigNatModule$$$divbase(x$$25) {\n  return ~~(x$$25 >>> 0 >>> BigNatModule$$$baseBits);\n}\nexport function BigNatModule$$$modbase(x$$26) {\n  return x$$26 & BigNatModule$$$baseMask;\n}\nexport function BigNatModule$$$createN(b$$4) {\n  return new BigNat(b$$4, new Int32Array(b$$4));\n}\nexport function BigNatModule$$$copyN(x$$27) {\n  return new BigNat(x$$27.bound, copy(x$$27.digits, Int32Array));\n}\nexport function BigNatModule$$$normN(n$$18) {\n  const findLeastBound = function findLeastBound(na, i$$9) {\n    findLeastBound: while (true) {\n      if (i$$9 === -1 ? true : na[i$$9] !== 0) {\n        return i$$9 + 1 | 0;\n      } else {\n        const $i$$9$$15 = i$$9;\n        const $na$$14 = na;\n        na = $na$$14;\n        i$$9 = $i$$9$$15 - 1;\n        continue findLeastBound;\n      }\n\n      break;\n    }\n  };\n\n  const bound$$1 = findLeastBound(n$$18.digits, n$$18.bound - 1) | 0;\n  n$$18.bound = bound$$1;\n  return n$$18;\n}\nexport const BigNatModule$$$boundInt = 2;\nexport const BigNatModule$$$boundInt64 = 3;\nexport const BigNatModule$$$boundBase = 1;\nexport function BigNatModule$$$embed(x$$28) {\n  const x$$29 = (x$$28 < 0 ? 0 : x$$28) | 0;\n\n  if (x$$29 < BigNatModule$$$baseN) {\n    const r$$2 = BigNatModule$$$createN(1);\n    r$$2.digits[0] = x$$29;\n    return BigNatModule$$$normN(r$$2);\n  } else {\n    const r$$3 = BigNatModule$$$createN(BigNatModule$$$boundInt);\n\n    for (let i$$10 = 0; i$$10 <= BigNatModule$$$boundInt - 1; i$$10++) {\n      r$$3.digits[i$$10] = ~~(x$$29 / BigNatModule$$$pow32(BigNatModule$$$baseN, i$$10)) % BigNatModule$$$baseN;\n    }\n\n    return BigNatModule$$$normN(r$$3);\n  }\n}\nexport function BigNatModule$$$embed64(x$$30) {\n  const x$$31 = compare(x$$30, fromBits(0, 0, false)) < 0 ? fromBits(0, 0, false) : x$$30;\n  const r$$4 = BigNatModule$$$createN(BigNatModule$$$boundInt64);\n\n  for (let i$$11 = 0; i$$11 <= BigNatModule$$$boundInt64 - 1; i$$11++) {\n    r$$4.digits[i$$11] = ~~toInt(op_Modulus(op_Division(x$$31, BigNatModule$$$pow64(BigNatModule$$$baseNi64, i$$11)), BigNatModule$$$baseNi64));\n  }\n\n  return BigNatModule$$$normN(r$$4);\n}\nexport function BigNatModule$$$eval32(n$$19) {\n  if (n$$19.bound === 1) {\n    return n$$19.digits[0] | 0;\n  } else {\n    let acc = 0;\n\n    for (let i$$12 = n$$19.bound - 1; i$$12 >= 0; i$$12--) {\n      acc = n$$19.digits[i$$12] + BigNatModule$$$baseN * acc;\n    }\n\n    return acc | 0;\n  }\n}\nexport function BigNatModule$$$eval64(n$$20) {\n  if (n$$20.bound === 1) {\n    return fromInteger(n$$20.digits[0], false, 2);\n  } else {\n    let acc$$1 = fromBits(0, 0, false);\n\n    for (let i$$13 = n$$20.bound - 1; i$$13 >= 0; i$$13--) {\n      acc$$1 = op_Addition(fromInteger(n$$20.digits[i$$13], false, 2), op_Multiply(BigNatModule$$$baseNi64, acc$$1));\n    }\n\n    return acc$$1;\n  }\n}\nexport const BigNatModule$$$one = BigNatModule$$$embed(1);\nexport const BigNatModule$$$zero = BigNatModule$$$embed(0);\nexport function BigNatModule$$$restrictTo(d, n$$21) {\n  return new BigNat(BigNatModule$$$minInt(d, n$$21.bound), n$$21.digits);\n}\nexport function BigNatModule$$$shiftUp(d$$1, n$$22) {\n  const m = BigNatModule$$$createN(n$$22.bound + d$$1);\n\n  for (let i$$14 = 0; i$$14 <= n$$22.bound - 1; i$$14++) {\n    m.digits[i$$14 + d$$1] = n$$22.digits[i$$14];\n  }\n\n  return m;\n}\nexport function BigNatModule$$$shiftDown(d$$2, n$$23) {\n  if (n$$23.bound - d$$2 <= 0) {\n    return BigNatModule$$$zero;\n  } else {\n    const m$$1 = BigNatModule$$$createN(n$$23.bound - d$$2);\n\n    for (let i$$15 = 0; i$$15 <= m$$1.bound - 1; i$$15++) {\n      m$$1.digits[i$$15] = n$$23.digits[i$$15 + d$$2];\n    }\n\n    return m$$1;\n  }\n}\nexport function BigNatModule$$$degree(n$$24) {\n  return n$$24.bound - 1;\n}\nexport function BigNatModule$$$addP(i$$16, n$$25, c, p, q, r$$5) {\n  BigNatModule$$$addP: while (true) {\n    if (i$$16 < n$$25) {\n      const x$$32 = (i$$16 < p.bound ? p.digits[i$$16] : 0) + (i$$16 < q.bound ? q.digits[i$$16] : 0) + c | 0;\n      r$$5.digits[i$$16] = BigNatModule$$$modbase(x$$32);\n      const c$$1 = BigNatModule$$$divbase(x$$32) | 0;\n      const $i$$16$$16 = i$$16;\n      const $n$$25$$17 = n$$25;\n      const $p$$18 = p;\n      const $q$$19 = q;\n      const $r$$5$$20 = r$$5;\n      i$$16 = $i$$16$$16 + 1;\n      n$$25 = $n$$25$$17;\n      c = c$$1;\n      p = $p$$18;\n      q = $q$$19;\n      r$$5 = $r$$5$$20;\n      continue BigNatModule$$$addP;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$add(p$$1, q$$1) {\n  const rbound = 1 + BigNatModule$$$maxInt(p$$1.bound, q$$1.bound) | 0;\n  const r$$6 = BigNatModule$$$createN(rbound);\n  const carry = 0;\n  BigNatModule$$$addP(0, rbound, carry, p$$1, q$$1, r$$6);\n  return BigNatModule$$$normN(r$$6);\n}\nexport function BigNatModule$$$subP(i$$19, n$$26, c$$2, p$$2, q$$2, r$$7) {\n  BigNatModule$$$subP: while (true) {\n    if (i$$19 < n$$26) {\n      const x$$33 = (i$$19 < p$$2.bound ? p$$2.digits[i$$19] : 0) - (i$$19 < q$$2.bound ? q$$2.digits[i$$19] : 0) + c$$2 | 0;\n\n      if (x$$33 > 0) {\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$33);\n        const c$$3 = BigNatModule$$$divbase(x$$33) | 0;\n        const $i$$19$$21 = i$$19;\n        const $n$$26$$22 = n$$26;\n        const $p$$2$$23 = p$$2;\n        const $q$$2$$24 = q$$2;\n        const $r$$7$$25 = r$$7;\n        i$$19 = $i$$19$$21 + 1;\n        n$$26 = $n$$26$$22;\n        c$$2 = c$$3;\n        p$$2 = $p$$2$$23;\n        q$$2 = $q$$2$$24;\n        r$$7 = $r$$7$$25;\n        continue BigNatModule$$$subP;\n      } else {\n        const x$$34 = x$$33 + BigNatModule$$$baseN | 0;\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$34);\n        const c$$4 = BigNatModule$$$divbase(x$$34) - 1 | 0;\n        const $i$$19$$26 = i$$19;\n        const $n$$26$$27 = n$$26;\n        const $p$$2$$28 = p$$2;\n        const $q$$2$$29 = q$$2;\n        const $r$$7$$30 = r$$7;\n        i$$19 = $i$$19$$26 + 1;\n        n$$26 = $n$$26$$27;\n        c$$2 = c$$4;\n        p$$2 = $p$$2$$28;\n        q$$2 = $q$$2$$29;\n        r$$7 = $r$$7$$30;\n        continue BigNatModule$$$subP;\n      }\n    } else {\n      const underflow = c$$2 !== 0;\n      return underflow;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$sub(p$$3, q$$3) {\n  const rbound$$1 = BigNatModule$$$maxInt(p$$3.bound, q$$3.bound) | 0;\n  const r$$8 = BigNatModule$$$createN(rbound$$1);\n  const carry$$1 = 0;\n  const underflow$$1 = BigNatModule$$$subP(0, rbound$$1, carry$$1, p$$3, q$$3, r$$8);\n\n  if (underflow$$1) {\n    return BigNatModule$$$embed(0);\n  } else {\n    return BigNatModule$$$normN(r$$8);\n  }\n}\nexport function BigNatModule$$$isZero(p$$4) {\n  return p$$4.bound === 0;\n}\nexport function BigNatModule$$$IsZero(p$$5) {\n  return BigNatModule$$$isZero(p$$5);\n}\nexport function BigNatModule$$$isOne(p$$6) {\n  if (p$$6.bound === 1) {\n    return p$$6.digits[0] === 1;\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$equal(p$$7, q$$4) {\n  if (p$$7.bound === q$$4.bound) {\n    const check = function check(pa, qa, i$$22) {\n      check: while (true) {\n        if (i$$22 === -1) {\n          return true;\n        } else if (pa[i$$22] === qa[i$$22]) {\n          const $i$$22$$33 = i$$22;\n          const $pa$$31 = pa;\n          const $qa$$32 = qa;\n          pa = $pa$$31;\n          qa = $qa$$32;\n          i$$22 = $i$$22$$33 - 1;\n          continue check;\n        } else {\n          return false;\n        }\n\n        break;\n      }\n    };\n\n    return check(p$$7.digits, q$$4.digits, p$$7.bound - 1);\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$shiftCompare(p$$8, pn, q$$5, qn) {\n  if (p$$8.bound + pn < q$$5.bound + qn) {\n    return -1 | 0;\n  } else if (p$$8.bound + pn > q$$5.bound + pn) {\n    return 1;\n  } else {\n    const check$$1 = function check$$1(pa$$1, qa$$1, i$$23) {\n      check$$1: while (true) {\n        if (i$$23 === -1) {\n          return 0;\n        } else {\n          const pai = (i$$23 < pn ? 0 : pa$$1[i$$23 - pn]) | 0;\n          const qai = (i$$23 < qn ? 0 : qa$$1[i$$23 - qn]) | 0;\n\n          if (pai === qai) {\n            const $i$$23$$36 = i$$23;\n            const $pa$$1$$34 = pa$$1;\n            const $qa$$1$$35 = qa$$1;\n            pa$$1 = $pa$$1$$34;\n            qa$$1 = $qa$$1$$35;\n            i$$23 = $i$$23$$36 - 1;\n            continue check$$1;\n          } else if (pai < qai) {\n            return -1 | 0;\n          } else {\n            return 1;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return check$$1(p$$8.digits, q$$5.digits, p$$8.bound + pn - 1) | 0;\n  }\n}\nexport function BigNatModule$$$compare(p$$9, q$$6) {\n  if (p$$9.bound < q$$6.bound) {\n    return -1 | 0;\n  } else if (p$$9.bound > q$$6.bound) {\n    return 1;\n  } else {\n    const check$$2 = function check$$2(pa$$2, qa$$2, i$$24) {\n      check$$2: while (true) {\n        if (i$$24 === -1) {\n          return 0;\n        } else if (pa$$2[i$$24] === qa$$2[i$$24]) {\n          const $i$$24$$39 = i$$24;\n          const $pa$$2$$37 = pa$$2;\n          const $qa$$2$$38 = qa$$2;\n          pa$$2 = $pa$$2$$37;\n          qa$$2 = $qa$$2$$38;\n          i$$24 = $i$$24$$39 - 1;\n          continue check$$2;\n        } else if (pa$$2[i$$24] < qa$$2[i$$24]) {\n          return -1 | 0;\n        } else {\n          return 1;\n        }\n\n        break;\n      }\n    };\n\n    return check$$2(p$$9.digits, q$$6.digits, p$$9.bound - 1) | 0;\n  }\n}\nexport function BigNatModule$$$lt(p$$10, q$$7) {\n  return BigNatModule$$$compare(p$$10, q$$7) === -1;\n}\nexport function BigNatModule$$$gt(p$$11, q$$8) {\n  return BigNatModule$$$compare(p$$11, q$$8) === 1;\n}\nexport function BigNatModule$$$lte(p$$12, q$$9) {\n  return BigNatModule$$$compare(p$$12, q$$9) !== 1;\n}\nexport function BigNatModule$$$gte(p$$13, q$$10) {\n  return BigNatModule$$$compare(p$$13, q$$10) !== -1;\n}\nexport function BigNatModule$$$min(a$$2, b$$5) {\n  if (BigNatModule$$$lt(a$$2, b$$5)) {\n    return a$$2;\n  } else {\n    return b$$5;\n  }\n}\nexport function BigNatModule$$$max(a$$3, b$$6) {\n  if (BigNatModule$$$lt(a$$3, b$$6)) {\n    return b$$6;\n  } else {\n    return a$$3;\n  }\n}\nexport function BigNatModule$$$contributeArr(a$$4, i$$25, c$$5) {\n  BigNatModule$$$contributeArr: while (true) {\n    const x$$35 = op_Addition(fromInteger(a$$4[i$$25], false, 2), c$$5);\n    const c$$6 = op_Division(x$$35, BigNatModule$$$baseNi64);\n    const x$$38 = ~~toInt(op_BitwiseAnd(x$$35, BigNatModule$$$baseMaski64)) | 0;\n    a$$4[i$$25] = x$$38;\n\n    if (compare(c$$6, fromBits(0, 0, false)) > 0) {\n      const $a$$4$$40 = a$$4;\n      const $i$$25$$41 = i$$25;\n      a$$4 = $a$$4$$40;\n      i$$25 = $i$$25$$41 + 1;\n      c$$5 = c$$6;\n      continue BigNatModule$$$contributeArr;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$scale(k$$2, p$$14) {\n  const rbound$$2 = p$$14.bound + BigNatModule$$$boundInt | 0;\n  const r$$9 = BigNatModule$$$createN(rbound$$2);\n  const k$$3 = fromInteger(k$$2, false, 2);\n\n  for (let i$$26 = 0; i$$26 <= p$$14.bound - 1; i$$26++) {\n    const kpi = op_Multiply(k$$3, fromInteger(p$$14.digits[i$$26], false, 2));\n    BigNatModule$$$contributeArr(r$$9.digits, i$$26, kpi);\n  }\n\n  return BigNatModule$$$normN(r$$9);\n}\nexport function BigNatModule$$$mulSchoolBookBothSmall(p$$15, q$$11) {\n  const r$$11 = BigNatModule$$$createN(2);\n  const rak = op_Multiply(fromInteger(p$$15, false, 2), fromInteger(q$$11, false, 2));\n  BigNatModule$$$setCoeff(r$$11, 0, ~~toInt(op_BitwiseAnd(rak, BigNatModule$$$baseMaski64)));\n  BigNatModule$$$setCoeff(r$$11, 1, ~~toInt(op_Division(rak, BigNatModule$$$baseNi64)));\n  return BigNatModule$$$normN(r$$11);\n}\nexport function BigNatModule$$$mulSchoolBookCarry(r$$12, c$$8, k$$4) {\n  BigNatModule$$$mulSchoolBookCarry: while (true) {\n    if (compare(c$$8, fromBits(0, 0, false)) > 0) {\n      const rak$$1 = op_Addition(BigNatModule$$$coeff64(r$$12, k$$4), c$$8);\n      BigNatModule$$$setCoeff(r$$12, k$$4, ~~toInt(op_BitwiseAnd(rak$$1, BigNatModule$$$baseMaski64)));\n      const $k$$4$$43 = k$$4;\n      const $r$$12$$42 = r$$12;\n      r$$12 = $r$$12$$42;\n      c$$8 = op_Division(rak$$1, BigNatModule$$$baseNi64);\n      k$$4 = $k$$4$$43 + 1;\n      continue BigNatModule$$$mulSchoolBookCarry;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$mulSchoolBookOneSmall(p$$16, q$$12) {\n  const bp = BigNatModule$$$bound(p$$16) | 0;\n  const rbound$$3 = bp + 1 | 0;\n  const r$$13 = BigNatModule$$$createN(rbound$$3);\n  const q$$13 = fromInteger(q$$12, false, 2);\n  let c$$9 = fromBits(0, 0, false);\n\n  for (let i$$28 = 0; i$$28 <= bp - 1; i$$28++) {\n    const rak$$2 = op_Addition(op_Addition(c$$9, BigNatModule$$$coeff64(r$$13, i$$28)), op_Multiply(BigNatModule$$$coeff64(p$$16, i$$28), q$$13));\n    BigNatModule$$$setCoeff(r$$13, i$$28, ~~toInt(op_BitwiseAnd(rak$$2, BigNatModule$$$baseMaski64)));\n    c$$9 = op_Division(rak$$2, BigNatModule$$$baseNi64);\n  }\n\n  BigNatModule$$$mulSchoolBookCarry(r$$13, c$$9, bp);\n  return BigNatModule$$$normN(r$$13);\n}\nexport function BigNatModule$$$mulSchoolBookNeitherSmall(p$$17, q$$14) {\n  const rbound$$4 = p$$17.bound + q$$14.bound | 0;\n  const r$$14 = BigNatModule$$$createN(rbound$$4);\n  const ra = r$$14.digits;\n  const pa$$3 = p$$17.digits;\n  const qa$$3 = q$$14.digits;\n\n  for (let i$$29 = 0; i$$29 <= p$$17.bound - 1; i$$29++) {\n    const pai$$1 = fromInteger(pa$$3[i$$29], false, 2);\n    let c$$10 = fromBits(0, 0, false);\n    let k$$5 = i$$29 | 0;\n\n    for (let j$$1 = 0; j$$1 <= q$$14.bound - 1; j$$1++) {\n      const qaj = fromInteger(qa$$3[j$$1], false, 2);\n      const rak$$3 = op_Addition(op_Addition(fromInteger(ra[k$$5], false, 2), c$$10), op_Multiply(pai$$1, qaj));\n      ra[k$$5] = ~~toInt(op_BitwiseAnd(rak$$3, BigNatModule$$$baseMaski64));\n      c$$10 = op_Division(rak$$3, BigNatModule$$$baseNi64);\n      k$$5 = k$$5 + 1;\n    }\n\n    BigNatModule$$$mulSchoolBookCarry(r$$14, c$$10, k$$5);\n  }\n\n  return BigNatModule$$$normN(r$$14);\n}\nexport function BigNatModule$$$mulSchoolBook(p$$18, q$$15) {\n  const pSmall = BigNatModule$$$bound(p$$18) === 1;\n  const qSmall = BigNatModule$$$bound(q$$15) === 1;\n\n  if (pSmall ? qSmall : false) {\n    return BigNatModule$$$mulSchoolBookBothSmall(BigNatModule$$$coeff(p$$18, 0), BigNatModule$$$coeff(q$$15, 0));\n  } else if (pSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(q$$15, BigNatModule$$$coeff(p$$18, 0));\n  } else if (qSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(p$$18, BigNatModule$$$coeff(q$$15, 0));\n  } else {\n    return BigNatModule$$$mulSchoolBookNeitherSmall(p$$18, q$$15);\n  }\n}\nexport const BigNatModule$002Eencoding = declare(function BigInt_BigNatModule_encoding(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n  this.bigL = arg1 | 0;\n  this.twoToBigL = arg2 | 0;\n  this.k = arg3 | 0;\n  this.bigK = arg4 | 0;\n  this.bigN = arg5 | 0;\n  this.split = arg6 | 0;\n  this.splits = arg7;\n}, Record);\nexport function BigNatModule$002Eencoding$reflection() {\n  return record(\"BigInt.BigNatModule.encoding\", [], BigNatModule$002Eencoding, () => [[\"bigL\", int32], [\"twoToBigL\", int32], [\"k\", int32], [\"bigK\", int32], [\"bigN\", int32], [\"split\", int32], [\"splits\", array(int32)]]);\n}\nexport function BigNatModule$$$mkEncoding(bigL, k$$6, bigK$$2, bigN) {\n  return new BigNatModule$002Eencoding(bigL, BigNatModule$$$pow32(2, bigL), k$$6, bigK$$2, bigN, ~~(BigNatModule$$$baseBits / bigL), initialize(~~(BigNatModule$$$baseBits / bigL), function (i$$30) {\n    return BigNatModule$$$pow32(2, bigL * i$$30);\n  }, Int32Array));\n}\nexport const BigNatModule$$$table = [BigNatModule$$$mkEncoding(1, 28, 268435456, 268435456), BigNatModule$$$mkEncoding(2, 26, 67108864, 134217728), BigNatModule$$$mkEncoding(3, 24, 16777216, 50331648), BigNatModule$$$mkEncoding(4, 22, 4194304, 16777216), BigNatModule$$$mkEncoding(5, 20, 1048576, 5242880), BigNatModule$$$mkEncoding(6, 18, 262144, 1572864), BigNatModule$$$mkEncoding(7, 16, 65536, 458752), BigNatModule$$$mkEncoding(8, 14, 16384, 131072), BigNatModule$$$mkEncoding(9, 12, 4096, 36864), BigNatModule$$$mkEncoding(10, 10, 1024, 10240), BigNatModule$$$mkEncoding(11, 8, 256, 2816), BigNatModule$$$mkEncoding(12, 6, 64, 768), BigNatModule$$$mkEncoding(13, 4, 16, 208)];\nexport function BigNatModule$$$calculateTableTow(bigL$$1) {\n  const k$$7 = BigNatModule$002EFFT$$$maxBitsInsideFp - 2 * bigL$$1 | 0;\n  const bigK$$3 = BigNatModule$$$pow64(fromBits(2, 0, false), k$$7);\n  const N = op_Multiply(bigK$$3, fromInteger(bigL$$1, false, 2));\n  return [bigL$$1, k$$7, bigK$$3, N];\n}\nexport function BigNatModule$$$encodingGivenResultBits(bitsRes) {\n  const selectFrom = function selectFrom(i$$31) {\n    selectFrom: while (true) {\n      if (i$$31 + 1 < BigNatModule$$$table.length ? bitsRes < BigNatModule$$$table[i$$31 + 1].bigN : false) {\n        const $i$$31$$44 = i$$31;\n        i$$31 = $i$$31$$44 + 1;\n        continue selectFrom;\n      } else {\n        return BigNatModule$$$table[i$$31];\n      }\n\n      break;\n    }\n  };\n\n  if (bitsRes >= BigNatModule$$$table[0].bigN) {\n    throw new Error(\"Product is huge, around 268435456 bits, beyond quickmul\");\n  } else {\n    return selectFrom(0);\n  }\n}\nexport const BigNatModule$$$bitmask = initialize(BigNatModule$$$baseBits, function (i$$32) {\n  return BigNatModule$$$pow32(2, i$$32) - 1;\n}, Int32Array);\nexport const BigNatModule$$$twopowers = initialize(BigNatModule$$$baseBits, function (i$$33) {\n  return BigNatModule$$$pow32(2, i$$33);\n}, Int32Array);\nexport const BigNatModule$$$twopowersI64 = initialize(BigNatModule$$$baseBits, function (i$$34) {\n  return BigNatModule$$$pow64(fromBits(2, 0, false), i$$34);\n}, Array);\nexport function BigNatModule$$$wordBits(word) {\n  const hi = function hi(k$$8) {\n    hi: while (true) {\n      if (k$$8 === 0) {\n        return 0;\n      } else if ((word & BigNatModule$$$twopowers[k$$8 - 1]) !== 0) {\n        return k$$8 | 0;\n      } else {\n        const $k$$8$$45 = k$$8;\n        k$$8 = $k$$8$$45 - 1;\n        continue hi;\n      }\n\n      break;\n    }\n  };\n\n  return hi(BigNatModule$$$baseBits) | 0;\n}\nexport function BigNatModule$$$bits(u$$6) {\n  if (u$$6.bound === 0) {\n    return 0;\n  } else {\n    return BigNatModule$$$degree(u$$6) * BigNatModule$$$baseBits + BigNatModule$$$wordBits(u$$6.digits[BigNatModule$$$degree(u$$6)]) | 0;\n  }\n}\nexport function BigNatModule$$$extractBits(n$$27, enc, bi) {\n  const bj = bi + enc.bigL - 1 | 0;\n  const biw = ~~(bi / BigNatModule$$$baseBits) | 0;\n  const bjw = ~~(bj / BigNatModule$$$baseBits) | 0;\n\n  if (biw !== bjw) {\n    const x$$47 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const y$$17 = (bjw < n$$27.bound ? n$$27.digits[bjw] : 0) | 0;\n    const xbit = bi % BigNatModule$$$baseBits | 0;\n    const nxbits = BigNatModule$$$baseBits - xbit | 0;\n    const x$$48 = x$$47 >> xbit | 0;\n    const y$$18 = y$$17 << nxbits | 0;\n    const x$$49 = x$$48 | y$$18 | 0;\n    const x$$50 = x$$49 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$50 | 0;\n  } else {\n    const x$$51 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const xbit$$1 = bi % BigNatModule$$$baseBits | 0;\n    const x$$52 = x$$51 >> xbit$$1 | 0;\n    const x$$53 = x$$52 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$53 | 0;\n  }\n}\nexport function BigNatModule$$$encodePoly(enc$$1, n$$28) {\n  const poly = fill(new Uint32Array(enc$$1.bigK), 0, enc$$1.bigK, BigNatModule$002EFFT$002EFp$$$ofInt32(0));\n  const biMax = n$$28.bound * BigNatModule$$$baseBits | 0;\n\n  const encoder = function encoder(i$$38, bi$$1) {\n    encoder: while (true) {\n      if (i$$38 === enc$$1.bigK ? true : bi$$1 > biMax) {} else {\n        const pi = BigNatModule$$$extractBits(n$$28, enc$$1, bi$$1) | 0;\n        poly[i$$38] = BigNatModule$002EFFT$002EFp$$$ofInt32(pi);\n        const i$$39 = i$$38 + 1 | 0;\n        const bi$$2 = bi$$1 + enc$$1.bigL | 0;\n        i$$38 = i$$39;\n        bi$$1 = bi$$2;\n        continue encoder;\n      }\n\n      break;\n    }\n  };\n\n  encoder(0, 0);\n  return poly;\n}\nexport function BigNatModule$$$decodeResultBits(enc$$2, poly$$1) {\n  let n$$29 = 0;\n\n  for (let i$$40 = 0; i$$40 <= poly$$1.length - 1; i$$40++) {\n    if (poly$$1[i$$40] !== BigNatModule$002EFFT$$$mzero) {\n      n$$29 = i$$40;\n    }\n  }\n\n  const rbits = BigNatModule$002EFFT$$$maxBitsInsideFp + enc$$2.bigL * n$$29 + 1 | 0;\n  return rbits + 1 | 0;\n}\nexport function BigNatModule$$$decodePoly(enc$$3, poly$$2) {\n  const rbound$$5 = ~~(BigNatModule$$$decodeResultBits(enc$$3, poly$$2) / BigNatModule$$$baseBits) + 1 | 0;\n  const r$$15 = BigNatModule$$$createN(rbound$$5);\n\n  const evaluate = function evaluate(i$$41, j$$2, d$$3) {\n    evaluate: while (true) {\n      if (i$$41 === enc$$3.bigK) {} else {\n        if (j$$2 >= rbound$$5) {} else {\n          const x$$54 = op_Multiply(fromInteger(BigNatModule$002EFFT$002EFp$$$toInt(poly$$2[i$$41]), false, 2), BigNatModule$$$twopowersI64[d$$3]);\n          BigNatModule$$$contributeArr(r$$15.digits, j$$2, x$$54);\n        }\n\n        const i$$43 = i$$41 + 1 | 0;\n        const d$$4 = d$$3 + enc$$3.bigL | 0;\n        const patternInput$$1 = d$$4 >= BigNatModule$$$baseBits ? [j$$2 + 1, d$$4 - BigNatModule$$$baseBits] : [j$$2, d$$4];\n        i$$41 = i$$43;\n        j$$2 = patternInput$$1[0];\n        d$$3 = patternInput$$1[1];\n        continue evaluate;\n      }\n\n      break;\n    }\n  };\n\n  evaluate(0, 0, 0);\n  return BigNatModule$$$normN(r$$15);\n}\nexport function BigNatModule$$$quickMulUsingFft(u$$7, v$$5) {\n  const bitsRes$$1 = BigNatModule$$$bits(u$$7) + BigNatModule$$$bits(v$$5) | 0;\n  const enc$$4 = BigNatModule$$$encodingGivenResultBits(bitsRes$$1);\n  const upoly = BigNatModule$$$encodePoly(enc$$4, u$$7);\n  const vpoly = BigNatModule$$$encodePoly(enc$$4, v$$5);\n  const rpoly = BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(enc$$4.bigK, enc$$4.k, upoly, vpoly);\n  const r$$17 = BigNatModule$$$decodePoly(enc$$4, rpoly);\n  return BigNatModule$$$normN(r$$17);\n}\nexport const BigNatModule$$$minDigitsKaratsuba = 16;\nexport function BigNatModule$$$recMulKaratsuba(mul, p$$19, q$$16) {\n  const bp$$1 = p$$19.bound | 0;\n  const bq = q$$16.bound | 0;\n  const bmax = BigNatModule$$$maxInt(bp$$1, bq) | 0;\n\n  if (bmax > BigNatModule$$$minDigitsKaratsuba) {\n    const k$$9 = ~~(bmax / 2) | 0;\n    const a0 = BigNatModule$$$restrictTo(k$$9, p$$19);\n    const a1 = BigNatModule$$$shiftDown(k$$9, p$$19);\n    const b0 = BigNatModule$$$restrictTo(k$$9, q$$16);\n    const b1 = BigNatModule$$$shiftDown(k$$9, q$$16);\n    const q0 = mul(a0, b0);\n    const q1 = mul(BigNatModule$$$add(a0, a1), BigNatModule$$$add(b0, b1));\n    const q2 = mul(a1, b1);\n    const p0 = q0;\n    const p1 = BigNatModule$$$sub(q1, BigNatModule$$$add(q0, q2));\n    const p2 = q2;\n    const r$$18 = BigNatModule$$$add(p0, BigNatModule$$$shiftUp(k$$9, BigNatModule$$$add(p1, BigNatModule$$$shiftUp(k$$9, p2))));\n    return r$$18;\n  } else {\n    return BigNatModule$$$mulSchoolBook(p$$19, q$$16);\n  }\n}\nexport function BigNatModule$$$mulKaratsuba(x$$55, y$$19) {\n  return BigNatModule$$$recMulKaratsuba(BigNatModule$$$mulKaratsuba, x$$55, y$$19);\n}\nexport const BigNatModule$$$productDigitsUpperSchoolBook = ~~(64000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$singleDigitForceSchoolBook = ~~(32000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$productDigitsUpperFft = ~~(BigNatModule$$$table[0].bigN / BigNatModule$$$baseBits);\nexport function BigNatModule$$$mul(p$$20, q$$17) {\n  return BigNatModule$$$mulSchoolBook(p$$20, q$$17);\n}\nexport function BigNatModule$$$scaleSubInPlace(x$$57, f, a$$5, n$$30) {\n  const invariant = function invariant(tupledArg) {};\n\n  const xres = x$$57;\n  const patternInput$$2 = [x$$57.digits, BigNatModule$$$degree(x$$57)];\n  const patternInput$$3 = [a$$5.digits, BigNatModule$$$degree(a$$5)];\n  const f$$1 = fromInteger(f, false, 2);\n  let j$$4 = 0;\n  let z$$7 = op_Multiply(f$$1, fromInteger(patternInput$$3[0][0], false, 2));\n\n  while (compare(z$$7, fromBits(0, 0, false)) > 0 ? true : j$$4 < patternInput$$3[1]) {\n    if (j$$4 > patternInput$$2[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    invariant([z$$7, j$$4, n$$30]);\n    let zLo = ~~toInt(op_BitwiseAnd(z$$7, BigNatModule$$$baseMaski64)) | 0;\n    let zHi = op_Division(z$$7, BigNatModule$$$baseNi64);\n\n    if (zLo <= patternInput$$2[0][j$$4 + n$$30]) {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] - zLo;\n    } else {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] + (BigNatModule$$$baseN - zLo);\n      zHi = op_Addition(zHi, fromBits(1, 0, false));\n    }\n\n    if (j$$4 < patternInput$$3[1]) {\n      z$$7 = op_Addition(zHi, op_Multiply(f$$1, fromInteger(patternInput$$3[0][j$$4 + 1], false, 2)));\n    } else {\n      z$$7 = zHi;\n    }\n\n    j$$4 = j$$4 + 1;\n  }\n\n  BigNatModule$$$normN(xres), null;\n}\nexport function BigNatModule$$$scaleSub(x$$61, f$$2, a$$7, n$$31) {\n  const freshx = BigNatModule$$$add(x$$61, BigNatModule$$$zero);\n  BigNatModule$$$scaleSubInPlace(freshx, f$$2, a$$7, n$$31);\n  return BigNatModule$$$normN(freshx);\n}\nexport function BigNatModule$$$scaleAddInPlace(x$$62, f$$3, a$$8, n$$32) {\n  const invariant$$1 = function invariant$$1(tupledArg$$1) {};\n\n  const xres$$1 = x$$62;\n  const patternInput$$4 = [x$$62.digits, BigNatModule$$$degree(x$$62)];\n  const patternInput$$5 = [a$$8.digits, BigNatModule$$$degree(a$$8)];\n  const f$$4 = fromInteger(f$$3, false, 2);\n  let j$$5 = 0;\n  let z$$8 = op_Multiply(f$$4, fromInteger(patternInput$$5[0][0], false, 2));\n\n  while (compare(z$$8, fromBits(0, 0, false)) > 0 ? true : j$$5 < patternInput$$5[1]) {\n    if (j$$5 > patternInput$$4[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    invariant$$1([z$$8, j$$5, n$$32]);\n    let zLo$$1 = ~~toInt(op_BitwiseAnd(z$$8, BigNatModule$$$baseMaski64)) | 0;\n    let zHi$$1 = op_Division(z$$8, BigNatModule$$$baseNi64);\n\n    if (zLo$$1 < BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]) {\n      patternInput$$4[0][j$$5 + n$$32] = patternInput$$4[0][j$$5 + n$$32] + zLo$$1;\n    } else {\n      patternInput$$4[0][j$$5 + n$$32] = zLo$$1 - (BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]);\n      zHi$$1 = op_Addition(zHi$$1, fromBits(1, 0, false));\n    }\n\n    if (j$$5 < patternInput$$5[1]) {\n      z$$8 = op_Addition(zHi$$1, op_Multiply(f$$4, fromInteger(patternInput$$5[0][j$$5 + 1], false, 2)));\n    } else {\n      z$$8 = zHi$$1;\n    }\n\n    j$$5 = j$$5 + 1;\n  }\n\n  BigNatModule$$$normN(xres$$1), null;\n}\nexport function BigNatModule$$$scaleAdd(x$$66, f$$5, a$$10, n$$33) {\n  const freshx$$1 = BigNatModule$$$add(x$$66, BigNatModule$$$zero);\n  BigNatModule$$$scaleAddInPlace(freshx$$1, f$$5, a$$10, n$$33);\n  return BigNatModule$$$normN(freshx$$1);\n}\nexport function BigNatModule$$$removeFactor(x$$67, a$$11, n$$34) {\n  const patternInput$$6 = [BigNatModule$$$degree(a$$11), BigNatModule$$$degree(x$$67)];\n\n  if (patternInput$$6[1] < patternInput$$6[0] + n$$34) {\n    return 0;\n  } else {\n    const patternInput$$7 = [a$$11.digits, x$$67.digits];\n    let f$$6;\n\n    if (patternInput$$6[0] === 0) {\n      if (patternInput$$6[1] === n$$34) {\n        f$$6 = ~~(patternInput$$7[1][n$$34] / patternInput$$7[0][0]);\n      } else {\n        const f64 = op_Division(op_Addition(op_Multiply(fromInteger(patternInput$$7[1][patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(patternInput$$7[1][patternInput$$6[1] - 1], false, 2)), fromInteger(patternInput$$7[0][0], false, 2));\n        f$$6 = ~~toInt(f64);\n      }\n    } else if (patternInput$$6[1] === patternInput$$6[0] + n$$34) {\n      f$$6 = ~~(patternInput$$7[1][patternInput$$6[1]] / (patternInput$$7[0][patternInput$$6[0]] + 1));\n    } else {\n      const f64$$1 = op_Division(op_Addition(op_Multiply(fromInteger(patternInput$$7[1][patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(patternInput$$7[1][patternInput$$6[1] - 1], false, 2)), op_Addition(fromInteger(patternInput$$7[0][patternInput$$6[0]], false, 2), fromBits(1, 0, false)));\n      f$$6 = ~~toInt(f64$$1);\n    }\n\n    if (f$$6 === 0) {\n      const lte = BigNatModule$$$shiftCompare(a$$11, n$$34, x$$67, 0) !== 1;\n\n      if (lte) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else {\n      return f$$6 | 0;\n    }\n  }\n}\nexport function BigNatModule$$$divmod(b$$7, a$$12) {\n  if (BigNatModule$$$isZero(a$$12)) {\n    throw new Error();\n  } else if (BigNatModule$$$degree(b$$7) < BigNatModule$$$degree(a$$12)) {\n    return [BigNatModule$$$zero, b$$7];\n  } else {\n    const x$$68 = BigNatModule$$$copyN(b$$7);\n    const d$$6 = BigNatModule$$$createN(BigNatModule$$$degree(b$$7) - BigNatModule$$$degree(a$$12) + 1 + 1);\n    let p$$21 = BigNatModule$$$degree(b$$7) | 0;\n    const m$$2 = BigNatModule$$$degree(a$$12) | 0;\n    let n$$35 = p$$21 - m$$2 | 0;\n\n    const Invariant = function Invariant(tupledArg$$2) {};\n\n    let finished = false;\n\n    while (!finished) {\n      Invariant([d$$6, x$$68, n$$35, p$$21]);\n      const f$$7 = BigNatModule$$$removeFactor(x$$68, a$$12, n$$35) | 0;\n\n      if (f$$7 > 0) {\n        BigNatModule$$$scaleSubInPlace(x$$68, f$$7, a$$12, n$$35);\n        BigNatModule$$$scaleAddInPlace(d$$6, f$$7, BigNatModule$$$one, n$$35);\n        Invariant([d$$6, x$$68, n$$35, p$$21]);\n      } else {\n        finished = f$$7 === 0 ? n$$35 === 0 : false;\n\n        if (!finished) {\n          if (p$$21 === m$$2 + n$$35) {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21]);\n            n$$35 = n$$35 - 1;\n          } else {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21 - 1]);\n            n$$35 = n$$35 - 1;\n            p$$21 = p$$21 - 1;\n          }\n        }\n      }\n    }\n\n    return [BigNatModule$$$normN(d$$6), BigNatModule$$$normN(x$$68)];\n  }\n}\nexport function BigNatModule$$$div(b$$8, a$$13) {\n  return BigNatModule$$$divmod(b$$8, a$$13)[0];\n}\nexport function BigNatModule$$$rem(b$$9, a$$14) {\n  return BigNatModule$$$divmod(b$$9, a$$14)[1];\n}\nexport function BigNatModule$$$bitAnd(a$$15, b$$10) {\n  const rbound$$6 = BigNatModule$$$minInt(a$$15.bound, b$$10.bound) | 0;\n  const r$$19 = BigNatModule$$$createN(rbound$$6);\n\n  for (let i$$44 = 0; i$$44 <= r$$19.bound - 1; i$$44++) {\n    r$$19.digits[i$$44] = a$$15.digits[i$$44] & b$$10.digits[i$$44];\n  }\n\n  return BigNatModule$$$normN(r$$19);\n}\nexport function BigNatModule$$$bitOr(a$$16, b$$11) {\n  const rbound$$7 = BigNatModule$$$maxInt(a$$16.bound, b$$11.bound) | 0;\n  const r$$20 = BigNatModule$$$createN(rbound$$7);\n\n  for (let i$$45 = 0; i$$45 <= a$$16.bound - 1; i$$45++) {\n    r$$20.digits[i$$45] = r$$20.digits[i$$45] | a$$16.digits[i$$45];\n  }\n\n  for (let i$$46 = 0; i$$46 <= b$$11.bound - 1; i$$46++) {\n    r$$20.digits[i$$46] = r$$20.digits[i$$46] | b$$11.digits[i$$46];\n  }\n\n  return BigNatModule$$$normN(r$$20);\n}\nexport function BigNatModule$$$bitXor(a$$17, b$$12) {\n  const rbound$$8 = BigNatModule$$$maxInt(a$$17.bound, b$$12.bound) | 0;\n  const r$$21 = BigNatModule$$$createN(rbound$$8);\n\n  for (let i$$47 = 0; i$$47 <= a$$17.bound - 1; i$$47++) {\n    r$$21.digits[i$$47] = r$$21.digits[i$$47] ^ a$$17.digits[i$$47];\n  }\n\n  for (let i$$48 = 0; i$$48 <= b$$12.bound - 1; i$$48++) {\n    r$$21.digits[i$$48] = r$$21.digits[i$$48] ^ b$$12.digits[i$$48];\n  }\n\n  return BigNatModule$$$normN(r$$21);\n}\nexport function BigNatModule$$$hcf(a$$18, b$$13) {\n  const hcfloop = function hcfloop(a$$19, b$$14) {\n    hcfloop: while (true) {\n      if (BigNatModule$$$equal(BigNatModule$$$zero, a$$19)) {\n        return b$$14;\n      } else {\n        const patternInput$$8 = BigNatModule$$$divmod(b$$14, a$$19);\n        const $a$$19$$49 = a$$19;\n        a$$19 = patternInput$$8[1];\n        b$$14 = $a$$19$$49;\n        continue hcfloop;\n      }\n\n      break;\n    }\n  };\n\n  if (BigNatModule$$$lt(a$$18, b$$13)) {\n    return hcfloop(a$$18, b$$13);\n  } else {\n    return hcfloop(b$$13, a$$18);\n  }\n}\nexport const BigNatModule$$$two = BigNatModule$$$embed(2);\nexport function BigNatModule$$$powi(x$$69, n$$36) {\n  const power = function power(acc$$2, x$$70, n$$37) {\n    power: while (true) {\n      if (n$$37 === 0) {\n        return acc$$2;\n      } else if (n$$37 % 2 === 0) {\n        const $acc$$2$$50 = acc$$2;\n        const $n$$37$$52 = n$$37;\n        const $x$$70$$51 = x$$70;\n        acc$$2 = $acc$$2$$50;\n        x$$70 = BigNatModule$$$mul($x$$70$$51, $x$$70$$51);\n        n$$37 = ~~($n$$37$$52 / 2);\n        continue power;\n      } else {\n        const $acc$$2$$53 = acc$$2;\n        const $n$$37$$55 = n$$37;\n        const $x$$70$$54 = x$$70;\n        acc$$2 = BigNatModule$$$mul($x$$70$$54, $acc$$2$$53);\n        x$$70 = BigNatModule$$$mul($x$$70$$54, $x$$70$$54);\n        n$$37 = ~~($n$$37$$55 / 2);\n        continue power;\n      }\n\n      break;\n    }\n  };\n\n  return power(BigNatModule$$$one, x$$69, n$$36);\n}\nexport function BigNatModule$$$pow(x$$71, n$$38) {\n  const power$$1 = function power$$1(acc$$3, x$$72, n$$39) {\n    power$$1: while (true) {\n      if (BigNatModule$$$isZero(n$$39)) {\n        return acc$$3;\n      } else {\n        const patternInput$$9 = BigNatModule$$$divmod(n$$39, BigNatModule$$$two);\n\n        if (BigNatModule$$$isZero(patternInput$$9[1])) {\n          const $acc$$3$$56 = acc$$3;\n          const $x$$72$$57 = x$$72;\n          acc$$3 = $acc$$3$$56;\n          x$$72 = BigNatModule$$$mul($x$$72$$57, $x$$72$$57);\n          n$$39 = patternInput$$9[0];\n          continue power$$1;\n        } else {\n          const $acc$$3$$58 = acc$$3;\n          const $x$$72$$59 = x$$72;\n          acc$$3 = BigNatModule$$$mul($x$$72$$59, $acc$$3$$58);\n          x$$72 = BigNatModule$$$mul($x$$72$$59, $x$$72$$59);\n          n$$39 = patternInput$$9[0];\n          continue power$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return power$$1(BigNatModule$$$one, x$$71, n$$38);\n}\nexport function BigNatModule$$$toFloat(n$$40) {\n  const basef = BigNatModule$$$baseN;\n\n  const evalFloat = function evalFloat(acc$$4, k$$10, i$$49) {\n    evalFloat: while (true) {\n      if (i$$49 === n$$40.bound) {\n        return acc$$4;\n      } else {\n        const $acc$$4$$60 = acc$$4;\n        const $i$$49$$62 = i$$49;\n        const $k$$10$$61 = k$$10;\n        acc$$4 = $acc$$4$$60 + $k$$10$$61 * n$$40.digits[$i$$49$$62];\n        k$$10 = $k$$10$$61 * basef;\n        i$$49 = $i$$49$$62 + 1;\n        continue evalFloat;\n      }\n\n      break;\n    }\n  };\n\n  return evalFloat(0, 1, 0);\n}\nexport function BigNatModule$$$ofInt32(n$$41) {\n  return BigNatModule$$$embed(n$$41);\n}\nexport function BigNatModule$$$ofInt64(n$$42) {\n  return BigNatModule$$$embed64(n$$42);\n}\nexport function BigNatModule$$$toUInt32(n$$43) {\n  const matchValue = n$$43.bound | 0;\n\n  switch (matchValue) {\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        return n$$43.digits[0] >>> 0;\n      }\n\n    case 2:\n      {\n        const patternInput$$10 = [n$$43.digits[0], n$$43.digits[1]];\n\n        if (patternInput$$10[1] > BigNatModule$$$baseMask32B) {\n          throw new Error();\n        }\n\n        return ((patternInput$$10[0] & BigNatModule$$$baseMask32A) >>> 0) + ((patternInput$$10[1] & BigNatModule$$$baseMask32B) >>> 0 << BigNatModule$$$baseShift32B >>> 0);\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toUInt64(n$$44) {\n  const matchValue$$1 = n$$44.bound | 0;\n\n  switch (matchValue$$1) {\n    case 0:\n      {\n        return fromBits(0, 0, true);\n      }\n\n    case 1:\n      {\n        return fromInteger(n$$44.digits[0], true, 2);\n      }\n\n    case 2:\n      {\n        const patternInput$$11 = [n$$44.digits[0], n$$44.digits[1]];\n        return op_Addition(fromInteger(patternInput$$11[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$11[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B));\n      }\n\n    case 3:\n      {\n        const patternInput$$12 = [n$$44.digits[0], n$$44.digits[1], n$$44.digits[2]];\n\n        if (patternInput$$12[2] > BigNatModule$$$baseMask64C) {\n          throw new Error();\n        }\n\n        return op_Addition(op_Addition(fromInteger(patternInput$$12[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$12[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B)), op_LeftShift(fromInteger(patternInput$$12[2] & BigNatModule$$$baseMask64C, true, 2), BigNatModule$$$baseShift64C));\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toString(n$$45) {\n  const degn = BigNatModule$$$degree(n$$45) | 0;\n\n  const route = function route(prior, k$$11, ten2k) {\n    route: while (true) {\n      if (BigNatModule$$$degree(ten2k) > degn) {\n        return new List([k$$11, ten2k], prior);\n      } else {\n        const $k$$11$$64 = k$$11;\n        const $prior$$63 = prior;\n        const $ten2k$$65 = ten2k;\n        prior = new List([$k$$11$$64, $ten2k$$65], $prior$$63);\n        k$$11 = $k$$11$$64 + 1;\n        ten2k = BigNatModule$$$mul($ten2k$$65, $ten2k$$65);\n        continue route;\n      }\n\n      break;\n    }\n  };\n\n  const kten2ks = route(new List(), 0, BigNatModule$$$embed(10));\n\n  const collect = function collect(isLeading, digits, n$$46, _arg1$$3) {\n    if (_arg1$$3.tail != null) {\n      const ten2k$$1 = _arg1$$3.head[1];\n      const prior$$1 = _arg1$$3.tail;\n      const patternInput$$13 = BigNatModule$$$divmod(n$$46, ten2k$$1);\n\n      if (isLeading ? BigNatModule$$$isZero(patternInput$$13[0]) : false) {\n        const digits$$1 = collect(isLeading, digits, patternInput$$13[1], prior$$1);\n        return digits$$1;\n      } else {\n        const digits$$2 = collect(false, digits, patternInput$$13[1], prior$$1);\n        const digits$$3 = collect(isLeading, digits$$2, patternInput$$13[0], prior$$1);\n        return digits$$3;\n      }\n    } else {\n      const n$$47 = BigNatModule$$$eval32(n$$46) | 0;\n\n      if (isLeading ? n$$47 === 0 : false) {\n        return digits;\n      } else {\n        return new List(int32ToString(n$$47), digits);\n      }\n    }\n  };\n\n  const prior$$2 = kten2ks;\n  const digits$$4 = collect(true, new List(), n$$45, prior$$2);\n\n  if (digits$$4.tail == null) {\n    return \"0\";\n  } else {\n    return join(\"\", ...ofList(digits$$4, Array));\n  }\n}\nexport function BigNatModule$$$ofString(str) {\n  const len = str.length | 0;\n\n  if (isNullOrEmpty(str)) {\n    throw new Error(\"empty string\\\\nParameter name: str\");\n  }\n\n  const ten = BigNatModule$$$embed(10);\n\n  const build = function build(acc$$5, i$$50) {\n    build: while (true) {\n      if (i$$50 === len) {\n        return acc$$5;\n      } else {\n        const c$$12 = str[i$$50];\n        const d$$7 = c$$12.charCodeAt(0) - \"0\".charCodeAt(0) | 0;\n\n        if (0 <= d$$7 ? d$$7 <= 9 : false) {\n          const $acc$$5$$66 = acc$$5;\n          const $i$$50$$67 = i$$50;\n          acc$$5 = BigNatModule$$$add(BigNatModule$$$mul(ten, $acc$$5$$66), BigNatModule$$$embed(d$$7));\n          i$$50 = $i$$50$$67 + 1;\n          continue build;\n        } else {\n          throw new Error();\n        }\n      }\n\n      break;\n    }\n  };\n\n  return build(BigNatModule$$$embed(0), 0);\n}\nexport function BigNatModule$$$isSmall(n$$48) {\n  return n$$48.bound <= 1;\n}\nexport function BigNatModule$$$getSmall(n$$49) {\n  if (0 < n$$49.bound) {\n    return n$$49.digits[0] | 0;\n  } else {\n    return 0;\n  }\n}\nexport function BigNatModule$$$factorial(n$$50) {\n  const productR = function productR(a$$20, b$$15) {\n    if (BigNatModule$$$equal(a$$20, b$$15)) {\n      return a$$20;\n    } else {\n      const m$$3 = BigNatModule$$$div(BigNatModule$$$add(a$$20, b$$15), BigNatModule$$$ofInt32(2));\n      return BigNatModule$$$mul(productR(a$$20, m$$3), productR(BigNatModule$$$add(m$$3, BigNatModule$$$one), b$$15));\n    }\n  };\n\n  return productR(BigNatModule$$$one, n$$50);\n}","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, x.cmp(0) >= 0 ? 1 /* ROUND_HALF_UP */ : 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str) {\n    try {\n        return [true, new Decimal(str.trim())];\n    }\n    catch (_a) {\n        return [false, get_Zero];\n    }\n}\nexport function parse(str) {\n    const [ok, value] = tryParse(str);\n    if (ok) {\n        return value;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\n","import { declare, Record } from \"../Types.js\";\nimport { type } from \"../Reflection.js\";\nimport { BigNatModule$$$factorial as BigNatModule$0024$0024$0024factorial, BigNatModule$$$ofString as BigNatModule$0024$0024$0024ofString, BigNatModule$$$toFloat as BigNatModule$0024$0024$0024toFloat, BigNatModule$$$toUInt64 as BigNatModule$0024$0024$0024toUInt64, BigNatModule$$$toUInt32 as BigNatModule$0024$0024$0024toUInt32, BigNatModule$$$pow as BigNatModule$0024$0024$0024pow, BigNatModule$$$rem as BigNatModule$0024$0024$0024rem, BigNatModule$$$two as BigNatModule$0024$0024$0024two, BigNatModule$$$lte as BigNatModule$0024$0024$0024lte, BigNatModule$$$hcf as BigNatModule$0024$0024$0024hcf, BigNatModule$$$bitXor as BigNatModule$0024$0024$0024bitXor, BigNatModule$$$bitOr as BigNatModule$0024$0024$0024bitOr, BigNatModule$$$bitAnd as BigNatModule$0024$0024$0024bitAnd, BigNatModule$$$divmod as BigNatModule$0024$0024$0024divmod, BigNatModule$$$mul as BigNatModule$0024$0024$0024mul, BigNatModule$$$isOne as BigNatModule$0024$0024$0024isOne, BigNatModule$$$sub as BigNatModule$0024$0024$0024sub, BigNatModule$$$gte as BigNatModule$0024$0024$0024gte, BigNatModule$$$scale as BigNatModule$0024$0024$0024scale, BigNatModule$$$add as BigNatModule$0024$0024$0024add, BigNatModule$$$one as BigNatModule$0024$0024$0024one, BigNatModule$$$ofInt64 as BigNatModule$0024$0024$0024ofInt64, BigNatModule$$$toString as BigNatModule$0024$0024$0024toString, BigNatModule$$$hash as BigNatModule$0024$0024$0024hash, BigNatModule$$$gt as BigNatModule$0024$0024$0024gt, BigNatModule$$$lt as BigNatModule$0024$0024$0024lt, BigNatModule$$$isZero as BigNatModule$0024$0024$0024isZero, BigNatModule$$$equal as BigNatModule$0024$0024$0024equal, BigNatModule$$$getSmall as BigNatModule$0024$0024$0024getSmall, BigNatModule$$$isSmall as BigNatModule$0024$0024$0024isSmall, BigNatModule$$$ofInt32 as BigNatModule$0024$0024$0024ofInt32 } from \"./n\";\nimport { initialize } from \"../Array.js\";\nimport { op_Addition, op_Multiply, fromValue, equals, compare, fromBits, op_UnaryNegation, fromInteger } from \"../Long.js\";\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\nimport Decimal from \"../Decimal.js\";\nexport const BigInteger = declare(function BigInt_BigInteger(signInt, v) {\n  const $this$$1 = this;\n  $this$$1.signInt = signInt;\n  $this$$1.v = v;\n}, Record);\nexport function BigInteger$reflection() {\n  return type(\"BigInt.BigInteger\");\n}\nexport function BigInteger$$$$002Ector$$Z2BE94A1(signInt, v) {\n  return this instanceof BigInteger ? BigInteger.call(this, signInt, v) : new BigInteger(signInt, v);\n}\n\n(function BigInteger$$$$002Ecctor() {\n  BigInteger.smallLim = 4096;\n  BigInteger.smallPosTab = initialize(BigInteger.smallLim, BigNatModule$0024$0024$0024ofInt32, Array);\n  BigInteger.one = BigInteger$$$$002Ector$$Z524259A4(1);\n  BigInteger.two = BigInteger$$$$002Ector$$Z524259A4(2);\n  BigInteger.zero = BigInteger$$$$002Ector$$Z524259A4(0);\n})();\n\nexport function BigInteger$$$nat$$Z67CCE57D(n$$1) {\n  if (BigNatModule$0024$0024$0024isSmall(n$$1) ? BigNatModule$0024$0024$0024getSmall(n$$1) < BigInteger.smallLim : false) {\n    return BigInteger.smallPosTab[BigNatModule$0024$0024$0024getSmall(n$$1)];\n  } else {\n    return n$$1;\n  }\n}\nexport function BigInteger$$$create$$Z2BE94A1(s, n$$2) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(s, BigInteger$$$nat$$Z67CCE57D(n$$2));\n}\nexport function BigInteger$$$posn$$Z67CCE57D(n$$3) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(1, BigInteger$$$nat$$Z67CCE57D(n$$3));\n}\nexport function BigInteger$$$negn$$Z67CCE57D(n$$4) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(-1, BigInteger$$$nat$$Z67CCE57D(n$$4));\n}\nexport function BigInteger$$get_Sign(x) {\n  if (BigInteger$$get_IsZero(x)) {\n    return 0;\n  } else {\n    return x.signInt | 0;\n  }\n}\nexport function BigInteger$$get_SignInt(x$$1) {\n  return x$$1.signInt;\n}\nexport function BigInteger$$get_V(x$$2) {\n  return x$$2.v;\n}\nexport function BigInteger$$$op_Equality$$56F059C0(x$$3, y) {\n  const matchValue = [BigInteger$$get_SignInt(x$$3), BigInteger$$get_SignInt(y)];\n  var $target$$2;\n\n  if (matchValue[0] === -1) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 1;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 8;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 3;\n    } else {\n      $target$$2 = 9;\n    }\n  } else if (matchValue[0] === 0) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 6;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 4;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 5;\n    } else {\n      $target$$2 = 9;\n    }\n  } else if (matchValue[0] === 1) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 2;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 7;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 0;\n    } else {\n      $target$$2 = 9;\n    }\n  } else {\n    $target$$2 = 9;\n  }\n\n  switch ($target$$2) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_Inequality$$56F059C0(x$$4, y$$1) {\n  return !BigInteger$$$op_Equality$$56F059C0(x$$4, y$$1);\n}\nexport function BigInteger$$$op_LessThan$$56F059C0(x$$5, y$$2) {\n  const matchValue$$1 = [BigInteger$$get_SignInt(x$$5), BigInteger$$get_SignInt(y$$2)];\n  var $target$$3;\n\n  if (matchValue$$1[0] === -1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 1;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 8;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 3;\n    } else {\n      $target$$3 = 9;\n    }\n  } else if (matchValue$$1[0] === 0) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 6;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 4;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 5;\n    } else {\n      $target$$3 = 9;\n    }\n  } else if (matchValue$$1[0] === 1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 2;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 7;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 0;\n    } else {\n      $target$$3 = 9;\n    }\n  } else {\n    $target$$3 = 9;\n  }\n\n  switch ($target$$3) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(x$$5), BigInteger$$get_V(y$$2));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(y$$2), BigInteger$$get_V(x$$5));\n      }\n\n    case 2:\n      {\n        return false;\n      }\n\n    case 3:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n        }\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n      }\n\n    case 6:\n      {\n        return false;\n      }\n\n    case 7:\n      {\n        return false;\n      }\n\n    case 8:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThan$$56F059C0(x$$6, y$$3) {\n  const matchValue$$2 = [BigInteger$$get_SignInt(x$$6), BigInteger$$get_SignInt(y$$3)];\n  var $target$$4;\n\n  if (matchValue$$2[0] === -1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 1;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 8;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 3;\n    } else {\n      $target$$4 = 9;\n    }\n  } else if (matchValue$$2[0] === 0) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 6;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 4;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 5;\n    } else {\n      $target$$4 = 9;\n    }\n  } else if (matchValue$$2[0] === 1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 2;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 7;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 0;\n    } else {\n      $target$$4 = 9;\n    }\n  } else {\n    $target$$4 = 9;\n  }\n\n  switch ($target$$4) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(x$$6), BigInteger$$get_V(y$$3));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(y$$3), BigInteger$$get_V(x$$6));\n      }\n\n    case 2:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n        }\n      }\n\n    case 3:\n      {\n        return false;\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return false;\n      }\n\n    case 6:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n      }\n\n    case 7:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6));\n      }\n\n    case 8:\n      {\n        return false;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$compare$$56F059C0(n$$5, nn) {\n  if (BigInteger$$$op_LessThan$$56F059C0(n$$5, nn)) {\n    return -1 | 0;\n  } else if (BigInteger$$$op_Equality$$56F059C0(n$$5, nn)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\nexport function BigInteger$$$hash$$Z665282C2(z) {\n  if (BigInteger$$get_SignInt(z) === 0) {\n    return 1;\n  } else {\n    return BigInteger$$get_SignInt(z) + BigNatModule$0024$0024$0024hash(BigInteger$$get_V(z)) | 0;\n  }\n}\n\nBigInteger.prototype.toString = function () {\n  const x$$7 = this;\n  const matchValue$$3 = BigInteger$$get_SignInt(x$$7) | 0;\n\n  switch (matchValue$$3) {\n    case -1:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$7)) ? \"0\" : \"-\" + BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    case 0:\n      {\n        return \"0\";\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\");\n      }\n  }\n};\n\nexport function BigInteger$$get_StructuredDisplayString(x$$8) {\n  return String(x$$8);\n}\n\nBigInteger.prototype.Equals = function (obj) {\n  const this$ = this;\n\n  if (obj instanceof BigInteger) {\n    const that = obj;\n    return BigInteger$$$op_Equality$$56F059C0(this$, that);\n  } else {\n    return false;\n  }\n};\n\nBigInteger.prototype.GetHashCode = function () {\n  const x$$9 = this;\n  return BigInteger$$$hash$$Z665282C2(x$$9) | 0;\n};\n\nexport function BigInteger$$$$002Ector$$Z524259A4(n$$6) {\n  if (n$$6 >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(n$$6)));\n  } else if (n$$6 === -2147483648) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(fromInteger(n$$6, false, 2)))));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(op_UnaryNegation_Int32(n$$6))));\n  }\n}\nexport function BigInteger$$$$002Ector$$Z524259C1(n$$7) {\n  if (compare(n$$7, fromBits(0, 0, false)) >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(n$$7)));\n  } else if (equals(n$$7, fromBits(0, 2147483648, false))) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024add(BigNatModule$0024$0024$0024ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule$0024$0024$0024one)));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(n$$7))));\n  }\n}\nexport function BigInteger$$$get_One() {\n  return BigInteger.one;\n}\nexport function BigInteger$$$get_Two() {\n  return BigInteger.two;\n}\nexport function BigInteger$$$get_Zero() {\n  return BigInteger.zero;\n}\nexport function BigInteger$$$op_UnaryNegation$$Z665282C2(z$$1) {\n  const matchValue$$4 = BigInteger$$get_SignInt(z$$1) | 0;\n\n  if (matchValue$$4 === 0) {\n    return BigInteger$$$get_Zero();\n  } else {\n    const i = matchValue$$4 | 0;\n    return BigInteger$$$create$$Z2BE94A1(op_UnaryNegation_Int32(i), BigInteger$$get_V(z$$1));\n  }\n}\nexport function BigInteger$$$Scale$$Z320F31E(k, z$$2) {\n  if (BigInteger$$get_SignInt(z$$2) === 0) {\n    return BigInteger$$$get_Zero();\n  } else if (k < 0) {\n    return BigInteger$$$create$$Z2BE94A1(op_UnaryNegation_Int32(BigInteger$$get_SignInt(z$$2)), BigNatModule$0024$0024$0024scale(op_UnaryNegation_Int32(k), BigInteger$$get_V(z$$2)));\n  } else {\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(z$$2), BigNatModule$0024$0024$0024scale(k, BigInteger$$get_V(z$$2)));\n  }\n}\nexport function BigInteger$$$subnn$$6A57060(nx, ny) {\n  if (BigNatModule$0024$0024$0024gte(nx, ny)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(nx, ny));\n  } else {\n    return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(ny, nx));\n  }\n}\nexport function BigInteger$$$addnn$$6A57060(nx$$1, ny$$1) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024add(nx$$1, ny$$1));\n}\nexport function BigInteger$$get_IsZero(x$$10) {\n  if (BigInteger$$get_SignInt(x$$10) === 0) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$10));\n  }\n}\nexport function BigInteger$$get_IsOne(x$$11) {\n  if (BigInteger$$get_SignInt(x$$11) === 1) {\n    return BigNatModule$0024$0024$0024isOne(BigInteger$$get_V(x$$11));\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$op_Addition$$56F059C0(x$$12, y$$4) {\n  if (BigInteger$$get_IsZero(y$$4)) {\n    return x$$12;\n  } else if (BigInteger$$get_IsZero(x$$12)) {\n    return y$$4;\n  } else {\n    const matchValue$$5 = [BigInteger$$get_SignInt(x$$12), BigInteger$$get_SignInt(y$$4)];\n    var $target$$5;\n\n    if (matchValue$$5[0] === -1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$5 = 1;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$5 = 3;\n      } else {\n        $target$$5 = 4;\n      }\n    } else if (matchValue$$5[0] === 1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$5 = 2;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$5 = 0;\n      } else {\n        $target$$5 = 4;\n      }\n    } else {\n      $target$$5 = 4;\n    }\n\n    switch ($target$$5) {\n      case 0:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4)));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$4), BigInteger$$get_V(x$$12));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Subtraction$$56F059C0(x$$13, y$$5) {\n  if (BigInteger$$get_IsZero(y$$5)) {\n    return x$$13;\n  } else if (BigInteger$$get_IsZero(x$$13)) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(y$$5);\n  } else {\n    const matchValue$$6 = [BigInteger$$get_SignInt(x$$13), BigInteger$$get_SignInt(y$$5)];\n    var $target$$6;\n\n    if (matchValue$$6[0] === -1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$6 = 1;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$6 = 3;\n      } else {\n        $target$$6 = 4;\n      }\n    } else if (matchValue$$6[0] === 1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$6 = 2;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$6 = 0;\n      } else {\n        $target$$6 = 4;\n      }\n    } else {\n      $target$$6 = 4;\n    }\n\n    switch ($target$$6) {\n      case 0:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$5), BigInteger$$get_V(x$$13));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5)));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Multiply$$56F059C0(x$$14, y$$6) {\n  if (BigInteger$$get_IsZero(x$$14)) {\n    return x$$14;\n  } else if (BigInteger$$get_IsZero(y$$6)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(x$$14)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(y$$6)) {\n    return x$$14;\n  } else {\n    const m = BigNatModule$0024$0024$0024mul(BigInteger$$get_V(x$$14), BigInteger$$get_V(y$$6));\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(x$$14) * BigInteger$$get_SignInt(y$$6), m);\n  }\n}\nexport function BigInteger$$$DivRem$$56F059C0(x$$15, y$$7) {\n  if (BigInteger$$get_IsZero(y$$7)) {\n    throw new Error();\n  }\n\n  if (BigInteger$$get_IsZero(x$$15)) {\n    return [BigInteger$$$get_Zero(), BigInteger$$$get_Zero()];\n  } else {\n    const patternInput = BigNatModule$0024$0024$0024divmod(BigInteger$$get_V(x$$15), BigInteger$$get_V(y$$7));\n    const matchValue$$7 = [BigInteger$$get_SignInt(x$$15), BigInteger$$get_SignInt(y$$7)];\n    var $target$$7;\n\n    if (matchValue$$7[0] === -1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$7 = 1;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$7 = 3;\n      } else {\n        $target$$7 = 4;\n      }\n    } else if (matchValue$$7[0] === 1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$7 = 2;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$7 = 0;\n      } else {\n        $target$$7 = 4;\n      }\n    } else {\n      $target$$7 = 4;\n    }\n\n    switch ($target$$7) {\n      case 0:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 1:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 2:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 3:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Division$$56F059C0(x$$16, y$$8) {\n  return BigInteger$$$DivRem$$56F059C0(x$$16, y$$8)[0];\n}\nexport function BigInteger$$$op_Modulus$$56F059C0(x$$17, y$$9) {\n  return BigInteger$$$DivRem$$56F059C0(x$$17, y$$9)[1];\n}\nexport function BigInteger$$$op_RightShift$$62E082A2(x$$18, y$$10) {\n  return BigInteger$$$op_Division$$56F059C0(x$$18, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$10));\n}\nexport function BigInteger$$$op_LeftShift$$62E082A2(x$$19, y$$11) {\n  return BigInteger$$$op_Multiply$$56F059C0(x$$19, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$11));\n}\nexport function BigInteger$$$op_BitwiseAnd$$56F059C0(x$$20, y$$12) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitAnd(BigInteger$$get_V(x$$20), BigInteger$$get_V(y$$12)));\n}\nexport function BigInteger$$$op_BitwiseOr$$56F059C0(x$$21, y$$13) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitOr(BigInteger$$get_V(x$$21), BigInteger$$get_V(y$$13)));\n}\nexport function BigInteger$$$op_ExclusiveOr$$56F059C0(x$$22, y$$14) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitXor(BigInteger$$get_V(x$$22), BigInteger$$get_V(y$$14)));\n}\nexport function BigInteger$$$GreatestCommonDivisor$$56F059C0(x$$23, y$$15) {\n  const matchValue$$8 = [BigInteger$$get_SignInt(x$$23), BigInteger$$get_SignInt(y$$15)];\n\n  if (matchValue$$8[0] === 0) {\n    if (matchValue$$8[1] === 0) {\n      return BigInteger$$$get_Zero();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(y$$15));\n    }\n  } else if (matchValue$$8[1] === 0) {\n    return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(x$$23));\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024hcf(BigInteger$$get_V(x$$23), BigInteger$$get_V(y$$15)));\n  }\n}\nexport function BigInteger$$get_IsNegative(x$$24) {\n  if (BigInteger$$get_SignInt(x$$24) === -1) {\n    return !BigInteger$$get_IsZero(x$$24);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$get_IsPositive(x$$25) {\n  if (BigInteger$$get_SignInt(x$$25) === 1) {\n    return !BigInteger$$get_IsZero(x$$25);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$Abs$$Z665282C2(x$$26) {\n  if (BigInteger$$get_SignInt(x$$26) === -1) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(x$$26);\n  } else {\n    return x$$26;\n  }\n}\nexport function BigInteger$$$op_LessThanOrEqual$$56F059C0(x$$27, y$$16) {\n  const matchValue$$9 = [BigInteger$$get_SignInt(x$$27), BigInteger$$get_SignInt(y$$16)];\n  var $target$$8;\n\n  if (matchValue$$9[0] === -1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 1;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 6;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 3;\n    } else {\n      $target$$8 = 9;\n    }\n  } else if (matchValue$$9[0] === 0) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 8;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 4;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 7;\n    } else {\n      $target$$8 = 9;\n    }\n  } else if (matchValue$$9[0] === 1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 2;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 5;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 0;\n    } else {\n      $target$$8 = 9;\n    }\n  } else {\n    $target$$8 = 9;\n  }\n\n  switch ($target$$8) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(x$$27), BigInteger$$get_V(y$$16));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(y$$16), BigInteger$$get_V(x$$27));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        return true;\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27));\n      }\n\n    case 6:\n      {\n        return true;\n      }\n\n    case 7:\n      {\n        return true;\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThanOrEqual$$56F059C0(x$$28, y$$17) {\n  const matchValue$$10 = [BigInteger$$get_SignInt(x$$28), BigInteger$$get_SignInt(y$$17)];\n  var $target$$9;\n\n  if (matchValue$$10[0] === -1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 1;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 6;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 3;\n    } else {\n      $target$$9 = 9;\n    }\n  } else if (matchValue$$10[0] === 0) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 8;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 4;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 7;\n    } else {\n      $target$$9 = 9;\n    }\n  } else if (matchValue$$10[0] === 1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 2;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 5;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 0;\n    } else {\n      $target$$9 = 9;\n    }\n  } else {\n    $target$$9 = 9;\n  }\n\n  switch ($target$$9) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(x$$28), BigInteger$$get_V(y$$17));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(y$$17), BigInteger$$get_V(x$$28));\n      }\n\n    case 2:\n      {\n        return true;\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$28))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$17));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return true;\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$28));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$17));\n      }\n\n    case 8:\n      {\n        return true;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$Pow$$62E082A2(x$$29, y$$18) {\n  if (y$$18 < 0) {\n    throw new Error(\"y\");\n  }\n\n  const matchValue$$11 = [BigInteger$$get_IsZero(x$$29), y$$18];\n\n  if (matchValue$$11[0]) {\n    if (matchValue$$11[1] === 0) {\n      return BigInteger$$$get_One();\n    } else {\n      return BigInteger$$$get_Zero();\n    }\n  } else {\n    const yval = BigInteger$$$$002Ector$$Z524259A4(y$$18);\n    return BigInteger$$$create$$Z2BE94A1(BigNatModule$0024$0024$0024isZero(BigNatModule$0024$0024$0024rem(BigInteger$$get_V(yval), BigNatModule$0024$0024$0024two)) ? 1 : BigInteger$$get_SignInt(x$$29), BigNatModule$0024$0024$0024pow(BigInteger$$get_V(x$$29), BigInteger$$get_V(yval)));\n  }\n}\nexport function BigInteger$$get_ToInt32(x$$30) {\n  if (BigInteger$$get_IsZero(x$$30)) {\n    return 0;\n  } else {\n    const u = BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$30));\n\n    if (u <= 2147483647 >>> 0) {\n      return BigInteger$$get_SignInt(x$$30) * ~~u | 0;\n    } else if (BigInteger$$get_SignInt(x$$30) === -1 ? u === 2147483647 + 1 >>> 0 : false) {\n      return -2147483648 | 0;\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt32(x$$31) {\n  if (BigInteger$$get_IsZero(x$$31)) {\n    return 0;\n  } else {\n    return BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$31));\n  }\n}\nexport function BigInteger$$get_ToInt64(x$$32) {\n  if (BigInteger$$get_IsZero(x$$32)) {\n    return fromBits(0, 0, false);\n  } else {\n    const u$$1 = BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$32));\n\n    if (compare(u$$1, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\n      return op_Multiply(fromInteger(BigInteger$$get_SignInt(x$$32), false, 2), fromValue(u$$1, false));\n    } else if (BigInteger$$get_SignInt(x$$32) === -1 ? equals(u$$1, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true)) : false) {\n      return fromBits(0, 2147483648, false);\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt64(x$$33) {\n  if (BigInteger$$get_IsZero(x$$33)) {\n    return fromBits(0, 0, true);\n  } else {\n    return BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$33));\n  }\n}\nexport function BigInteger$$get_ToDouble(x$$34) {\n  const matchValue$$12 = BigInteger$$get_SignInt(x$$34) | 0;\n\n  switch (matchValue$$12) {\n    case -1:\n      {\n        return -BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$34));\n      }\n\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$34));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$get_ToSByte(x$$35) {\n  return (BigInteger$$get_ToInt32(x$$35) + 0x80 & 0xFF) - 0x80;\n}\nexport function BigInteger$$get_ToByte(x$$36) {\n  return BigInteger$$get_ToUInt32(x$$36) & 0xFF;\n}\nexport function BigInteger$$get_ToInt16(x$$37) {\n  return (BigInteger$$get_ToInt32(x$$37) + 0x8000 & 0xFFFF) - 0x8000;\n}\nexport function BigInteger$$get_ToUInt16(x$$38) {\n  return BigInteger$$get_ToUInt32(x$$38) & 0xFFFF;\n}\nexport function BigInteger$$get_ToSingle(x$$39) {\n  return BigInteger$$get_ToDouble(x$$39);\n}\nexport function BigInteger$$get_ToDecimal(x$$40) {\n  return new Decimal(BigInteger$$get_ToDouble(x$$40));\n}\nexport function BigInteger$$$Parse$$Z721C83C5(text) {\n  if (text == null) {\n    throw new Error(\"text\");\n  }\n\n  const text$$1 = text.trim();\n  const len = text$$1.length | 0;\n\n  if (len === 0) {\n    throw new Error();\n  }\n\n  const matchValue$$13 = [text$$1[0], len];\n\n  if (matchValue$$13[0] === \"+\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else if (matchValue$$13[0] === \"-\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1));\n  }\n}\nexport function BigInteger$$get_IsSmall(x$$41) {\n  if (BigInteger$$get_IsZero(x$$41)) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isSmall(BigInteger$$get_V(x$$41));\n  }\n}\nexport function BigInteger$$$Factorial$$Z665282C2(x$$42) {\n  if (BigInteger$$get_IsNegative(x$$42)) {\n    throw new Error(\"mustBeNonNegative\\\\nParameter name: x\");\n  }\n\n  if (BigInteger$$get_IsPositive(x$$42)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024factorial(BigInteger$$get_V(x$$42)));\n  } else {\n    return BigInteger$$$get_One();\n  }\n}\nexport function BigInteger$$$op_UnaryPlus$$Z665282C2(n1) {\n  return n1;\n}\nexport function BigInteger$$$FromInt64$$Z524259C1(x$$43) {\n  return BigInteger$$$$002Ector$$Z524259C1(x$$43);\n}\nexport function BigInteger$$$FromInt32$$Z524259A4(x$$44) {\n  return BigInteger$$$$002Ector$$Z524259A4(x$$44);\n}\n\nBigInteger.prototype.CompareTo = function (obj$$1) {\n  const this$$$1 = this;\n\n  if (obj$$1 instanceof BigInteger) {\n    const that$$1 = obj$$1;\n    return BigInteger$$$compare$$56F059C0(this$$$1, that$$1) | 0;\n  } else {\n    throw new Error(\"the objects are not comparable\\\\nParameter name: obj\");\n  }\n};","import { BigInteger$$$op_Inequality$$56F059C0 as BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0, BigInteger$$$op_Equality$$56F059C0 as BigInteger$0024$0024$0024op_Equality$0024$002456F059C0, BigInteger$$$op_GreaterThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0, BigInteger$$$op_GreaterThan$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0, BigInteger$$$op_LessThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0, BigInteger$$$op_LessThan$$56F059C0 as BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0, BigInteger$$$op_ExclusiveOr$$56F059C0 as BigInteger$0024$0024$0024op_ExclusiveOr$0024$002456F059C0, BigInteger$$$op_BitwiseOr$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0, BigInteger$$$op_BitwiseAnd$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0, BigInteger$$$op_LeftShift$$62E082A2 as BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2, BigInteger$$$op_RightShift$$62E082A2 as BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2, BigInteger$$$op_UnaryPlus$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2, BigInteger$$$op_UnaryNegation$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2, BigInteger$$$op_Modulus$$56F059C0 as BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0, BigInteger$$$op_Division$$56F059C0 as BigInteger$0024$0024$0024op_Division$0024$002456F059C0, BigInteger$$$op_Multiply$$56F059C0 as BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0, BigInteger$$$op_Subtraction$$56F059C0 as BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0, BigInteger$$$op_Addition$$56F059C0 as BigInteger$0024$0024$0024op_Addition$0024$002456F059C0, BigInteger$$get_IsOne as BigInteger$0024$0024get_IsOne, BigInteger$$get_IsZero as BigInteger$0024$0024get_IsZero, BigInteger$$get_Sign as BigInteger$0024$0024get_Sign, BigInteger$$get_ToDecimal as BigInteger$0024$0024get_ToDecimal, BigInteger$$get_ToDouble as BigInteger$0024$0024get_ToDouble, BigInteger$$get_ToSingle as BigInteger$0024$0024get_ToSingle, BigInteger$$get_ToUInt64 as BigInteger$0024$0024get_ToUInt64, BigInteger$$get_ToInt64 as BigInteger$0024$0024get_ToInt64, BigInteger$$get_ToUInt32 as BigInteger$0024$0024get_ToUInt32, BigInteger$$get_ToInt32 as BigInteger$0024$0024get_ToInt32, BigInteger$$get_ToUInt16 as BigInteger$0024$0024get_ToUInt16, BigInteger$$get_ToInt16 as BigInteger$0024$0024get_ToInt16, BigInteger$$get_ToByte as BigInteger$0024$0024get_ToByte, BigInteger$$get_ToSByte as BigInteger$0024$0024get_ToSByte, BigInteger$$$$002Ector$$Z524259A4 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4, BigInteger$$$$002Ector$$Z524259C1 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1, BigInteger$$$get_Two as BigInteger$0024$0024$0024get_Two, BigInteger$$$get_One as BigInteger$0024$0024$0024get_One, BigInteger$$$Abs$$Z665282C2 as BigInteger$0024$0024$0024Abs$0024$0024Z665282C2, BigInteger$$$Pow$$62E082A2 as BigInteger$0024$0024$0024Pow$0024$002462E082A2, BigInteger$$$GreatestCommonDivisor$$56F059C0 as BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0, BigInteger$$$DivRem$$56F059C0 as BigInteger$0024$0024$0024DivRem$0024$002456F059C0, BigInteger$$$Parse$$Z721C83C5 as BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5, BigInteger$$$get_Zero as BigInteger$0024$0024$0024get_Zero, BigInteger } from \"./BigInt/z\";\nimport { fromInteger } from \"./Long.js\";\nimport { min, comparePrimitives, equals as equals$$1, structuralHash } from \"./Util.js\";\nimport { rangeNumber } from \"./Seq.js\";\nimport { fold, head, skipWhile, find, ofSeq } from \"./List.js\";\nimport { List } from \"./Types.js\";\nimport { fill, reverse, ofList } from \"./Array.js\";\nexport function isBigInt(x) {\n  return x instanceof BigInteger;\n}\nexport function tryParse(str) {\n  try {\n    const res = BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(str);\n    return [true, res];\n  } catch (matchValue) {\n    return [false, BigInteger$0024$0024$0024get_Zero()];\n  }\n}\nexport function parse(arg00) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(arg00);\n}\nexport function divRem(arg00$$1, arg01) {\n  return BigInteger$0024$0024$0024DivRem$0024$002456F059C0(arg00$$1, arg01);\n}\nexport function greatestCommonDivisor(arg00$$2, arg01$$1) {\n  return BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0(arg00$$2, arg01$$1);\n}\nexport function pow(arg00$$3, arg01$$2) {\n  return BigInteger$0024$0024$0024Pow$0024$002462E082A2(arg00$$3, arg01$$2);\n}\nexport function abs(arg00$$4) {\n  return BigInteger$0024$0024$0024Abs$0024$0024Z665282C2(arg00$$4);\n}\nexport const zero = BigInteger$0024$0024$0024get_Zero();\nexport const one = BigInteger$0024$0024$0024get_One();\nexport const two = BigInteger$0024$0024$0024get_Two();\nexport function fromString(s) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(s);\n}\nexport function fromZero() {\n  return BigInteger$0024$0024$0024get_Zero();\n}\nexport function fromOne() {\n  return BigInteger$0024$0024$0024get_One();\n}\nexport function fromInt64(i) {\n  return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1(i);\n}\nexport function fromInt32(i$$1) {\n  if (i$$1 > 2147483647) {\n    return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1(fromInteger(i$$1, false, 6));\n  } else {\n    return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(i$$1);\n  }\n}\nexport function toSByte(x$$1) {\n  return BigInteger$0024$0024get_ToSByte(x$$1);\n}\nexport function toByte(x$$2) {\n  return BigInteger$0024$0024get_ToByte(x$$2);\n}\nexport function toInt16(x$$3) {\n  return BigInteger$0024$0024get_ToInt16(x$$3);\n}\nexport function toUInt16(x$$4) {\n  return BigInteger$0024$0024get_ToUInt16(x$$4);\n}\nexport function toInt32(x$$5) {\n  return BigInteger$0024$0024get_ToInt32(x$$5);\n}\nexport function toUInt32(x$$6) {\n  return BigInteger$0024$0024get_ToUInt32(x$$6);\n}\nexport function toInt64(x$$7) {\n  return BigInteger$0024$0024get_ToInt64(x$$7);\n}\nexport function toUInt64(x$$8) {\n  return BigInteger$0024$0024get_ToUInt64(x$$8);\n}\nexport function toSingle(x$$9) {\n  return BigInteger$0024$0024get_ToSingle(x$$9);\n}\nexport function toDouble(x$$10) {\n  return BigInteger$0024$0024get_ToDouble(x$$10);\n}\nexport function toDecimal(x$$11) {\n  return BigInteger$0024$0024get_ToDecimal(x$$11);\n}\nexport function sign(x$$12) {\n  return BigInteger$0024$0024get_Sign(x$$12);\n}\nexport function isZero(x$$13) {\n  return BigInteger$0024$0024get_IsZero(x$$13);\n}\nexport function isOne(x$$14) {\n  return BigInteger$0024$0024get_IsOne(x$$14);\n}\nexport function hash(x$$15) {\n  return structuralHash(x$$15);\n}\nexport function compare(x$$16, y) {\n  return x$$16.CompareTo(y);\n}\nexport function equals(x$$17, y$$1) {\n  return equals$$1(x$$17, y$$1);\n}\nexport function toString(x$$18) {\n  return String(x$$18);\n}\nexport const get_Zero = BigInteger$0024$0024$0024get_Zero();\nexport const get_One = BigInteger$0024$0024$0024get_One();\nexport function op_Addition(arg00$$5, arg01$$3) {\n  return BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(arg00$$5, arg01$$3);\n}\nexport function op_Subtraction(arg00$$6, arg01$$4) {\n  return BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0(arg00$$6, arg01$$4);\n}\nexport function op_Multiply(arg00$$7, arg01$$5) {\n  return BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(arg00$$7, arg01$$5);\n}\nexport function op_Division(arg00$$8, arg01$$6) {\n  return BigInteger$0024$0024$0024op_Division$0024$002456F059C0(arg00$$8, arg01$$6);\n}\nexport function op_Modulus(arg00$$9, arg01$$7) {\n  return BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0(arg00$$9, arg01$$7);\n}\nexport function op_UnaryNegation(arg00$$10) {\n  return BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2(arg00$$10);\n}\nexport function op_UnaryPlus(arg00$$11) {\n  return BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2(arg00$$11);\n}\nexport function op_RightShift(arg00$$12, arg01$$8) {\n  return BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2(arg00$$12, arg01$$8);\n}\nexport function op_LeftShift(arg00$$13, arg01$$9) {\n  return BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2(arg00$$13, arg01$$9);\n}\nexport function op_BitwiseAnd(arg00$$14, arg01$$10) {\n  return BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0(arg00$$14, arg01$$10);\n}\nexport function op_BitwiseOr(arg00$$15, arg01$$11) {\n  return BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0(arg00$$15, arg01$$11);\n}\nexport function op_ExclusiveOr(arg00$$16, arg01$$12) {\n  return BigInteger$0024$0024$0024op_ExclusiveOr$0024$002456F059C0(arg00$$16, arg01$$12);\n}\nexport function op_LessThan(arg00$$17, arg01$$13) {\n  return BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0(arg00$$17, arg01$$13);\n}\nexport function op_LessThanOrEqual(arg00$$18, arg01$$14) {\n  return BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0(arg00$$18, arg01$$14);\n}\nexport function op_GreaterThan(arg00$$19, arg01$$15) {\n  return BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0(arg00$$19, arg01$$15);\n}\nexport function op_GreaterThanOrEqual(arg00$$20, arg01$$16) {\n  return BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0(arg00$$20, arg01$$16);\n}\nexport function op_Equality(arg00$$21, arg01$$17) {\n  return BigInteger$0024$0024$0024op_Equality$0024$002456F059C0(arg00$$21, arg01$$17);\n}\nexport function op_Inequality(arg00$$22, arg01$$18) {\n  return BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0(arg00$$22, arg01$$18);\n}\n\nfunction flipTwosComplement(currByte, lowBitFound) {\n  const matchValue$$1 = [currByte, lowBitFound];\n\n  if (matchValue$$1[1]) {\n    return [(currByte ^ 255) & 255, true];\n  } else if (matchValue$$1[0] === 0) {\n    return [0, false];\n  } else {\n    const firstBitIndex = find(function predicate(i$$2) {\n      return (currByte & 1 << i$$2) > 0;\n    }, ofSeq(rangeNumber(0, 1, 7))) | 0;\n    return [(currByte ^ 254 << firstBitIndex) & 255, true];\n  }\n}\n\nexport function toByteArray(value$$1) {\n  if (equals$$1(value$$1, zero)) {\n    return new Uint8Array([0]);\n  } else {\n    const isPositive = value$$1.CompareTo(zero) > 0;\n    const value$$2 = isPositive ? value$$1 : BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(-1), value$$1);\n    const mask32 = fromInt64(fromInteger(4294967295, false, 6));\n\n    const loop = function loop(accumBytes, consumeValue, lowBitFound$$1) {\n      loop: while (true) {\n        if (consumeValue.CompareTo(zero) <= 0) {\n          const accumBytes$$1 = isPositive ? skipWhile(function predicate$$1(b) {\n            return b === 0;\n          }, accumBytes) : skipWhile(function predicate$$2(b$$1) {\n            return b$$1 === 255;\n          }, accumBytes);\n          const isHighBitOne = (head(accumBytes$$1) & 128) !== 0;\n          const accumBytes$$2 = (isPositive ? isHighBitOne : false) ? new List(0, accumBytes$$1) : (!isPositive ? !isHighBitOne : false) ? new List(255, accumBytes$$1) : accumBytes$$1;\n          return reverse(ofList(accumBytes$$2, Uint8Array), Uint8Array);\n        } else {\n          const currValue = toUInt32(BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0(consumeValue, mask32));\n\n          if (isPositive) {\n            const b0 = currValue & 0xFF;\n            const b1 = currValue >>> 8 & 0xFF;\n            const b2 = currValue >>> 16 & 0xFF;\n            const b3 = currValue >>> 24 & 0xFF;\n            const $accumBytes$$3 = accumBytes;\n            const $consumeValue$$4 = consumeValue;\n            accumBytes = new List(b3, new List(b2, new List(b1, new List(b0, $accumBytes$$3))));\n            consumeValue = BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2($consumeValue$$4, 32);\n            lowBitFound$$1 = false;\n            continue loop;\n          } else {\n            const patternInput = flipTwosComplement(currValue & 0xFF, lowBitFound$$1);\n            const patternInput$$1 = flipTwosComplement(currValue >>> 8 & 0xFF, patternInput[1]);\n            const patternInput$$2 = flipTwosComplement(currValue >>> 16 & 0xFF, patternInput$$1[1]);\n            const patternInput$$3 = flipTwosComplement(currValue >>> 24 & 0xFF, patternInput$$2[1]);\n            const $accumBytes$$5 = accumBytes;\n            const $consumeValue$$6 = consumeValue;\n            accumBytes = new List(patternInput$$3[0], new List(patternInput$$2[0], new List(patternInput$$1[0], new List(patternInput[0], $accumBytes$$5))));\n            consumeValue = BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2($consumeValue$$6, 32);\n            lowBitFound$$1 = patternInput$$3[1];\n            continue loop;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return loop(new List(), value$$2, false);\n  }\n}\nexport function fromByteArray(bytes) {\n  if (bytes == null) {\n    throw new Error(\"bytes\");\n  }\n\n  if (bytes.length === 0) {\n    return zero;\n  } else {\n    const isPositive$$1 = (bytes[bytes.length - 1] & 128) === 0;\n    const buffer = fill(new Uint8Array(4), 0, 4, 0);\n\n    const loop$$1 = function loop$$1(accumUInt32, currIndex, bytesRemaining, lowBitFound$$6) {\n      loop$$1: while (true) {\n        if (bytesRemaining === 0) {\n          const value$$14 = fold(function folder(acc, value$$12) {\n            return BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2(acc, 32), fromInt64(fromInteger(value$$12, false, 6)));\n          }, zero, accumUInt32);\n\n          if (isPositive$$1) {\n            return value$$14;\n          } else {\n            return BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(-1), value$$14);\n          }\n        } else {\n          const bytesToProcess = min(comparePrimitives, bytesRemaining, 4) | 0;\n\n          for (let i$$5 = 0; i$$5 <= bytesToProcess - 1; i$$5++) {\n            buffer[i$$5] = bytes[currIndex + i$$5];\n          }\n\n          if (isPositive$$1) {\n            fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\n            const value$$15 = (((buffer[0] | buffer[1] << 8 >>> 0) >>> 0 | buffer[2] << 16 >>> 0) >>> 0 | buffer[3] << 24 >>> 0) >>> 0;\n            const $accumUInt32$$7 = accumUInt32;\n            const $bytesRemaining$$9 = bytesRemaining;\n            const $currIndex$$8 = currIndex;\n            accumUInt32 = new List(value$$15, $accumUInt32$$7);\n            currIndex = $currIndex$$8 + bytesToProcess;\n            bytesRemaining = $bytesRemaining$$9 - bytesToProcess;\n            lowBitFound$$6 = false;\n            continue loop$$1;\n          } else {\n            fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\n            const patternInput$$4 = flipTwosComplement(buffer[0], lowBitFound$$6);\n            const patternInput$$5 = flipTwosComplement(buffer[1], patternInput$$4[1]);\n            const patternInput$$6 = flipTwosComplement(buffer[2], patternInput$$5[1]);\n            const patternInput$$7 = flipTwosComplement(buffer[3], patternInput$$6[1]);\n            const value$$16 = (((patternInput$$4[0] | patternInput$$5[0] << 8 >>> 0) >>> 0 | patternInput$$6[0] << 16 >>> 0) >>> 0 | patternInput$$7[0] << 24 >>> 0) >>> 0;\n            const $accumUInt32$$10 = accumUInt32;\n            const $bytesRemaining$$12 = bytesRemaining;\n            const $currIndex$$11 = currIndex;\n            accumUInt32 = new List(value$$16, $accumUInt32$$10);\n            currIndex = $currIndex$$11 + bytesToProcess;\n            bytesRemaining = $bytesRemaining$$12 - bytesToProcess;\n            lowBitFound$$6 = patternInput$$7[1];\n            continue loop$$1;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return loop$$1(new List(), 0, bytes.length, false);\n  }\n}","import { fromNumber, op_Division, op_Multiply, toNumber } from \"./Long\";\nimport { comparePrimitives, padLeftAndRightWithZeros, padWithZeros } from \"./Util\";\n// TimeSpan in runtime just becomes a number representing milliseconds\nexport function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks /* Long */) {\n    return toNumber(op_Division(ticks, 10000));\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return Math.floor(ts / 86400000);\n}\nexport function hours(ts) {\n    return Math.floor(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return Math.floor(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return Math.floor(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return Math.floor(ts % 1000);\n}\nexport function ticks(ts /* Long */) {\n    return op_Multiply(fromNumber(ts), 10000);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport const op_Addition = add;\nexport const op_Subtraction = subtract;\nexport const compare = comparePrimitives;\nexport const compareTo = comparePrimitives;\nexport function duration(x) {\n    return Math.abs(x);\n}\nexport function toString(ts, format = \"c\") {\n    if ([\"c\", \"g\", \"G\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const d = days(ts);\n    const h = hours(ts);\n    const m = minutes(ts);\n    const s = seconds(ts);\n    const ms = milliseconds(ts);\n    // tslint:disable-next-line:max-line-length\n    return `${d === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"c\" ? d + \".\" : d + \":\"}${format === \"g\" ? h : padWithZeros(h, 2)}:${padWithZeros(m, 2)}:${padWithZeros(s, 2)}${ms === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"g\" ? \".\" + padWithZeros(ms, 3) : \".\" + padLeftAndRightWithZeros(ms, 3, 7)}`;\n}\nexport function parse(str) {\n    const firstDot = str.search(\"\\\\.\");\n    const firstColon = str.search(\"\\\\:\");\n    if (firstDot === -1 && firstColon === -1) { // There is only a day ex: 4\n        const d = parseInt(str, 0);\n        if (isNaN(d)) {\n            throw new Error(\"String was not recognized as a valid TimeSpan.\");\n        }\n        else {\n            return create(d, 0, 0, 0, 0);\n        }\n    }\n    if (firstColon > 0) { // process time part\n        // tslint:disable-next-line:max-line-length\n        const r = /^((\\d+)\\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\\.?(\\d+)?$/.exec(str);\n        if (r != null && r[3] != null && r[4] != null) {\n            let d = 0;\n            let ms = 0;\n            let s = 0;\n            const h = +r[3];\n            const m = +r[4];\n            if (r[2] != null) {\n                d = +r[2];\n            }\n            if (r[6] != null) {\n                s = +r[6];\n            }\n            if (r[7] != null) {\n                ms = +r[7];\n            }\n            return create(d, h, m, s, ms);\n        }\n    }\n    throw new Error(\"String was not recognized as a valid TimeSpan.\");\n}\nexport function tryParse(v) {\n    try {\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, 0];\n    }\n}\n","\nnamespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Decode =\n\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    module internal Helpers =\n        [<Emit(\"typeof $0\")>]\n        let jsTypeof (_ : JsonValue) : string = jsNative\n\n        [<Emit(\"$0 instanceof SyntaxError\")>]\n        let isSyntaxError (_ : JsonValue) : bool = jsNative\n\n        let inline getField (fieldName: string) (o: JsonValue) = o?(fieldName)\n        let inline isString (o: JsonValue) : bool = o :? string\n\n        let inline isBoolean (o: JsonValue) : bool = o :? bool\n\n        let inline isNumber (o: JsonValue) : bool = jsTypeof o = \"number\"\n\n        let inline isArray (o: JsonValue) : bool = JS.Array.isArray(o)\n\n        [<Emit(\"$0 === null ? false : (Object.getPrototypeOf($0 || false) === Object.prototype)\")>]\n        let isObject (_ : JsonValue) : bool = jsNative\n\n        let inline isNaN (o: JsonValue) : bool = JS.Number.isNaN(!!o)\n\n        let inline isNullValue (o: JsonValue): bool = isNull o\n\n        [<Emit(\"-2147483648 < $0 && $0 < 2147483647 && ($0 | 0) === $0\")>]\n        let isValidIntRange (_: JsonValue) : bool = jsNative\n\n        [<Emit(\"isFinite($0) && !($0 % 1)\")>]\n        let isIntFinite (_: JsonValue) : bool = jsNative\n\n        let isUndefined (o: JsonValue): bool = jsTypeof o = \"undefined\"\n\n        [<Emit(\"JSON.stringify($0, null, 4) + ''\")>]\n        let anyToString (_: JsonValue) : string = jsNative\n\n        let inline isFunction (o: JsonValue) : bool = jsTypeof o = \"function\"\n\n        let inline objectKeys (o: JsonValue) : string seq = upcast JS.Object.keys(o)\n        let inline asBool (o: JsonValue): bool = unbox o\n        let inline asInt (o: JsonValue): int = unbox o\n        let inline asFloat (o: JsonValue): float = unbox o\n        let inline asString (o: JsonValue): string = unbox o\n        let inline asArray (o: JsonValue): JsonValue[] = unbox o\n\n    let private genericMsg msg value newLine =\n        try\n            \"Expecting \"\n                + msg\n                + \" but instead got:\"\n                + (if newLine then \"\\n\" else \" \")\n                + (Helpers.anyToString value)\n        with\n            | _ ->\n                \"Expecting \"\n                + msg\n                + \" but decoder failed. Couldn't report given value due to circular structure.\"\n                + (if newLine then \"\\n\" else \" \")\n\n    let private errorToString (path : string, error) =\n        let reason =\n            match error with\n            | BadPrimitive (msg, value) ->\n                genericMsg msg value false\n            | BadType (msg, value) ->\n                genericMsg msg value true\n            | BadPrimitiveExtra (msg, value, reason) ->\n                genericMsg msg value false + \"\\nReason: \" + reason\n            | BadField (msg, value) ->\n                genericMsg msg value true\n            | BadPath (msg, value, fieldName) ->\n                genericMsg msg value true + (\"\\nNode `\" + fieldName + \"` is unkown.\")\n            | TooSmallArray (msg, value) ->\n                \"Expecting \" + msg + \".\\n\" + (Helpers.anyToString value)\n            | BadOneOf messages ->\n                \"I run into the following problems:\\n\\n\" + String.concat \"\\n\\n\" messages\n            | FailMessage msg ->\n                \"I run into a `fail` decoder: \" + msg\n\n        match error with\n        | BadOneOf _ ->\n            // Don't need to show the path here because each error case will show it's own path\n            reason\n        | _ ->\n            \"Error at: `\" + path + \"`\\n\" + reason\n\n    ///////////////\n    // Runners ///\n    /////////////\n\n    let fromValue (path : string) (decoder : Decoder<'T>) =\n        fun value ->\n            match decoder path value with\n            | Ok success ->\n                Ok success\n            | Error error ->\n                Error (errorToString error)\n\n    let fromString (decoder : Decoder<'T>) =\n        fun value ->\n            try\n                let json = JS.JSON.parse value\n                fromValue \"$\" decoder json\n            with\n                | ex when Helpers.isSyntaxError ex ->\n                    Error(\"Given an invalid JSON: \" + ex.Message)\n\n    let unsafeFromString (decoder : Decoder<'T>) =\n        fun value ->\n            match fromString decoder value with\n            | Ok x -> x\n            | Error msg -> failwith msg\n\n    [<System.Obsolete(\"Please use fromValue instead\")>]\n    let decodeValue (path : string) (decoder : Decoder<'T>) = fromValue path decoder\n\n    [<System.Obsolete(\"Please use fromString instead\")>]\n    let decodeString (decoder : Decoder<'T>) = fromString decoder\n\n    //////////////////\n    // Primitives ///\n    ////////////////\n\n    let string : Decoder<string> =\n        fun path value ->\n            if Helpers.isString value then\n                Ok(Helpers.asString value)\n            else\n                (path, BadPrimitive(\"a string\", value)) |> Error\n\n    let guid : Decoder<System.Guid> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.Guid.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a guid\", value)) |> Error\n            else (path, BadPrimitive(\"a guid\", value)) |> Error\n\n    let int : Decoder<int> =\n        fun path value ->\n            if Helpers.isNumber value then\n                if Helpers.isValidIntRange value then\n                    Ok(Helpers.asInt value)\n                else\n                    (path, BadPrimitiveExtra(\"an int\", value, \"Value was either too large or too small for an int\")) |> Error\n            elif Helpers.isString value then\n                match System.Int32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int\", value)) |> Error\n            else\n                (path, BadPrimitive(\"an int\", value)) |> Error\n\n\n    let int64 : Decoder<int64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> int64 |> Ok\n            elif Helpers.isString value then\n                match System.Int64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int64\", value)) |> Error\n            else (path, BadPrimitive(\"an int64\", value)) |> Error\n\n    let uint32 : Decoder<uint32> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt32.MaxValue) then\n                    Helpers.asInt value |> uint32 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint32\", value, \"Value was either too large or too small for an uint32\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint32\", value)) |> Error\n            else (path, BadPrimitive(\"an uint32\", value)) |> Error\n\n    let uint64 : Decoder<uint64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt64.MaxValue) then\n                    Helpers.asInt value |> uint64 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint64\", value, \"Value was either too large or too small for an uint64\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint64\", value)) |> Error\n            else (path, BadPrimitive(\"an uint64\", value)) |> Error\n\n    let bigint : Decoder<bigint> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> bigint |> Ok\n            elif Helpers.isString value then\n                // TODO: BigInt.TryParse has been added in Fable 2.1.4\n                // Don't use it for now to support lower Fable versions\n                try\n                    bigint.Parse (Helpers.asString value) |> Ok\n                with _ ->\n                    (path, BadPrimitive(\"a bigint\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a bigint\", value)) |> Error\n\n    let bool : Decoder<bool> =\n        fun path value ->\n            if Helpers.isBoolean value then\n                Ok(Helpers.asBool value)\n            else\n                (path, BadPrimitive(\"a boolean\", value)) |> Error\n\n    let float : Decoder<float> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat value)\n            else\n                (path, BadPrimitive(\"a float\", value)) |> Error\n\n    let decimal : Decoder<decimal> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asFloat value |> decimal |> Ok\n            elif Helpers.isString value then\n                match System.Decimal.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a decimal\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a decimal\", value)) |> Error\n\n    let datetime : Decoder<System.DateTime> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTime.TryParse (Helpers.asString value) with\n                | true, x -> x.ToUniversalTime() |> Ok\n                | _ -> (path, BadPrimitive(\"a datetime\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let datetimeOffset : Decoder<System.DateTimeOffset> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTimeOffset.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a datetimeoffset\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let timespan : Decoder<System.TimeSpan> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.TimeSpan.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a timespan\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a timespan\", value)) |> Error\n\n    /////////////////////////\n    // Object primitives ///\n    ///////////////////////\n\n    let private decodeMaybeNull path (decoder : Decoder<'T>) value =\n        // The decoder may be an option decoder so give it an opportunity to check null values\n        match decoder path value with\n        | Ok v -> Ok(Some v)\n        | Error _ when Helpers.isNullValue value -> Ok None\n        | Error er -> Error er\n\n    let optional (fieldName : string) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then Ok None\n                else decodeMaybeNull (path + \".\" + fieldName) decoder fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let private badPathError fieldNames currentPath value =\n        let currentPath = defaultArg currentPath (\"$\"::fieldNames |> String.concat \".\")\n        let msg = \"an object with path `\" + (String.concat \".\" fieldNames) + \"`\"\n        Error(currentPath, BadPath (msg, value, List.tryLast fieldNames |> Option.defaultValue \"\"))\n\n    let optionalAt (fieldNames : string list) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    if Helpers.isUndefined lastValue then Ok None\n                    else decodeMaybeNull lastPath decoder lastValue\n\n    let field (fieldName: string) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then\n                    Error(path, BadField (\"an object with a field named `\" + fieldName + \"`\", value))\n                else\n                    decoder (path + \".\" + fieldName) fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let at (fieldNames: string list) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        if Helpers.isUndefined curValue then\n                            let res = badPathError fieldNames None firstValue\n                            curPath, curValue, Some res\n                        else\n                            curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    decoder lastPath lastValue\n\n    let index (requestedIndex: int) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            let currentPath = path + \".[\" + (Operators.string requestedIndex) + \"]\"\n            if Helpers.isArray value then\n                let vArray = Helpers.asArray value\n                if requestedIndex < vArray.Length then\n                    decoder currentPath (vArray.[requestedIndex])\n                else\n                    let msg =\n                        \"a longer array. Need index `\"\n                            + (requestedIndex.ToString())\n                            + \"` but there are only `\"\n                            + (vArray.Length.ToString())\n                            + \"` entries\"\n\n                    (currentPath, TooSmallArray(msg, value))\n                    |> Error\n            else\n                (currentPath, BadPrimitive(\"an array\", value))\n                |> Error\n\n    let option (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isNullValue value then Ok None\n            else decoder path value |> Result.map Some\n\n    //////////////////////\n    // Data structure ///\n    ////////////////////\n\n    let list (decoder : Decoder<'value>) : Decoder<'value list> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok [], tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (value::acc))\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"a list\", value))\n                |> Error\n\n    let array (decoder : Decoder<'value>) : Decoder<'value array> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                let arr = Array.zeroCreate tokens.Length\n                (Ok arr, tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> acc.[i] <- value; Ok acc)\n            else\n                (path, BadPrimitive (\"an array\", value))\n                |> Error\n\n    let keyValuePairs (decoder : Decoder<'value>) : Decoder<(string * 'value) list> =\n        fun path value ->\n            if Helpers.isObject value then\n                (Ok [], Helpers.objectKeys value) ||> Seq.fold (fun acc prop ->\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match Helpers.getField prop value |> decoder path with\n                        | Error er -> Error er\n                        | Ok value -> (prop, value)::acc |> Ok)\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"an object\", value))\n                |> Error\n\n    //////////////////////////////\n    // Inconsistent Structure ///\n    ////////////////////////////\n\n    let oneOf (decoders : Decoder<'value> list) : Decoder<'value> =\n        fun path value ->\n            let rec runner (decoders : Decoder<'value> list) (errors : string list) =\n                match decoders with\n                | head::tail ->\n                    match fromValue path head value with\n                    | Ok v ->\n                        Ok v\n                    | Error error -> runner tail (errors @ [error])\n                | [] -> (path, BadOneOf errors) |> Error\n\n            runner decoders []\n\n    //////////////////////\n    // Fancy decoding ///\n    ////////////////////\n\n    let nil (output : 'a) : Decoder<'a> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok output\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let value _ v = Ok v\n\n    let succeed (output : 'a) : Decoder<'a> =\n        fun _ _ ->\n            Ok output\n\n    let fail (msg: string) : Decoder<'a> =\n        fun path _ ->\n            (path, FailMessage msg) |> Error\n\n    let andThen (cb: 'a -> Decoder<'b>) (decoder : Decoder<'a>) : Decoder<'b> =\n        fun path value ->\n            match decoder path value with\n            | Error error -> Error error\n            | Ok result -> cb result path value\n\n    /////////////////////\n    // Map functions ///\n    ///////////////////\n\n    let map\n        (ctor : 'a -> 'value)\n        (d1 : Decoder<'a>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value with\n            | Ok v1 -> Ok (ctor v1)\n            | Error er -> Error er\n\n    let map2\n        (ctor : 'a -> 'b -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value with\n            | Ok v1, Ok v2 -> Ok (ctor v1 v2)\n            | Error er,_ -> Error er\n            | _,Error er -> Error er\n\n    let map3\n        (ctor : 'a -> 'b -> 'c -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value with\n            | Ok v1, Ok v2, Ok v3 -> Ok (ctor v1 v2 v3)\n            | Error er,_,_ -> Error er\n            | _,Error er,_ -> Error er\n            | _,_,Error er -> Error er\n\n    let map4\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4 -> Ok (ctor v1 v2 v3 v4)\n            | Error er,_,_,_ -> Error er\n            | _,Error er,_,_ -> Error er\n            | _,_,Error er,_ -> Error er\n            | _,_,_,Error er -> Error er\n\n    let map5\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5 -> Ok (ctor v1 v2 v3 v4 v5)\n            | Error er,_,_,_,_ -> Error er\n            | _,Error er,_,_,_ -> Error er\n            | _,_,Error er,_,_ -> Error er\n            | _,_,_,Error er,_ -> Error er\n            | _,_,_,_,Error er -> Error er\n\n    let map6\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6 -> Ok (ctor v1 v2 v3 v4 v5 v6)\n            | Error er,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_ -> Error er\n            | _,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,Error er -> Error er\n\n    let map7\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7)\n            | Error er,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,Error er -> Error er\n\n    let map8\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'h -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>)\n        (d8 : Decoder<'h>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value, d8 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7, Ok v8 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7 v8)\n            | Error er,_,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,_,Error er -> Error er\n\n    let dict (decoder : Decoder<'value>) : Decoder<Map<string, 'value>> =\n        map Map.ofList (keyValuePairs decoder)\n\n    //////////////////////\n    // Object builder ///\n    ////////////////////\n\n    type IRequiredGetter =\n        abstract Field : string -> Decoder<'a> -> 'a\n        abstract At : List<string> -> Decoder<'a> -> 'a\n        abstract Raw : Decoder<'a> -> 'a\n\n    type IOptionalGetter =\n        abstract Field : string -> Decoder<'a> -> 'a option\n        abstract At : List<string> -> Decoder<'a> -> 'a option\n        abstract Raw : Decoder<'a> -> 'a option\n\n    type IGetters =\n        abstract Required: IRequiredGetter\n        abstract Optional: IOptionalGetter\n\n    let private unwrapWith (errors: ResizeArray<DecoderError>) path (decoder: Decoder<'T>) value: 'T =\n        match decoder path value with\n        | Ok v -> v\n        | Error er -> errors.Add(er); Unchecked.defaultof<'T>\n\n    type Getters<'T>(path: string, v: 'T) =\n        let mutable errors = ResizeArray<DecoderError>()\n        let required =\n            { new IRequiredGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (field fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (at fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    unwrapWith errors path decoder v }\n        let optional =\n            { new IOptionalGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optional fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optionalAt fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    match decoder path v with\n                    | Ok v -> Some v\n                    | Error((_, reason) as error) ->\n                        match reason with\n                        | BadPrimitive(_,v)\n                        | BadPrimitiveExtra(_,v,_)\n                        | BadType(_,v) ->\n                            if Helpers.isNullValue v then None\n                            else errors.Add(error); Unchecked.defaultof<_>\n                        | BadField _\n                        | BadPath _ -> None\n                        | TooSmallArray _\n                        | FailMessage _\n                        | BadOneOf _ -> errors.Add(error); Unchecked.defaultof<_> }\n        member __.Errors: _ list = Seq.toList errors\n        interface IGetters with\n            member __.Required = required\n            member __.Optional = optional\n\n    let object (builder: IGetters -> 'value) : Decoder<'value> =\n        fun path v ->\n            let getters = Getters(path, v)\n            let result = builder getters\n            match getters.Errors with\n            | [] -> Ok result\n            | fst::_ as errors ->\n                if errors.Length > 1 then\n                    let errors = List.map errorToString errors\n                    (path, BadOneOf errors) |> Error\n                else\n                    Error fst\n\n    ///////////////////////\n    // Tuples decoders ///\n    ////////////////////\n\n    let tuple2 (decoder1: Decoder<'T1>) (decoder2: Decoder<'T2>) : Decoder<'T1 * 'T2> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                succeed (v1, v2)\n            )\n        )\n\n    let tuple3 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>) : Decoder<'T1 * 'T2 * 'T3> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    succeed (v1, v2, v3)\n                )\n            )\n        )\n\n    let tuple4 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>) : Decoder<'T1 * 'T2 * 'T3 * 'T4> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        succeed (v1, v2, v3, v4)\n                    )\n                )\n            )\n        )\n\n    let tuple5 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            succeed (v1, v2, v3, v4, v5)\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple6 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                succeed (v1, v2, v3, v4, v5, v6)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple7 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    succeed (v1, v2, v3, v4, v5, v6, v7)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple8 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>)\n               (decoder8: Decoder<'T8>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    index 7 decoder8\n                                    |> andThen (fun v8 ->\n                                        succeed (v1, v2, v3, v4, v5, v6, v7, v8)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxDecoder (d: Decoder<'T>): BoxedDecoder =\n        !!d // d >> Result.map box\n\n    let inline unboxDecoder (d: BoxedDecoder): Decoder<'T> =\n        !!d // d >> Result.map unbox\n\n    // This is used to force Fable use a generic comparer for map keys\n    let private toMap<'key, 'value when 'key: comparison> (xs: ('key*'value) seq) = Map.ofSeq xs\n    let private toSet<'key when 'key: comparison> (xs: 'key seq) = Set.ofSeq xs\n\n    let private autoObject (decoderInfos: (string * BoxedDecoder)[]) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (decoderInfos, Ok []) ||> Array.foldBack (fun (name, decoder) acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result ->\n                    Helpers.getField name value\n                    |> decoder (path + \".\" + name)\n                    |> Result.map (fun v -> v::result))\n\n    let private autoObject2 (keyDecoder: BoxedDecoder) (valueDecoder: BoxedDecoder) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (Ok [], Helpers.objectKeys(value)) ||> Seq.fold (fun acc name ->\n                match acc with\n                | Error _ -> acc\n                | Ok acc ->\n                    match keyDecoder path name with\n                    | Error er -> Error er\n                    | Ok k ->\n                        Helpers.getField name value\n                        |> valueDecoder (path + \".\" + name)\n                        |> function\n                            | Error er -> Error er\n                            | Ok v -> (k,v)::acc |> Ok)\n\n    let private mixedArray msg (decoders: BoxedDecoder[]) (path: string) (values: JsonValue[]): Result<JsonValue list, DecoderError> =\n        if decoders.Length <> values.Length then\n            (path, sprintf \"Expected %i %s but got %i\" decoders.Length msg values.Length\n            |> FailMessage) |> Error\n        else\n            (values, decoders, Ok [])\n            |||> Array.foldBack2 (fun value decoder acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result -> decoder path value |> Result.map (fun v -> v::result))\n\n    let rec private makeUnion extra isCamelCase t name (path : string) (values: JsonValue[]) =\n        let uci =\n            FSharpType.GetUnionCases(t, allowAccessToPrivateRepresentation=true)\n            |> Array.tryFind (fun x -> x.Name = name)\n        match uci with\n        | None -> (path, FailMessage(\"Cannot find case \" + name + \" in \" + t.FullName)) |> Error\n        | Some uci ->\n            if values.Length = 0 then\n                FSharpValue.MakeUnion(uci, [||], allowAccessToPrivateRepresentation=true) |> Ok\n            else\n                let decoders = uci.GetFields() |> Array.map (fun fi -> autoDecoder extra isCamelCase false fi.PropertyType)\n                mixedArray \"union fields\" decoders path values\n                |> Result.map (fun values -> FSharpValue.MakeUnion(uci, List.toArray values, allowAccessToPrivateRepresentation=true))\n\n    and private autoDecodeRecordsAndUnions extra (isCamelCase : bool) (isOptional : bool) (t: System.Type) : BoxedDecoder =\n        // Add the decoder to extra in case one of the fields is recursive\n        let decoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName decoderRef\n        let decoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let decoders =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let name =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        name, autoDecoder extra isCamelCase false fi.PropertyType)\n                fun path value ->\n                    autoObject decoders path value\n                    |> Result.map (fun xs -> FSharpValue.MakeRecord(t, List.toArray xs, allowAccessToPrivateRepresentation=true))\n\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun path (value: JsonValue) ->\n                    if Helpers.isString(value) then\n                        let name = Helpers.asString value\n                        makeUnion extra isCamelCase t name path [||]\n                    elif Helpers.isArray(value) then\n                        let values = Helpers.asArray value\n                        let name = Helpers.asString values.[0]\n                        makeUnion extra isCamelCase t name path values.[1..]\n                    else (path, BadPrimitive(\"a string or array\", value)) |> Error\n\n            else\n                if isOptional then\n                    // The error will only happen at runtime if the value is not null\n                    // See https://github.com/MangelMaxime/Thoth/pull/84#issuecomment-444837773\n                    boxDecoder(fun path value -> Error(path, BadType(\"an extra coder for \" + t.FullName, value)))\n                else\n                    // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                    // when the return type is a function too, so it doesn't fail immediately\n                    sprintf \"Cannot generate auto decoder for %s. Please pass an extra decoder.\" t.FullName |> failwith\n        decoderRef := decoder\n        decoder\n\n    and private autoDecoder (extra: Map<string, ref<BoxedDecoder>>) isCamelCase (isOptional : bool) (t: System.Type) : BoxedDecoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some decoderRef -> fun path value -> decoderRef.contents path value\n      | None ->\n        if t.IsArray then\n            let decoder = t.GetElementType() |> autoDecoder extra isCamelCase false\n            array decoder |> boxDecoder\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let decoders = FSharpType.GetTupleElements(t) |> Array.map (autoDecoder extra isCamelCase false)\n                fun path value ->\n                    if Helpers.isArray value then\n                        mixedArray \"tuple elements\" decoders path (Helpers.asArray value)\n                        |> Result.map (fun xs -> FSharpValue.MakeTuple(List.toArray xs, t))\n                    else (path, BadPrimitive (\"an array\", value)) |> Error\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase true) |> option |> boxDecoder\n                elif fullname = typedefof<obj list>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase false) |> list |> boxDecoder\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyDecoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    let valueDecoder = t.GenericTypeArguments.[1] |> autoDecoder extra isCamelCase false\n                    oneOf [\n                        autoObject2 keyDecoder valueDecoder\n                        list (tuple2 keyDecoder valueDecoder)\n                    ] |> map (fun ar -> toMap (unbox ar) |> box)\n                elif fullname = typedefof< Set<string> >.FullName then\n                    let decoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    fun path value ->\n                        match array decoder path value with\n                        | Error er -> Error er\n                        | Ok ar -> toSet (unbox ar) |> box |> Ok\n                else\n                    autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxDecoder bool\n            elif fullname = typeof<string>.FullName then\n                boxDecoder string\n            elif fullname = typeof<int>.FullName then\n                boxDecoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxDecoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxDecoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra decoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxDecoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxDecoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxDecoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxDecoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxDecoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxDecoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxDecoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxDecoder guid\n            elif fullname = typeof<obj>.FullName then\n                fun _ v -> Ok v\n            else autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (_,dec) -> ref dec) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateDecoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedDecoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoDecoder (makeExtra extra) isCamelCase false t) |> unboxDecoder\n\n        static member generateDecoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoDecoder (makeExtra extra) isCamelCase false |> unboxDecoder\n\n        static member fromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Result<'T, string> =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            fromString decoder json\n\n        static member unsafeFromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): 'T =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            match fromString decoder json with\n            | Ok x -> x\n            | Error msg -> failwith msg\n","namespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Encode =\n\n    open System.Collections.Generic\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    [<Emit(\"Array.from($0)\")>]\n    let private arrayFrom(x: JsonValue seq): JsonValue = jsNative\n\n    ///**Description**\n    /// Encode a string\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `string`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline string (value : string) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a GUID\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `System.Guid`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let guid (value : System.Guid) : JsonValue =\n        box (value.ToString())\n\n    ///**Description**\n    /// Encode an int\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `int`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline int (value : int) : JsonValue =\n        box value\n\n    let inline uint32 (value : uint32) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `float`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline float (value : float) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Decimal. (Currently decimal gets converted to float.)\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `decimal`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let decimal (value : decimal) : JsonValue =\n        value.ToString() |> string\n\n    ///**Description**\n    /// Encode null\n    ///\n    ///**Parameters**\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let nil : JsonValue =\n        box null\n\n    ///**Description**\n    /// Encode a bool\n    ///**Parameters**\n    ///  * `value` - parameter of type `bool`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline bool (value : bool) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode an object\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `(string * Value) list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let object (values : (string * JsonValue) seq) : JsonValue =\n        let o = obj()\n        for (key, value) in values do\n            o?(key) <- value\n        box o\n\n    ///**Description**\n    /// Encode an array\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value array`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline array (values : JsonValue array) : JsonValue =\n        box values\n\n    ///**Description**\n    /// Encode a list\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let list (values : JsonValue list) : JsonValue =\n        // Don't use List.toArray as it may create a typed array\n        arrayFrom values\n\n    let seq (values : JsonValue seq) : JsonValue =\n        arrayFrom values\n\n    ///**Description**\n    /// Encode a dictionary\n    ///**Parameters**\n    ///  * `values` - parameter of type `Map<string, Value>`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let dict (values : Map<string, JsonValue>) : JsonValue =\n        values\n        |> Map.toList\n        |> object\n\n    let bigint (value : bigint) : JsonValue =\n        box (value.ToString())\n\n    let datetimeOffset (value : System.DateTimeOffset) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    /// **Description**\n    /// Encode a timespan\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.TimeSpan`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let timespan (value : System.TimeSpan) : JsonValue =\n        value.ToString() |> string\n\n    let int64 (value : int64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let uint64 (value : uint64) : JsonValue =\n        box (value.ToString())\n\n    let tuple2\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (v1, v2) : JsonValue =\n        box [| enc1 v1\n               enc2 v2 |]\n\n    let tuple3\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (v1, v2, v3) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3 |]\n\n    let tuple4\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (v1, v2, v3, v4) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4 |]\n\n    let tuple5\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (v1, v2, v3, v4, v5) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5 |]\n\n    let tuple6\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (v1, v2, v3, v4, v5, v6) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6 |]\n\n    let tuple7\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (v1, v2, v3, v4, v5, v6, v7) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7 |]\n\n    let tuple8\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (enc8 : Encoder<'T8>)\n            (v1, v2, v3, v4, v5, v6, v7, v8) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7\n               enc8 v8 |]\n\n    /// **Description**\n    ///\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.DateTime`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let datetime (value : System.DateTime) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    let toString (space: int) (value: JsonValue) : string =\n        JS.JSON.stringify(value, !!null, space)\n\n    ///**Description**\n    /// Encode an option\n    ///**Parameters**\n    ///  * `encoder` - parameter of type `'a -> Value`\n    ///\n    ///**Output Type**\n    ///  * `'a option -> Value`\n    ///\n    ///**Exceptions**\n    ///\n    let option (encoder : 'a -> JsonValue) =\n        Option.map encoder >> Option.defaultWith (fun _ -> nil)\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n    open Fable.Core.DynamicExtensions\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxEncoder (d: Encoder<'T>): BoxedEncoder =\n        !!d\n\n    let inline unboxEncoder (d: BoxedEncoder): Encoder<'T> =\n        !!d\n\n    let rec private autoEncodeRecordsAndUnions extra (isCamelCase : bool) (t: System.Type) : BoxedEncoder =\n        // Add the encoder to extra in case one of the fields is recursive\n        let encoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName encoderRef\n        let encoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let setters =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let targetKey =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        let encode = autoEncoder extra isCamelCase fi.PropertyType\n                        fun (source: obj) (target: JsonValue) ->\n                            let value = FSharpValue.GetRecordField(source, fi)\n                            if not(isNull value) then // Discard null fields\n                                target.[targetKey] <- encode value\n                            target)\n                fun (source: obj) ->\n                    (JsonValue(), setters) ||> Seq.fold (fun target set -> set source target)\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun (value: obj) ->\n                    let info, fields = FSharpValue.GetUnionFields(value, t, allowAccessToPrivateRepresentation=true)\n                    match fields.Length with\n                    | 0 -> string info.Name\n                    | len ->\n                        let fieldTypes = info.GetFields()\n                        let target = Array.zeroCreate<JsonValue> (len + 1)\n                        target.[0] <- string info.Name\n                        for i = 1 to len do\n                            let encode = autoEncoder extra isCamelCase fieldTypes.[i-1].PropertyType\n                            target.[i] <- encode fields.[i-1]\n                        array target\n            else\n                // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                // when the return type is a function too, so it doesn't fail immediately\n                sprintf \"Cannot generate auto encoder for %s. Please pass an extra encoder.\" t.FullName\n                |> failwith\n        encoderRef := encoder\n        encoder\n\n    and private autoEncoder (extra: Map<string, ref<BoxedEncoder>>) isCamelCase (t: System.Type) : BoxedEncoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some encoderRef -> fun v -> encoderRef.contents v\n      | None ->\n        if t.IsArray then\n            let encoder = t.GetElementType() |> autoEncoder extra isCamelCase\n            fun (value: obj) ->\n                value :?> obj seq |> Seq.map encoder |> seq\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let encoders =\n                    FSharpType.GetTupleElements(t)\n                    |> Array.map (autoEncoder extra isCamelCase)\n                fun (value: obj) ->\n                    FSharpValue.GetTupleFields(value)\n                    |> Seq.mapi (fun i x -> encoders.[i] x) |> seq\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    // Evaluate lazily so we don't need to generate the encoder for null values\n                    let encoder = lazy\n                                    t.GenericTypeArguments.[0]\n                                    |> autoEncoder extra isCamelCase\n                                    |> option\n                                    |> boxEncoder\n                    boxEncoder(fun (value: obj) ->\n                        if isNull value then nil\n                        else encoder.Value value)\n                elif fullname = typedefof<obj list>.FullName\n                    || fullname = typedefof<Set<string>>.FullName then\n                    let encoder = t.GenericTypeArguments.[0] |> autoEncoder extra isCamelCase\n                    fun (value: obj) ->\n                        value :?> obj seq |> Seq.map encoder |> seq\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyType = t.GenericTypeArguments.[0]\n                    let valueEncoder = t.GenericTypeArguments.[1] |> autoEncoder extra isCamelCase\n                    if keyType.FullName = typeof<string>.FullName\n                        || keyType.FullName = typeof<System.Guid>.FullName then\n                        fun value ->\n                            // Fable compiles Guids as strings so this works, but maybe we should make the conversion explicit\n                            // (see dotnet version) in case Fable implementation of Guids change\n                            (JsonValue(), value :?> Map<string, obj>)\n                            ||> Seq.fold (fun target (KeyValue(k,v)) ->\n                                target.[k] <- valueEncoder v\n                                target)\n                    else\n                        let keyEncoder = keyType |> autoEncoder extra isCamelCase\n                        fun value ->\n                            value :?> Map<string, obj> |> Seq.map (fun (KeyValue(k,v)) ->\n                                array [|keyEncoder k; valueEncoder v|]) |> seq\n                else\n                    autoEncodeRecordsAndUnions extra isCamelCase t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxEncoder bool\n            elif fullname = typeof<string>.FullName then\n                boxEncoder string\n            elif fullname = typeof<int>.FullName then\n                boxEncoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxEncoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxEncoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra encoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxEncoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxEncoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxEncoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxEncoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxEncoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxEncoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxEncoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxEncoder guid\n            elif fullname = typeof<obj>.FullName then\n                boxEncoder id\n            else\n                autoEncodeRecordsAndUnions extra isCamelCase t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (enc,_) -> ref enc) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateEncoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedEncoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoEncoder (makeExtra extra) isCamelCase t) |> unboxEncoder\n\n        static member generateEncoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoEncoder (makeExtra extra) isCamelCase |> unboxEncoder\n\n        static member toString(space : int, value : 'T, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>) : string =\n            let encoder = Auto.generateEncoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            encoder value |> toString space\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    [<System.Obsolete(\"Please use toString instead\")>]\n    let encode (space: int) (value: JsonValue) : string = toString space value\n","namespace Fulma\n\nopen Fable.React\nopen Fable.React.Props\n\nmodule Reflection =\n\n    open Microsoft.FSharp.Reflection\n    open System\n\n    let getCaseName (case : 'T) =\n#if FABLE_COMPILER\n        Fable.Core.Reflection.getCaseName case\n#else\n        // Get UnionCaseInfo value from the F# reflection tools\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\n        caseInfo.GetCustomAttributes()\n        |> Seq.tryPick (function\n                        | :? CompiledNameAttribute as att -> Some att.CompiledName\n                        | _ -> None)\n        |> Option.defaultWith (fun () -> caseInfo.Name)\n#endif\n\n    let getCaseTag (case : 'T) =\n#if FABLE_COMPILER\n        Fable.Core.Reflection.getCaseTag case\n#else\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\n        caseInfo.Tag\n#endif\n\n[<RequireQualifiedAccess>]\ntype Screen =\n    | All\n    | [<CompiledName(\"desktop\")>] Desktop\n    | [<CompiledName(\"tablet\")>] Tablet\n    | [<CompiledName(\"mobile\")>] Mobile\n    | [<CompiledName(\"widescreen\")>] WideScreen\n    | [<CompiledName(\"touch\")>] Touch\n    | [<CompiledName(\"fullhd\")>] FullHD\n\n    static member ToString (screen : Screen) =\n        match screen with\n        | All -> \"\"\n        | Desktop\n        | Tablet\n        | Mobile\n        | WideScreen\n        | Touch\n        | FullHD -> \"-\" + Reflection.getCaseName screen\n\n[<AutoOpen>]\nmodule Color =\n\n    type IColor =\n        | [<CompiledName(\"is-black\")>] IsBlack\n        | [<CompiledName(\"is-dark\")>] IsDark\n        | [<CompiledName(\"is-light\")>] IsLight\n        | [<CompiledName(\"is-white\")>] IsWhite\n        | [<CompiledName(\"is-primary\")>] IsPrimary\n        | [<CompiledName(\"is-info\")>] IsInfo\n        | [<CompiledName(\"is-success\")>] IsSuccess\n        | [<CompiledName(\"is-warning\")>] IsWarning\n        | [<CompiledName(\"is-danger\")>] IsDanger\n        | [<CompiledName(\"is-link\")>] IsLink\n        | [<CompiledName(\"is-black-bis\")>] IsBlackBis\n        | [<CompiledName(\"is-black-ter\")>] IsBlackTer\n        | [<CompiledName(\"is-grey-darker\")>] IsGreyDarker\n        | [<CompiledName(\"is-grey-dark\")>] IsGreyDark\n        | [<CompiledName(\"is-grey\")>] IsGrey\n        | [<CompiledName(\"is-grey-light\")>] IsGreyLight\n        | [<CompiledName(\"is-grey-lighter\")>] IsGreyLighter\n        | [<CompiledName(\"is-white-ter\")>] IsWhiteTer\n        | [<CompiledName(\"is-white-bis\")>] IsWhiteBis\n        /// Allow you to specify a custom color. The color will be prefixed by \"is-\"\n        | IsCustomColor of string\n        /// Allow you to specify a NoColor case.\n        | NoColor\n\n    let ofColor level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"is-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> Reflection.getCaseName level\n\n[<AutoOpen>]\nmodule Size =\n\n    type ISize =\n        | [<CompiledName(\"is-small\")>] IsSmall\n        | [<CompiledName(\"is-medium\")>] IsMedium\n        | [<CompiledName(\"is-large\")>] IsLarge\n\n    let inline ofSize size =\n        Reflection.getCaseName size\n\n[<RequireQualifiedAccess>]\nmodule TextSize =\n    type Option =\n        | Is1\n        | Is2\n        | Is3\n        | Is4\n        | Is5\n        | Is6\n        | Is7\n\n        static member ToString (x: Option) =\n            Reflection.getCaseTag x + 1 |> string\n\n    let inline generic screen size =\n        \"is-size-\" + Option.ToString size + Screen.ToString screen\n\n    let inline only screen size =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-size-\" + Option.ToString size + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-size-xxx-only`.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule TextAlignment =\n\n    type Option =\n        /// Add `has-text-centered`\n        | [<CompiledName(\"has-text-centered\")>] Centered\n        /// Add `has-text-justified`\n        | [<CompiledName(\"has-text-justified\")>] Justified\n        /// Add `has-text-left`\n        | [<CompiledName(\"has-text-left\")>] Left\n        /// Add `has-text-right`\n        | [<CompiledName(\"has-text-right\")>] Right\n\n        static member inline ToString opt =\n            Reflection.getCaseName opt\n\n    let inline generic screen alignment =\n        Option.ToString alignment + Screen.ToString screen\n\n    let inline only screen alignment =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            Option.ToString alignment + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-size-xxx-only`.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule TextWeight =\n\n    type Option =\n        /// Add `has-text-weight-light`\n        | [<CompiledName(\"has-text-weight-light\")>] Light\n        /// Add `has-text-weight-normal`\n        | [<CompiledName(\"has-text-weight-normal\")>] Normal\n        /// Add `has-text-weight-semi-bold`\n        | [<CompiledName(\"has-text-weight-semi-bold\")>] SemiBold\n        /// Add `has-text-weight-bold`\n        | [<CompiledName(\"has-text-weight-bold\")>] Bold\n\n    let inline internal ofOption opt =\n        Reflection.getCaseName opt\n\n[<RequireQualifiedAccess>]\nmodule TextTransform =\n\n    type Option =\n        /// Add `is-capitalized`\n        | [<CompiledName(\"is-capitalized\")>] Capitalized\n        /// Add `is-lowercase`\n        | [<CompiledName(\"is-lowercase\")>] LowerCase\n        /// Add `is-uppercase`\n        | [<CompiledName(\"is-uppercase\")>] UpperCase\n        /// Add `is-italic`\n        | [<CompiledName(\"is-italic\")>] Italic\n\n        static member inline toClass opt =\n            Reflection.getCaseName opt\n\n[<RequireQualifiedAccess>]\nmodule Display =\n\n    type Option =\n        | [<CompiledName(\"block\")>] Block\n        | [<CompiledName(\"flex\")>] Flex\n        | [<CompiledName(\"inline\")>] Inline\n        | [<CompiledName(\"inline-block\")>] InlineBlock\n        | [<CompiledName(\"inline-flex\")>] InlineFlex\n\n        static member inline toClass opt =\n            Reflection.getCaseName opt\n\n    let internal toDisplayClass screen display =\n        let display = Option.toClass display\n        let screen = Screen.ToString screen\n\n        \"is-\" + display + screen\n\n    let internal toDisplayOnlyClass screen display =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            let display = Option.toClass display\n            let screen = Screen.ToString screen\n            \"is-\" + display + screen + \"-only\"\n\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support display only.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule Modifier =\n    let internal ofBackground level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"has-background-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> \"has-background-\" + (Reflection.getCaseName level).[3..]\n\n    let internal ofText level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"has-text-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> \"has-text-\" + (Reflection.getCaseName level).[3..]\n\n    let internal ofInvisible screen =\n        \"is-invisible\" + Screen.ToString screen\n\n    let internal ofHidden screen =\n        \"is-hidden\" + Screen.ToString screen\n\n    let internal ofInvisibleOnly screen =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-invisible\" + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-invisible-xxx-only`.\" + string x)\n            \"\"\n\n    let internal ofHiddenOnly screen =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-hidden\" + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-hidden-xxx-only`.\" + string x)\n            \"\"\n\n    type IModifier =\n        | BackgroundColor of IColor\n        | TextColor of IColor\n        | TextWeight of TextWeight.Option\n        | TextSize of Screen * TextSize.Option\n        | TextSizeOnly of Screen * TextSize.Option\n        | TextAlignment of Screen * TextAlignment.Option\n        | TextAlignmentOnly of Screen * TextAlignment.Option\n        | TextTransform of TextTransform.Option\n        | Display of Screen * Display.Option\n        | DisplayOnly of Screen * Display.Option\n        | [<CompiledName(\"is-clearfix\")>] IsClearfix\n        | [<CompiledName(\"is-pulled-left\")>] IsPulledLeft\n        | [<CompiledName(\"is-pulled-right\")>] IsPulledRight\n        | [<CompiledName(\"is-marginless\")>] IsMarginless\n        | [<CompiledName(\"is-paddingless\")>] IsPaddingless\n        | [<CompiledName(\"is-overlay\")>] IsOverlay\n        | [<CompiledName(\"is-clipped\")>] IsClipped\n        | [<CompiledName(\"is-radiusless\")>] IsRadiusless\n        | [<CompiledName(\"is-shadowless\")>] IsShadowless\n        | [<CompiledName(\"is-unselectable\")>] IsUnselectable\n        | IsInvisible of Screen * bool\n        | IsHidden of Screen * bool\n        | IsInvisibleOnly of Screen * bool\n        | IsHiddenOnly of Screen * bool\n        | IsSrOnly\n        | IsScreenReaderOnly\n\n    let parseModifiers options =\n        let parseOptions result option =\n            match option with\n            | BackgroundColor color             -> (ofBackground color)::result\n            | TextColor color                   -> (ofText color)::result\n            | TextWeight textWeight             -> (TextWeight.ofOption textWeight)::result\n            | TextSize (screen, size)           -> (TextSize.generic screen size)::result\n            | TextSizeOnly (screen, size)       -> (TextSize.only screen size)::result\n            | TextAlignment (screen, size)      -> (TextAlignment.generic screen size)::result\n            | TextAlignmentOnly (screen, size)  -> (TextAlignment.only screen size)::result\n            | TextTransform transform           -> (TextTransform.Option.toClass transform)::result\n            | Display (screen, display)         -> (Display.toDisplayClass screen display)::result\n            | DisplayOnly (screen, display)     -> (Display.toDisplayOnlyClass screen display)::result\n            | IsInvisible (screen, b)           -> if b then (ofInvisible screen)::result else result\n            | IsInvisibleOnly (screen, b)       -> if b then (ofInvisibleOnly screen)::result else result\n            | IsHidden (screen, b)              -> if b then (ofHidden screen)::result else result\n            | IsHiddenOnly (screen, b)          -> if b then (ofHiddenOnly screen)::result else result\n            | IsSrOnly\n            | IsScreenReaderOnly -> \"is-sr-only\"::result\n            | IsClearfix\n            | IsPulledLeft\n            | IsPulledRight\n            | IsMarginless\n            | IsPaddingless\n            | IsOverlay\n            | IsClipped\n            | IsRadiusless\n            | IsShadowless\n            | IsUnselectable -> (Reflection.getCaseName option)::result\n\n        options |> List.fold parseOptions []\n\n[<AutoOpen>]\nmodule Common =\n    type GenericOption =\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    type GenericOptions =\n        { Props : IHTMLProp list\n          Classes : string list }\n\n        static member Empty =\n            { Props = []; Classes = [] }\n\n        static member Parse(options, parser, ?baseClass, ?baseProps) =\n            let result = options |> List.fold parser GenericOptions.Empty\n\n            let result =\n                match baseClass with\n                | Some baseClass -> result.AddClass(baseClass)\n                | None -> result\n\n            match baseProps with\n            | Some baseProps -> result.AddProps(baseProps)\n            | None -> result\n\n        member this.AddProp(prop : IHTMLProp) =\n            { this with Props = prop::this.Props }\n\n        member this.AddProps(props : IHTMLProp list) =\n            { this with Props = props@this.Props }\n\n        member this.AddClass(cl: string) =\n            { this with Classes = cl::this.Classes }\n\n        member this.RemoveClass(cl: string) =\n            let classes =\n                this.Classes\n                |> List.filter (fun cls ->\n                    cls <> cl\n                )\n            { this with Classes = classes }\n\n        member this.AddCaseName(case: 'T) =\n            Reflection.getCaseName case |> this.AddClass\n\n        member this.AddModifiers(modifiers) =\n            { this with Classes = (modifiers |> Modifier.parseModifiers) @ this.Classes }\n\n        /// Conver to standard element\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement list -> ReactElement, ?children): ReactElement =\n            let children = defaultArg children []\n            // TODO: Remove empty classes?\n            let classes = String.concat \" \" this.Classes |> ClassName :> IHTMLProp\n            el (classes::this.Props) children\n\n        /// Convert to self closing element\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement): ReactElement =\n            // TODO: Remove empty classes?\n            let classes = String.concat \" \" this.Classes |> ClassName :> IHTMLProp\n            el (classes::this.Props)\n\n    let parseOptions (result : GenericOptions) option =\n        match option with\n        | Props props -> result.AddProps props\n        | CustomClass customClass -> result.AddClass customClass\n        | Modifiers modifiers -> result.AddModifiers modifiers\n\n    module Helpers =\n\n        [<System.Obsolete(\"Use GenericOptions.Parse. This build an abstraction layer usable by all the components and helps reduce the bundle size\")>]\n        let classes std (options : string option list) (booleans: (string * bool) list) =\n            let std = (std, options) ||> List.fold (fun complete option ->\n                match option with\n                | Some name -> complete + \" \" + name\n                | None -> complete )\n            (std, booleans) ||> List.fold (fun complete (name, flag) ->\n                if flag then complete + \" \" + name else complete)\n            |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Text =\n    open Fable.React\n\n    let p (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(p, children)\n\n    let div (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(div, children)\n\n    let span (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(span, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Icon =\n\n    type Option =\n        // Sizes\n        | Size of ISize\n        /// Add `is-left` class\n        | [<CompiledName(\"is-left\")>] IsLeft\n        /// Add `is-right` class\n        | [<CompiledName(\"is-right\")>] IsRight\n        // Extra\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <span class=\"icon\"></span>\n    let icon options children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            // Sizes\n            | Size size -> ofSize size |> result.AddClass\n            // Position\n            | IsLeft\n            | IsRight -> result.AddCaseName option\n            // Extra\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"icon\").ToReactElement(span, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Heading =\n\n    type Option =\n        /// Add `is-1` class\n        | [<CompiledName(\"is-1\")>]Is1\n        /// Add `is-2` class\n        | [<CompiledName(\"is-2\")>]Is2\n        /// Add `is-3` class\n        | [<CompiledName(\"is-3\")>]Is3\n        /// Add `is-4` class\n        | [<CompiledName(\"is-4\")>]Is4\n        /// Add `is-5` class\n        | [<CompiledName(\"is-5\")>]Is5\n        /// Add `is-6` class\n        | [<CompiledName(\"is-6\")>]Is6\n        /// Add `subtitle` class\n        | [<CompiledName(\"subtitle`\")>]IsSubtitle\n        /// Add `is-spaced` class\n        | [<CompiledName(\"is-spaced\")>]IsSpaced\n        // Extra\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    let internal title (element : IHTMLProp list -> ReactElement list -> ReactElement) (options : Option list)\n        (children) =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            // Sizes\n            | Is1\n            | Is2\n            | Is3\n            | Is4\n            | Is5\n            | Is6\n            | IsSpaced -> result.AddCaseName option\n            // Styles\n            | IsSubtitle ->\n                result.RemoveClass(\"title\").AddClass(\"subtitle\")\n            // Extra\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, baseClass=\"title\").ToReactElement(element, children)\n\n    // Alias\n    /// Generate <h1 class=\"title is-1\"></h1>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h1 (options : Option list) = title h1 (Is1 :: options)\n    /// Generate <h2 class=\"title is-2\"></h2>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h2 (options : Option list) = title h2 (Is2 :: options)\n    /// Generate <h3 class=\"title is-3\"></h3>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h3 (options : Option list) = title h3 (Is3 :: options)\n    /// Generate <h4 class=\"title is-4\"></h4>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h4 (options : Option list) = title h4 (Is4 :: options)\n    /// Generate <h5 class=\"title is-5\"></h5>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h5 (options : Option list) = title h5 (Is5 :: options)\n    /// Generate <h6 class=\"title is-6\"></h6>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let h6 (options : Option list) = title h6 (Is6 :: options)\n    /// Generate <p class=\"title\"></p>\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\n    let p opts children = title p opts children\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Columns =\n\n    type ISize =\n        | [<CompiledName(\"is-1\")>] Is1\n        | [<CompiledName(\"is-2\")>] Is2\n        | [<CompiledName(\"is-3\")>] Is3\n        | [<CompiledName(\"is-4\")>] Is4\n        | [<CompiledName(\"is-5\")>] Is5\n        | [<CompiledName(\"is-6\")>] Is6\n        | [<CompiledName(\"is-7\")>] Is7\n        | [<CompiledName(\"is-8\")>] Is8\n\n        static member ToString (x : ISize)=\n            Reflection.getCaseName x\n\n    let inline private gapSizeGeneric (screen : Screen) (size : ISize) =\n        \"is-\" + ISize.ToString size + Screen.ToString screen\n\n    let inline private gapSizeOnly (screen : Screen) (size : ISize) =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-\" + ISize.ToString size + Screen.ToString screen + \"-only\"\n        | x ->\n            let msg = sprintf \"Screen `%s` does not support `is-%s-%s-only`.\" (Screen.ToString x) (ISize.ToString size) (Screen.ToString x)\n            Fable.Core.JS.console.warn(msg)\n            \"\"\n\n    type Option =\n        /// Add `is-centered` class\n        | [<CompiledName(\"is-centered\")>] IsCentered\n        /// Add `is-vcentered` class\n        | [<CompiledName(\"is-vcentered\")>] IsVCentered\n        /// Add `is-multiline` class\n        | [<CompiledName(\"is-multiline\")>] IsMultiline\n        /// Add `is-gapless` class\n        | [<CompiledName(\"is-gapless\")>] IsGapless\n        /// Add `is-grid` class\n        | [<CompiledName(\"is-grid\")>] IsGrid\n        /// Add `is-mobile` class\n        | [<CompiledName(\"is-mobile\")>] IsMobile\n        /// Add `is-desktop` class\n        | [<CompiledName(\"is-desktop\")>] IsDesktop\n        /// Configure the gap size. You can configure the display and gap size\n        /// Example: Columns.IsGap (Columns.Desktop, Columns.Is6)\n        /// Becomes: `is-6-desktop`\n        | IsGap of Screen * ISize\n        /// Configure the gap size. You can configure the display and gap size\n        /// Example: Columns.IsGapOnly (Columns.Tablet, Columns.Is6)\n        /// Becomes: `is-6-tablet-only`\n        | IsGapOnly of Screen * ISize\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"columns\"></div>\n    let columns (options: Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsCentered\n            | IsVCentered\n            | IsMultiline\n            | IsGapless\n            | IsGrid\n            | IsMobile\n            | IsDesktop -> result.AddCaseName option\n            | IsGap (screen, size) ->\n                if not (List.contains \"is-variable\" result.Classes) then\n                    result.AddClass(\"is-variable\").AddClass(gapSizeGeneric screen size)\n                else\n                    result.AddClass(gapSizeGeneric screen size)\n            | IsGapOnly (screen, size) ->\n                if not (List.contains \"is-variable\" result.Classes) then\n                    result.AddClass(\"is-variable\").AddClass(gapSizeOnly screen size)\n                else\n                    result.AddClass(gapSizeOnly screen size)\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"columns\").ToReactElement(div, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Section =\n\n    type Option =\n        | Props of IHTMLProp list\n        | CustomClass of string\n        /// Add `is-medium` class\n        | [<CompiledName(\"is-medium\")>] IsMedium\n        /// Add `is-large` class\n        | [<CompiledName(\"is-large\")>] IsLarge\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <section class=\"section\"></section>\n    let section (options: Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsMedium\n            | IsLarge -> result.AddCaseName option\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"section\").ToReactElement(section, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\nopen Browser.Types\n\n[<RequireQualifiedAccess>]\nmodule Button =\n\n    type Option =\n        // Colors\n        | Color of IColor\n        | Size of ISize\n        /// Add `is-fullwidth` class\n        | [<CompiledName(\"is-fullwidth\")>] IsFullWidth\n        /// Add `is-link` class\n        | [<CompiledName(\"is-link\")>] IsLink\n        /// Add `is-outlined` class\n        | [<CompiledName(\"is-outlined\")>] IsOutlined\n        /// Add `is-inverted` class\n        | [<CompiledName(\"is-inverted\")>] IsInverted\n        /// Add `is-text` class\n        | [<CompiledName(\"is-text\")>] IsText\n        /// Add `is-rounded` class\n        | [<CompiledName(\"is-rounded\")>] IsRounded\n        /// Add `is-expanded` class\n        | [<CompiledName(\"is-expanded\")>] IsExpanded\n        /// Add `is-hovered` class if true\n        | [<CompiledName(\"is-hovered\")>] IsHovered of bool\n        /// Add `is-focused` class if true\n        | [<CompiledName(\"is-focused\")>] IsFocused of bool\n        /// Add `is-active` class if true\n        | [<CompiledName(\"is-active\")>] IsActive of bool\n        /// Add `is-loading` class if true\n        | [<CompiledName(\"is-loading\")>] IsLoading of bool\n        /// Add `is-static` class if true\n        | [<CompiledName(\"is-static\")>] IsStatic of bool\n        /// Set `disabled` HTMLAttr\n        | Disabled of bool\n        | Props of IHTMLProp list\n        | OnClick of (MouseEvent -> unit)\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    let internal btnView element (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Color color -> ofColor color |> result.AddClass\n            | Size size -> ofSize size |> result.AddClass\n            // Styles\n            | IsLink\n            | IsFullWidth\n            | IsOutlined\n            | IsInverted\n            | IsText\n            | IsRounded\n            | IsExpanded -> result.AddCaseName option\n            // States\n            | IsHovered state\n            | IsFocused state\n            | IsActive state\n            | IsLoading state\n            | IsStatic state -> if state then result.AddCaseName option else result\n            | Disabled isDisabled -> Fable.React.Props.Disabled isDisabled |> result.AddProp\n            | OnClick cb -> DOMAttr.OnClick cb |> result.AddProp\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"button\").ToReactElement(element, children)\n\n    /// Generate <button class=\"button\"></button>\n    let button options children = btnView button options children\n    /// Generate <span class=\"button\"></span>\n    let span options children = btnView span options children\n    /// Generate <a class=\"button\"></a>\n    let a options children = btnView a options children\n\n    module Input =\n        let internal btnInput typ options =\n            let hasProps =\n                options\n                |> List.exists (fun opts ->\n                    match opts with\n                    | Props _ -> true\n                    | _ -> false\n                )\n\n            if hasProps then\n                let newOptions =\n                    options\n                    |> List.map (fun opts ->\n                        match opts with\n                        | Props props -> Props ((Type typ :> IHTMLProp) ::props)\n                        | forward -> forward\n                    )\n                btnView (fun options _ -> input options) newOptions [ ]\n\n            else\n                btnView (fun options _ -> input options) ((Props [ Type typ ])::options) [ ]\n\n        /// Generate <input type=\"reset\" class=\"button\" />\n        let reset options = btnInput \"reset\" options\n        /// Generate <input type=\"submit\" class=\"button\" />\n        let submit options = btnInput \"submit\" options\n\n    module List =\n\n        type Option =\n            | [<CompiledName(\"has-addons\")>] HasAddons\n            | [<CompiledName(\"is-centered\")>] IsCentered\n            | [<CompiledName(\"is-right\")>] IsRight\n            // | Size of ISize\n            | Props of IHTMLProp list\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"buttons\"></div>\n    let list (options : List.Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | List.HasAddons\n            | List.IsCentered\n            | List.IsRight -> result.AddCaseName option\n            | List.Props props -> result.AddProps props\n            | List.CustomClass customClass -> result.AddClass customClass\n            | List.Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"buttons\").ToReactElement(div, children)\n","namespace Fable.FontAwesome\n\nopen Fable.Core\nopen Fable.React\nopen Fable.React.Props\n\nmodule internal Helpers =\n\n    let classes std (options : string option list) (booleans: (string * bool) list) =\n        let std = (std, options) ||> List.fold (fun complete opt ->\n            match opt with Some name -> complete + \" \" + name | None -> complete)\n        (std, booleans) ||> List.fold (fun complete (name, flag) ->\n            if flag then complete + \" \" + name else complete)\n        |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Fa =\n\n    module Classes =\n        module Size =\n            let [<Literal>] FaExtraSmall = \"fa-xs\"\n            let [<Literal>] FaSmall = \"fa-sm\"\n            let [<Literal>] FaLarge = \"fa-lg\"\n            let [<Literal>] Fa2x = \"fa-2x\"\n            let [<Literal>] Fa3x = \"fa-3x\"\n            let [<Literal>] Fa4x = \"fa-4x\"\n            let [<Literal>] Fa5x = \"fa-5x\"\n            let [<Literal>] Fa6x = \"fa-6x\"\n            let [<Literal>] Fa7x = \"fa-7x\"\n            let [<Literal>] Fa8x = \"fa-8x\"\n            let [<Literal>] Fa9x = \"fa-9x\"\n            let [<Literal>] Fa10 = \"fa-10x\"\n\n        module Style =\n            let [<Literal>] FixedWidth = \"fa-fw\"\n            let [<Literal>] IsLi = \"fa-li\"\n            let [<Literal>] Border = \"fa-border\"\n            let [<Literal>] Inverse = \"fa-inverse\"\n\n        module Rotations =\n            let [<Literal>] Rotate90 = \"fa-rotate-90\"\n            let [<Literal>] Rotate180 = \"fa-rotate-180\"\n            let [<Literal>] Rotate270 = \"fa-rotate-270\"\n\n        module Flips =\n            let [<Literal>] Horizontal = \"fa-flip-horizontal\"\n            let [<Literal>] Vertical = \"fa-flip-vertical\"\n\n        module Animations =\n            let [<Literal>] Spin = \"fa-spin\"\n            let [<Literal>] Pulse = \"fa-pulse\"\n\n        module Pull =\n            let [<Literal>] Right = \"fa-pull-right\"\n            let [<Literal>] Left = \"fa-pull-left\"\n\n        module Stack =\n\n            let [<Literal>] Container = \"fa-stack\"\n\n            module Size =\n                let [<Literal>] Fa1x = \"fa-stack-1x\"\n                let [<Literal>] Fa2x = \"fa-stack-2x\"\n\n    type ISize =\n        | FaExtraSmall\n        | FaSmall\n        | FaLarge\n        | Fa2x\n        | Fa3x\n        | Fa4x\n        | Fa5x\n        | Fa6x\n        | Fa7x\n        | Fa8x\n        | Fa9x\n        | Fa10\n\n    type IconOption =\n        | Size of ISize\n        | Border\n        | PullLeft\n        | PullRight\n        | Inverse\n        | Rotate90\n        | Rotate180\n        | Rotate270\n        | FlipHorizontal\n        | FlipVertical\n        | IsLi\n        | Icon of string\n        | Spin\n        | Pulse\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | FixedWidth\n        | Stack1x\n        | Stack2x\n\n    let internal ofSize (size : ISize) =\n        match size with\n        | FaExtraSmall -> Classes.Size.FaExtraSmall\n        | FaSmall -> Classes.Size.FaSmall\n        | FaLarge -> Classes.Size.FaLarge\n        | Fa2x -> Classes.Size.Fa2x\n        | Fa3x -> Classes.Size.Fa3x\n        | Fa4x -> Classes.Size.Fa4x\n        | Fa5x -> Classes.Size.Fa5x\n        | Fa6x -> Classes.Size.Fa6x\n        | Fa7x -> Classes.Size.Fa7x\n        | Fa8x -> Classes.Size.Fa8x\n        | Fa9x -> Classes.Size.Fa9x\n        | Fa10 -> Classes.Size.Fa10\n\n    type IconOptions =\n        { Icon : string option\n          Size : string option\n          Border : string option\n          Pull : string option\n          HaveSpin : bool\n          HavePulse : bool\n          Rotation : string option\n          Flip : string option\n          IsInverse : bool\n          Props : IHTMLProp list\n          FixedWidth : bool\n          IsLi : bool\n          StackSize : string option\n          CustomClass : string option }\n\n        static member Empty =\n            { Icon = None\n              Size = None\n              Border = None\n              Pull = None\n              HaveSpin = false\n              HavePulse = false\n              Rotation = None\n              Flip = None\n              IsInverse = false\n              Props = [ ]\n              FixedWidth = false\n              IsLi = false\n              StackSize = None\n              CustomClass = None }\n\n    let toIconOptions (faOptions: IconOption list) =\n        let parseOptions (result: IconOptions) (option: IconOption) =\n            match option with\n            | Size s ->\n                { result with Size = ofSize s |> Some }\n            | Border ->\n                { result with Border = Some Classes.Style.Border }\n            | PullLeft ->\n                { result with Pull = Some Classes.Pull.Left }\n            | PullRight ->\n                { result with Pull = Some Classes.Pull.Right }\n            | Inverse ->\n                { result with IsInverse = true }\n            | Icon faIcon ->\n                { result with Icon = faIcon |> Some }\n            | Rotate90 ->\n                { result with Rotation = Classes.Rotations.Rotate90 |> Some }\n            | Rotate180 ->\n                { result with Rotation = Classes.Rotations.Rotate180 |> Some }\n            | Rotate270 ->\n                { result with Rotation = Classes.Rotations.Rotate270 |> Some }\n            | FlipHorizontal ->\n                { result with Rotation = Classes.Flips.Horizontal |> Some }\n            | FlipVertical ->\n                { result with Rotation = Classes.Flips.Vertical |> Some }\n            | Spin ->\n                { result with HaveSpin = true }\n            | Pulse ->\n                { result with HavePulse = true }\n            | Props props ->\n                { result with Props = props }\n            | FixedWidth ->\n                { result with FixedWidth = true }\n            | IsLi ->\n                { result with IsLi = true }\n            | CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack1x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa1x }\n            | Stack2x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa2x }\n\n        faOptions |> List.fold parseOptions IconOptions.Empty\n\n    /// Logic used to display one icon alone or as one item in an unordered list:\n    let internal displayIcon baseElement baseClass (opts: IconOptions) children  =\n        let classes =\n            Helpers.classes baseClass\n                [ opts.Icon\n                  opts.Size\n                  opts.Border\n                  opts.Pull\n                  opts.Rotation\n                  opts.Flip\n                  opts.CustomClass\n                  opts.StackSize ]\n                [ Classes.Style.FixedWidth, opts.FixedWidth\n                  Classes.Style.IsLi, opts.IsLi\n                  Classes.Animations.Pulse, opts.HavePulse\n                  Classes.Animations.Spin, opts.HaveSpin\n                  Classes.Style.Inverse, opts.IsInverse ]\n\n        baseElement (classes::opts.Props)\n          children\n\n    let ul props children =\n        ul [ ClassName \"fa-ul\" ]\n            children\n\n    let ol props children =\n        ol [ ClassName \"fa-ul\" ]\n            children\n\n    let i (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon i \"\" opts children\n\n    let span (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon span \"\" opts children\n\n    module Stack =\n        type Option =\n            | Size of ISize\n            | CustomClass of string\n            | Props of IHTMLProp list\n\n        type internal Options =\n            { Size : string option\n              Props : IHTMLProp list\n              CustomClass : string option }\n\n            static member Empty =\n                { Size = None\n                  Props = [ ]\n                  CustomClass = None }\n\n\n    let stack options children =\n        let parseOption (result : Stack.Options) opt =\n            match opt with\n            | Stack.Size size ->\n                { result with Size = ofSize size |> Some }\n            | Stack.CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack.Props props ->\n                { result with Props = props }\n\n        let opts = options |> List.fold parseOption Stack.Options.Empty\n        let classes = Helpers.classes\n                        Classes.Stack.Container\n                        ( opts.Size\n                            :: opts.CustomClass\n                            :: [] )\n                        [ ]\n\n        Fable.React.Standard.span (classes::opts.Props)\n            children\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\nopen Browser.Types\n\n[<RequireQualifiedAccess>]\nmodule Input =\n\n    module Classes =\n        let [<Literal>] Container = \"input\"\n        module State =\n            let [<Literal>] IsFocused = \"is-focused\"\n            let [<Literal>] IsActive = \"is-active\"\n            let [<Literal>] IsHovered = \"is-hovered\"\n            let [<Literal>] IsLoading = \"is-loading\"\n            let [<Literal>] IsStatic = \"is-static\"\n        module Styles =\n            let [<Literal>] IsRounded = \"is-rounded\"\n        module Size =\n            let [<Literal>] IsSmall = \"is-small\"\n            let [<Literal>] IsMedium = \"is-medium\"\n            let [<Literal>] IsLarge = \"is-large\"\n            let [<Literal>] IsFullwidth = \"is-fullwidth\"\n            let [<Literal>] IsInline = \"is-inline\"\n\n    type IInputType =\n        | Text\n        | Password\n        | DatetimeLocal\n        | Date\n        | Month\n        | Time\n        | Week\n        | Number\n        | Email\n        | Url\n        | Search\n        | Tel\n        | ColorType\n\n    type Option =\n        | Size of ISize\n        /// Set `Type` HTMLAttr\n        /// Don't use if you used one of the helpers like: `Input.password`\n        | Type of IInputType\n        | Color of IColor\n        /// Set `Id` HTMLAttr\n        | Id of string\n        /// Add `disabled` HTMLAttr if true\n        | Disabled of bool\n        /// Set `IsReadOnly` HTMLAttr\n        | IsReadOnly of bool\n        /// Add `is-static` class if true\n        | [<CompiledName(\"is-static\")>] IsStatic of bool\n        /// Add `is-rounded` class\n        | [<CompiledName(\"is-rounded\")>] IsRounded\n        /// Set `Value` HTMLAttr\n        | Value of string\n        | Key of string\n        /// Set `DefaultValue` HTMLAttr\n        | DefaultValue of string\n        /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n        | ValueOrDefault of string\n        /// Set `Placeholder` HTMLAttr\n        | Placeholder of string\n        | OnChange of (Event -> unit)\n        | Ref of (Element->unit)\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    let private ofType (typ : IInputType) =\n        match typ with\n        | Text -> \"text\"\n        | Password -> \"password\"\n        | DatetimeLocal -> \"datetime-local\"\n        | Date -> \"date\"\n        | Month -> \"month\"\n        | Time -> \"time\"\n        | Week -> \"week\"\n        | Number -> \"number\"\n        | Email -> \"email\"\n        | Url -> \"url\"\n        | Search -> \"search\"\n        | Tel -> \"tel\"\n        | IInputType.ColorType -> \"color\"\n\n    open Fable.Core.JsInterop\n\n    /// Generate <input class=\"input\" />\n    let input (options : Option list) =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsStatic state -> if state then result.AddCaseName option else result\n            | IsRounded -> result.AddCaseName option\n            | Size size -> ofSize size |> result.AddClass\n            | Color color -> ofColor color |> result.AddClass\n            | Type type' -> Props.Type (ofType type') |> result.AddProp\n            | Id id -> Props.Id id |> result.AddProp\n            | Disabled disabled -> Props.Disabled disabled |> result.AddProp\n            | IsReadOnly state -> Props.ReadOnly state |> result.AddProp\n            | Value value -> Props.Value value |> result.AddProp\n            | DefaultValue defaultValue -> Props.DefaultValue defaultValue |> result.AddProp\n            | ValueOrDefault valueOrDefault ->\n                Props.Ref <| (fun e ->\n                    if e |> isNull |> not\n                        && !!e?value <> valueOrDefault then\n                        e?value <- valueOrDefault\n                ) |> result.AddProp\n            | Placeholder placeholder -> Props.Placeholder placeholder |> result.AddProp\n            | OnChange cb -> Props.OnChange cb |> result.AddProp\n            | Ref ref -> Props.Ref ref |> result.AddProp\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n            | Key k -> Props.Prop.Key k |> result.AddProp\n\n        GenericOptions.Parse(options, parseOptions, \"input\").ToReactElement(input)\n\n    /// Generate <input type=\"text\" class=\"input\" />\n    let inline text options = input (Type Text :: options)\n    /// Generate <input type=\"password\" class=\"input\" />\n    let inline password options = input (Type Password :: options)\n    /// Generate <input type=\"datetime-local\" class=\"input\" />\n    let inline datetimeLocal options = input (Type DatetimeLocal :: options)\n    /// Generate <input type=\"date\" class=\"input\" />\n    let inline date options = input (Type Date :: options)\n    /// Generate <input type=\"month\" class=\"input\" />\n    let inline month options = input (Type Month :: options)\n    /// Generate <input type=\"time\" class=\"input\" />\n    let inline time options = input (Type Time :: options)\n    /// Generate <input type=\"week\" class=\"input\" />\n    let inline week options = input (Type Week :: options)\n    /// Generate <input type=\"number\" class=\"input\" />\n    let inline number options = input (Type Number :: options)\n    /// Generate <input type=\"email\" class=\"input\" />\n    let inline email options = input (Type Email :: options)\n    /// Generate <input type=\"url\" class=\"input\" />\n    let inline url options = input (Type Url :: options)\n    /// Generate <input type=\"search\" class=\"input\" />\n    let inline search options = input (Type Search :: options)\n    /// Generate <input type=\"tel\" class=\"input\" />\n    let inline tel options = input (Type Tel :: options)\n    /// Generate <input type=\"color\" class=\"input\" />\n    let inline color options = input (Type IInputType.ColorType :: options)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Dropdown =\n\n    type Option =\n        /// Add `is-active` class if true\n        | [<CompiledName(\"is-active\")>] IsActive of bool\n        /// Add `is-hoverable` class\n        | [<CompiledName(\"is-hoverable\")>] IsHoverable\n        /// Add `is-right` class\n        | [<CompiledName(\"is-right\")>] IsRight\n        /// Add `is-up` class\n        | [<CompiledName(\"is-up\")>] IsUp\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"dropdown\"></div>\n    let dropdown (options: Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsActive state -> if state then result.AddCaseName option else result\n            | IsRight\n            | IsHoverable\n            | IsUp as opt -> result.AddCaseName option\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"dropdown\").ToReactElement(div, children)\n\n    /// Generate <div class=\"dropdown-menu\"></div>\n    let menu (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"dropdown-menu\").ToReactElement(div, children)\n\n    /// Generate <div class=\"dropdown-content\"></div>\n    let content (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"dropdown-content\").ToReactElement(div, children)\n\n    /// Generate <div class=\"dropdown-divider\"></div>\n    let divider (options: GenericOption list) =\n        GenericOptions.Parse(options, parseOptions, \"dropdown-divider\").ToReactElement(hr)\n\n    /// Generate <div class=\"dropdown-trigger\"></div>\n    let trigger (options: GenericOption list) =\n        GenericOptions.Parse(options, parseOptions, \"dropdown-trigger\").ToReactElement(hr)\n\n    module Item =\n        type Option =\n            /// Add `is-active` class if true\n            | [<CompiledName(\"is-active\")>] IsActive of bool\n            | Props of IHTMLProp list\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n\n        let internal item element (options: Option list) children =\n            let parseOptions (result : GenericOptions) option =\n                match option with\n                | IsActive state -> if state then result.AddCaseName option else result\n                | Props props -> result.AddProps props\n                | CustomClass customClass -> result.AddClass customClass\n                | Modifiers modifiers -> result.AddModifiers modifiers\n\n            GenericOptions.Parse(options, parseOptions, \"dropdown-item\").ToReactElement(element, children)\n\n        /// Generate <div class=\"dropdown-item\"></div>\n        let div x y = item div x y\n\n        /// Generate <a class=\"dropdown-item\"></a>\n        let a x y = item a x y\n\n        /// Generate <button class=\"dropdown-item\"></button>\n        let button x y = item button x y\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    constructor() {\n        this.callCount = 0;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder\";\nimport { CancellationToken } from \"./AsyncBuilder\";\nimport { protectedCont } from \"./AsyncBuilder\";\nimport { protectedBind } from \"./AsyncBuilder\";\nimport { protectedReturn } from \"./AsyncBuilder\";\nimport { choice1, choice2 } from \"./Option\";\nimport { map } from \"./Seq\";\n// Implemented just for type references\nexport default class Async {\n}\nfunction emptyContinuation(x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(choice1(x)),\n            onError: (ex) => ctx.onSuccess(choice2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = null;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec (dispatch:Dispatch<'msg>) (cmd:Cmd<'msg>) =\n        cmd |> List.iter (fun sub -> sub dispatch)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsync =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block to the message\n        let result (task: Async<'msg>)  : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch x\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","(**\nProgram\n---------\nCore abstractions for creating and running the dispatch loop.\n\n*)\n\nnamespace Elmish\n\n\n/// Program type captures various aspects of program behavior\ntype Program<'arg, 'model, 'msg, 'view> = private {\n    init : 'arg -> 'model * Cmd<'msg>\n    update : 'msg -> 'model -> 'model * Cmd<'msg>\n    subscribe : 'model -> Cmd<'msg>\n    view : 'model -> Dispatch<'msg> -> 'view\n    setState : 'model -> Dispatch<'msg> -> unit\n    onError : (string*exn) -> unit\n    syncDispatch: Dispatch<'msg> -> Dispatch<'msg>\n}\n\n/// Program module - functions to manipulate program instances\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Program =\n    /// Typical program, new commands are produced by `init` and `update` along with the new state.\n    let mkProgram \n        (init : 'arg -> 'model * Cmd<'msg>) \n        (update : 'msg -> 'model -> 'model * Cmd<'msg>)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init\n          update = update\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Simple program that produces only new state with `init` and `update`.\n    let mkSimple \n        (init : 'arg -> 'model) \n        (update : 'msg -> 'model -> 'model)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init >> fun state -> state,Cmd.none\n          update = fun msg -> update msg >> fun state -> state,Cmd.none\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Subscribe to external source of events.\n    /// The subscription is called once - with the initial model, but can dispatch new messages at any time.\n    let withSubscription (subscribe : 'model -> Cmd<'msg>) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let sub model =\n            Cmd.batch [ program.subscribe model\n                        subscribe model ]\n        { program with subscribe = sub }\n\n    /// Trace all the updates to the console\n    let withConsoleTrace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let traceInit (arg:'arg) =\n            let initModel,cmd = program.init arg\n            Log.toConsole (\"Initial state:\", initModel)\n            initModel,cmd\n\n        let traceUpdate msg model =\n            Log.toConsole (\"New message:\", msg)\n            let newModel,cmd = program.update msg model\n            Log.toConsole (\"Updated state:\", newModel)\n            newModel,cmd\n\n        { program with\n            init = traceInit \n            update = traceUpdate }\n\n    /// Trace all the messages as they update the model\n    let withTrace trace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let update msg model =\n            let state,cmd = program.update msg model\n            trace msg state\n            state,cmd\n        { program\n            with update = update }\n\n    /// Handle dispatch loop exceptions\n    let withErrorHandler onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = onError }\n\n    /// For library authors only: map existing error handler and return new `Program` \n    let mapErrorHandler map (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = map program.onError }\n\n    /// For library authors only: function to render the view with the latest state \n    let withSetState (setState:'model -> Dispatch<'msg> -> unit)\n                     (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with setState = setState }\n\n    /// For library authors only: return the function to render the state \n    let setState (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.setState\n\n    /// For library authors only: return the view function \n    let view (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.view\n\n    /// For library authors only: function to synchronize the dispatch function\n    let withSyncDispatch (syncDispatch:Dispatch<'msg> -> Dispatch<'msg>)\n                         (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with syncDispatch = syncDispatch }\n\n    /// For library authors only: map the program type\n    let map mapInit mapUpdate mapView mapSetState mapSubscribe\n            (program: Program<'arg, 'model, 'msg, 'view>) =\n        { init = mapInit program.init\n          update = mapUpdate program.update\n          view = mapView program.view\n          setState = mapSetState program.setState\n          subscribe = mapSubscribe program.subscribe\n          onError = program.onError\n          syncDispatch = id }\n\n    /// Start the program loop.\n    /// arg: argument to pass to the init() function.\n    /// program: program created with 'mkSimple' or 'mkProgram'.\n    let runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let (model,cmd) = program.init arg\n        let rb = RingBuffer 10\n        let mutable reentered = false\n        let mutable state = model        \n        let rec dispatch msg = \n            if reentered then\n                rb.Push msg\n            else\n                reentered <- true\n                let mutable nextMsg = Some msg\n                while Option.isSome nextMsg do\n                    let msg = nextMsg.Value\n                    try\n                        let (model',cmd') = program.update msg state\n                        program.setState model' syncDispatch\n                        cmd' |> Cmd.exec syncDispatch\n                        state <- model'\n                    with ex ->\n                        program.onError (sprintf \"Unable to process the message: %A\" msg, ex)\n                    nextMsg <- rb.Pop()\n                reentered <- false\n        and syncDispatch = program.syncDispatch dispatch            \n\n        program.setState model syncDispatch\n        let sub = \n            try \n                program.subscribe model \n            with ex ->\n                program.onError (\"Unable to subscribe:\", ex)\n                Cmd.none\n        sub @ cmd |> Cmd.exec syncDispatch\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let run (program: Program<unit, 'model, 'msg, 'view>) = runWith () program\n","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","module App\n\nopen Fable.Core\nopen Fable.Core.JsInterop\n\nopen Browser\nopen Browser.Types\nopen Browser.Url\n\nopen Elmish\nopen Elmish.React\nopen Fable.React\nopen Fable.React.Props\nopen Elmish.Debug\nopen Elmish.HMR\nopen Thoth.Json\n\nopen Fulma\nopen Fable.FontAwesome\nopen Fable.FontAwesome.Free\n\nopen WaveSurfer\nopen System.IO\nopen Fable.Import\nopen System.Runtime.CompilerServices\nopen Fable.React.ReactiveComponents\nopen Fable.Import\nopen System.Text\nopen System\n\n//Fable 2 transition\nlet inline toJson x = Encode.Auto.toString(4, x)\nlet inline ofJson<'T> json = Decode.Auto.unsafeFromString<'T>(json)\n\n\n// Todo: tests\nlet randomFeature() = [1;2;3]\n\n// Domain\n// ---------------------------------------\n/// Rather specific to https://github.com/aolney/SouthParkTTSData , but only Start/Stop/Text are required fields\ntype Datum = \n  {\n    Start : int\n    Stop: int\n    Text: string\n    ///Numerics expanded to words, e.g. $4 --> \"four dollars\"\n    ExpandedText : string\n    Id: string\n    WavFile: string\n    FrontAligned: bool\n    EndAligned: bool\n    SumAlignmentDiff: int\n    ProportionAligned: float\n    Status : string //because this is not in our original data, we need a custom decoder with default value\n  }\n  static member Decoder : Decoder<Datum> =\n      Decode.object\n          (fun get ->\n              {\n                Start = get.Required.Field \"Start\" Decode.int\n                Stop = get.Required.Field \"Stop\" Decode.int\n                Text = get.Required.Field \"Text\" Decode.string\n                //everything else is optional\n                ExpandedText = get.Optional.Field \"ExpandedText\" Decode.string |> Option.defaultValue \"\"\n                Id = get.Optional.Field \"Id\" Decode.string |> Option.defaultValue \"\"\n                WavFile = get.Optional.Field \"WavFile\" Decode.string |> Option.defaultValue \"\"\n                FrontAligned = get.Optional.Field \"FrontAligned\" Decode.bool |> Option.defaultValue false\n                EndAligned = get.Optional.Field \"EndAligned\" Decode.bool |> Option.defaultValue false\n                SumAlignmentDiff = get.Optional.Field \"SumAlignmentDiff\" Decode.int |> Option.defaultValue 0\n                ProportionAligned = get.Optional.Field \"ProportionAligned\" Decode.float |> Option.defaultValue 0.\n                Status = get.Optional.Field \"Status\" Decode.string |> Option.defaultValue \"\"\n              }\n          )\n\ntype Mode = | TextEdit | Coding | Loading\ntype Model = \n  {\n    Mode : Mode\n    WavFile : Browser.Types.File option\n    JsonFile : Browser.Types.File option\n    Index : int\n    Datum : Datum\n  }\n\ntype Msg =\n    | UpdateText of string\n    | UpdateExpandedText of string\n    | UpdateWavFile of Browser.Types.FileList\n    | UpdateJsonFile of Browser.Types.FileList\n    | Download\n    | DecodeJson of string\n    | PlayWav\n    | WaveSurferReady\n    | UpdateStart of string\n    | UpdateStop of string\n    | KeyDown of float\n\n/// Mapped to functions for increased speed; some of these aren't used\nmodule Keys =\n    let [<Literal>] Tab = 9.\n    let [<Literal>] Enter = 13. //go to next datum\n    let [<Literal>] Ctrl = 17.\n    let [<Literal>] Alt = 18.\n    let [<Literal>] Escape = 27. //use as mode shift\n    let [<Literal>] Space = 32. //also play wav file\n    let [<Literal>] Left = 37.\n    let [<Literal>] Up = 38. //go to previous datum\n    let [<Literal>] Right = 39.\n    let [<Literal>] Down = 40. //go to next datum\n    let [<Literal>] C = 67. //make a copy (for splitting a record)\n    //keys for adjusting times\n    let [<Literal>] D = 68. //shift start earlier\n    let [<Literal>] F = 70. //shift start later\n    let [<Literal>] J = 74. //shift stop earlier\n    let [<Literal>] K = 75. //shift stop later\n    //mark as good\n    let [<Literal>] G = 71.\n    //keys for coding problems\n    let [<Literal>] M = 77. //music\n    let [<Literal>] N = 78. //noise\n    let [<Literal>] O = 79. //overlapping speech\n    let [<Literal>] W = 87. //wrong character\n    let [<Literal>] X = 88. //other problem\n    //keys for review\n    let [<Literal>] P = 80. //play entire clip\n\nlet subscribeToKeyEvents dispatch =\n    window.addEventListener(\"keydown\", fun ev ->\n        KeyDown (ev :?> KeyboardEvent).keyCode  |> dispatch )\n        \nlet init () : Model * Cmd<Msg> =\n  ( { \n      Mode = Coding\n      WavFile = None//\"*.wav\"\n      JsonFile = None//\"*.json\"\n      Index = 0; \n      Datum =\n        {\n          Start= 0\n          Stop= 0\n          Text= \"\"\n          Id= \"\"\n          WavFile= \"\"\n          FrontAligned= false\n          EndAligned= false\n          SumAlignmentDiff= 0\n          ProportionAligned= 0.\n          ExpandedText= \"\"\n          Status = \"\"\n        }\n    }, [subscribeToKeyEvents] )\n\n//Globals\n// wavesurfer container is in html to avoid handling it through react; we programmatically initialize here\nlet wavesurfer = \n  WaveSurfer.create(\n     createObj [\n      \"container\" ==> \"#waveform\"\n      \"waveColor\" ==> \"violet\"\n      \"progressColor\" ==> \"purple\"\n      \"barHeight\" ==> 10\n      \"minPxPerSec\" ==> 400\n      \"forceDecode\" ==> true\n      \"scrollParent\" ==> true\n    //  This fails unexpectedly, so we use alternative API when wavesurfer fires ready\n    //   \"plugins\" ==> [\n    //     RegionsPlugin.create(  )\n    // ]\n  ]\n)\n\n// Only keeping datum being edited in model at one time; copying all data is slow\nlet data = ResizeArray<Datum>()\n\n//This could be in model if we made it a user option\nlet timeIncrement = 10 //milliseconds\n\n// Update\n// ---------------------------------------\nlet seekWavesurfer( desiredMilliseconds: int ) =\n   wavesurfer.seekTo( float(desiredMilliseconds) / 1000.0 / wavesurfer.getDuration() );\n\nlet seekCenterWavesurfer( desiredMilliseconds: int ) =\n   wavesurfer.seekAndCenter( float(desiredMilliseconds) / 1000.0 / wavesurfer.getDuration() );\n\nlet updateWavesurferRegion( datum: Datum ) =\n  wavesurfer.clearRegions()\n  wavesurfer.addRegion(\n    createObj [\n      \"start\" ==> float(datum.Start) / 1000.0\n      \"end\" ==> float(datum.Stop) / 1000.0\n      \"color\" ==>  \"rgba(0, 0, 0, 0.3)\" \n    ]\n  ) |> ignore //returns the region, but we ignore it\n\nlet boundedTimeShift newTime =\n  if newTime < 0 then\n    0\n  else if newTime > int(wavesurfer.getDuration() * 1000.0) then\n    int(wavesurfer.getDuration() * 1000.0)\n  else\n    newTime\n\nlet nextValidDatumIndex startIndex step =\n  let mutable index = startIndex + step\n  let mutable notFound = true\n  while notFound do\n    //out of bounds set to 0 (even if 0 is filtered)\n    if index < 0 then\n      index <- 0\n      notFound <- false\n    //out of bounds set to max (even if max is filtered)\n    else if \n      index >= data.Count then\n      index <- data.Count - 1\n      notFound <- false\n    //in bounds, filtered, advance\n    else if\n      data.[index].Status = \"automaticallyfiltered\" then\n      index <- index + step\n    //in bounds, regular, stop\n    else\n      notFound <- false\n  //\n  index\n\nlet update msg (model:Model) =\n  match msg with\n\n  | UpdateText(input) ->\n    if model.Mode = TextEdit then\n      let datum = { model.Datum with Text = input }\n      ( {model with Datum=datum}, [])\n    else\n      ( model, [] )\n\n  | UpdateExpandedText(input) ->\n    if model.Mode = TextEdit then\n      let datum = { model.Datum with ExpandedText = input }\n      ( {model with Datum=datum}, [])\n    else\n      ( model, [])\n\n  | UpdateWavFile(input) -> \n    (document.activeElement :?> HTMLElement).blur() //prevent \"enter\" from relaunching dialog\n    let wavesurferLoadCommand dispatch =\n        wavesurfer.on(\"ready\", fun _ -> WaveSurferReady |> dispatch )\n    wavesurfer.loadBlob( input.[0] )\n    ( {model with WavFile = Some(input.[0]); Mode=Loading}, [wavesurferLoadCommand])\n\n  | UpdateJsonFile(input) -> \n    let fileReadCommand dispatch =\n      let fileReader = Browser.Dom.FileReader.Create ()\n      fileReader.onload <- fun _ -> fileReader.result |> unbox<string> |> DecodeJson |> dispatch\n      fileReader.readAsText input.[0]\n    ( {model with JsonFile = Some(input.[0])}, [fileReadCommand] )\n    \n  | DecodeJson(input) ->\n    (document.activeElement :?> HTMLElement).blur() //prevent \"enter\" from relaunching dialog\n    data.Clear()\n    data.AddRange(\n        input \n        |> Decode.unsafeFromString ( Thoth.Json.Decode.array Datum.Decoder ) \n        //deal with bad data; here just invalid start/stop times\n        |> Array.map( fun d -> \n          if d.Start > d.Stop then \n            let center = (d.Start + d.Stop) / 2\n            { d with Start = center - 2000; Stop = center + 2000}\n          else\n            d\n        )) |> ignore\n    let index = nextValidDatumIndex 0 1\n    ( {model with Index=index; Datum=data.[index] }, [])\n\n  | WaveSurferReady -> \n    wavesurfer.addPlugin( RegionsPlugin.create() ) |> ignore\n    wavesurfer.initPlugin( \"regions\" ) |> ignore\n    ( {model with Mode=Coding}, [])\n\n  | PlayWav ->\n    wavesurfer.play ( float(model.Datum.Start) / 1000.0 , float(model.Datum.Stop) / 1000.0 )\n    ( model, [])\n\n  | UpdateStart(input) ->\n    let datum = { model.Datum with Start=System.Int32.Parse(input) }\n    ( {model with Datum=datum }, [])\n\n  | UpdateStop(input) ->\n    let datum = { model.Datum with Stop=System.Int32.Parse(input) }\n    ( {model with Datum=datum }, [])\n\n  | KeyDown code ->\n    match code, model.Mode with\n    //Switch modes\n    | Keys.Escape,_ -> \n      (document.activeElement :?> HTMLElement).blur() //clear focus\n      match model.Mode with\n      | Coding -> { model with Mode=TextEdit},[]\n      | TextEdit -> { model with Mode=Coding},[]\n      | _ -> (model,[])\n    //Play wav clip\n    | Keys.P, Coding \n    | Keys.Space, Coding ->\n      wavesurfer.play ( float(model.Datum.Start) / 1000.0 , float(model.Datum.Stop) / 1000.0 )\n      model,[]\n    //Make a copy of this record and insert in place\n    | Keys.C, Coding ->\n      //duplicate with a unique but derivative id, insert in data, update model\n      let newId = model.Datum.Id + \"-\" + System.DateTime.Now.ToString(\"yyyyMMddHHmmss\")\n      let datum = {model.Datum with Id=newId}\n      data.Insert(model.Index,datum)\n      { model with Datum = datum },[]\n    //Shift start earlier\n    | Keys.D, Coding ->\n      let datum = { model.Datum with Start = boundedTimeShift(model.Datum.Start - timeIncrement)  }\n      updateWavesurferRegion datum\n      { model with Datum = datum },[]\n    //Shift start later\n    | Keys.F, Coding ->\n      let datum = { model.Datum with Start = boundedTimeShift(model.Datum.Start + timeIncrement)  }\n      updateWavesurferRegion datum\n      { model with Datum = datum },[]\n    //Shift stop earlier\n    | Keys.J, Coding ->\n      let datum = { model.Datum with Stop = boundedTimeShift(model.Datum.Stop - timeIncrement)  }\n      updateWavesurferRegion datum\n      { model with Datum = datum },[]\n    //Shift stop later\n    | Keys.K, Coding ->\n      let datum = { model.Datum with Stop = boundedTimeShift(model.Datum.Stop + timeIncrement)  }\n      updateWavesurferRegion datum\n      { model with Datum = datum },[]\n    //Coding status good\n    | Keys.G, Coding -> { model with Datum = {model.Datum with Status = \"good\" }} ,[]\n    //Coding status problem: music\n    | Keys.M, Coding -> { model with Datum = {model.Datum with Status = \"music\" }} ,[]\n    //Coding status problem: noise\n    | Keys.N, Coding -> { model with  Datum = {model.Datum with Status = \"noise\" }},[]\n    //Coding status problem: overlapping speech\n    | Keys.O, Coding -> { model with  Datum = {model.Datum with Status = \"overlapping speech\" }},[]\n    //Coding status problem: wrong character\n    | Keys.W, Coding -> { model with  Datum = {model.Datum with Status = \"wrong character\" }},[]\n    //Coding status problem: x-factor\n    | Keys.X, Coding -> { model with  Datum = {model.Datum with Status = \"other\" }},[]        \n    | Keys.Up,Coding -> \n      data.[model.Index] <- model.Datum //automatically save current datum to global\n      let index = nextValidDatumIndex model.Index -1\n      let datum = data.[index]\n      updateWavesurferRegion datum\n      seekCenterWavesurfer( datum.Start )\n      { model with Index = index; Datum = datum },[]\n    | Keys.Down,Coding \n    | Keys.Enter,Coding -> \n      if wavesurfer.isPlaying() then wavesurfer.pause()\n      data.[model.Index] <- model.Datum //automatically save current datum to global\n      let index = nextValidDatumIndex model.Index 1\n      let datum = data.[index]\n      updateWavesurferRegion datum\n      seekCenterWavesurfer( datum.Start )\n      { model with Index = index; Datum = datum },[]\n    //For all other key commands we do nothing\n    | _,_ -> model,[]\n\n  | Download ->\n      let a = document.createElement(\"a\") :?> Browser.Types.HTMLLinkElement\n      //May need blobs for larger sizes\n      //a.href <- URL.createObjectURL( blob );\n      a.href <- \"data:text/plain;charset=utf-8,\" + JS.encodeURIComponent( data |> toJson )\n      let filename = \n        match  model.JsonFile with\n        | Some(file) -> file.name + \".corrected\"\n        | None -> \"empty\"\n      a.setAttribute(\"download\", filename );\n      a.click()\n      ( model,[] )\n  \n// View\n// ---------------------------------------\nlet simpleButton txt action dispatch =\n  div \n    [ ClassName \"column is-narrow\" ]\n    [ a\n        [ ClassName \"button\"\n          OnClick (fun _ -> action |> dispatch) ]\n    [ str txt ] ]\n\nlet view model dispatch =\n  Section.section [] [\n    //spinner defined in sass\n    div [ ClassName \"loading\"; Hidden ( model.Mode = Mode.Coding || model.Mode = Mode.TextEdit )  ] []\n    Container.container [ Container.IsFluid ] [\n      Heading.h2 [ ] [ str \"Manual Subtitle Speech Alignment\"]\n      Content.content [ ] [\n        p [] [ str \"Load and correct one wav file's worth of speech alignment data at a time. Click on the cat in the corner for more information.\" ]\n      ]\n      Fulma.Columns.columns [] [\n        Fulma.Columns.columns [ Columns.IsCentered ] [\n          Fulma.Column.column [ Column.Width (Screen.All, Column.IsNarrow) ] [\n            Fulma.File.file [ \n              Fulma.File.HasName\n              File.Props [ OnChange (fun ev ->  UpdateWavFile (ev.target?files |> unbox<Browser.Types.FileList>) |> dispatch ) ] \n              ] [ \n              Fulma.File.label [ ] [ \n                Fulma.File.input [ Props [ Accept \".wav\"] ] //audio/*\n                Fulma.File.cta [ ] [ \n                  Fulma.File.icon [ ] [ \n                    Icon.icon [ ] [  \n                      Fa.i [ Fa.Solid.Upload ] []\n                      ]\n                  ]\n                  Fulma.File.label [ ] [ str \"Choose a file...\" ] ]\n                Fulma.File.name [ ] [ str (match model.WavFile with | Some(file) -> file.name | None -> \"*.wav\" ) ] \n              ] \n            ]\n          ]\n        ]\n        Fulma.Column.column [ \n          Column.Width  (Screen.All, Column.IsThreeFifths )  \n          Column.Modifiers [ \n            Modifier.TextAlignment (Screen.All, TextAlignment.Centered) \n            Modifier.TextColor IsPrimary \n            ]\n          ] [\n          str ( match model.Mode with | TextEdit -> \"Text entry mode. Key commands disabled. Press Esc to switch.\" | Coding -> \"Coding mode. Key commands enabled. Press Esc to switch.\" | Loading -> \"Loading wav. Please be patient\") \n        ]\n        Fulma.Columns.columns [ Columns.IsCentered  ] [\n          Fulma.Column.column [ Column.Width (Screen.All, Column.IsNarrow) ] [\n            Fulma.File.file [ \n              Fulma.File.HasName \n              File.Props [ OnChange (fun ev ->  UpdateJsonFile (ev.target?files |> unbox<Browser.Types.FileList>) |> dispatch ) ] \n              ] [ \n              Fulma.File.label [ ] [ \n                Fulma.File.input [ Props [ Accept \".json\" ]]\n                Fulma.File.cta [ ] [ \n                  Fulma.File.icon [ ] [ \n                    Icon.icon [ ] [ \n                      Fa.i [ Fa.Solid.Upload ] []\n                      ]\n                  ]\n                  Fulma.File.label [ ] [ str \"Choose a file...\" ] ]\n                Fulma.File.name [ ] [ str (match model.JsonFile with | Some(file) -> file.name | None -> \"*.json\" ) ] \n              ] \n            ] \n          ]\n        ]\n      ]\n      //editing \n      Fulma.Columns.columns [] [\n        Fulma.Columns.columns [ Columns.IsCentered ] [\n          Fulma.Column.column [ Column.Width (Screen.All, Column.IsNarrow) ] [\n            p [] [ str \"Start time (milliseconds)\" ] \n            Input.text [\n                  Input.Color IsPrimary\n                  Input.IsRounded\n                  Input.Value ( model.Datum.Start.ToString() )\n                  Input.Props [ OnChange (fun ev ->  !!ev.target?value |> UpdateStart|> dispatch ) ]\n                ]\n          ]\n        ]\n        \n        Fulma.Column.column [ Column.Width  (Screen.All, Column.IsThreeFifths )  ] [\n          str \"Text\"\n          textarea [\n            ClassName \"input\"\n            Value model.Datum.Text\n            Size 100.0\n            Style [\n                Width \"100%\"\n                Height \"75px\"\n            ] \n            OnChange (fun ev ->  !!ev.target?value |> UpdateText|> dispatch )\n          ] []\n     \n          str \"Text with numerics expanded to words\" \n          textarea [\n            ClassName \"input\"\n            Value model.Datum.ExpandedText\n            Size 100.0\n            Style [\n                Width \"100%\"\n                Height \"75px\"\n            ] \n            OnChange (fun ev ->  !!ev.target?value |> UpdateExpandedText |> dispatch )\n          ] []\n        ]\n        Fulma.Columns.columns [ Columns.IsCentered ] [\n          Fulma.Column.column [ Column.Width (Screen.All, Column.IsNarrow) ] [\n            p [] [ str \"Stop time (milliseconds)\" ]\n            Input.text [\n              Input.Color IsPrimary\n              Input.IsRounded\n              Input.Value ( model.Datum.Stop.ToString() )\n              Input.Props [ OnChange (fun ev ->  !!ev.target?value |> UpdateStop|> dispatch ) ]\n            ]\n          ]\n        ]\n      ]\n\n      Fulma.Columns.columns [ Columns.IsCentered ] [\n        Fulma.Column.column [ Column.Width (Screen.All, Column.IsNarrow) ] [\n          //debuggy but also generally useful\n          pre [  Style [FontSize 10.0 ] ] [ str (model.Datum |> toJson) ]\n        ]\n        Fulma.Column.column [ Column.Width (Screen.All, Column.IsNarrow) ] [\n          Button.button [ \n            Button.Color IsPrimary\n            Button.OnClick (fun _ -> dispatch Download )\n            ] [ str \"Get Results\" ]\n        ]\n        Fulma.Column.column [ Column.Width (Screen.All, Column.IsNarrow) ] [\n          Dropdown.dropdown [ Dropdown.IsHoverable ]\n            [ div [ ]\n                [ Button.button [ ]\n                    [ span [ ]\n                        [ str \"Key Command Menu\" ]\n                      Icon.icon [ Icon.Size IsSmall ]\n                        [ Fa.i [ Fa.Solid.AngleDown ]\n                            [ ] ] ] ]\n              Dropdown.menu [ ]\n                [ Dropdown.content [ ]\n                    [ Dropdown.Item.a [ ]\n                        [ str \"Esc -> Change mode\" ]\n                      Dropdown.Item.a [ ]\n                        [ str \"Up Arrow -> Previous datum\" ]\n                      Dropdown.Item.a [ ]\n                        [ str \"Down Arrow -> Next datum\" ]\n                      Dropdown.Item.a [ ]\n                        [ str \"Enter -> Next datum\" ]\n                      Dropdown.Item.a [ ]\n                        [ str \"C -> Copy (for splitting)\" ]\n                      Dropdown.Item.a [ ]\n                        [ str \"D -> Shift start earlier\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"F -> Shift start later\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"J -> Shift stop earlier\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"K -> Shift stop later\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"P or Space -> Play datum audio\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"G -> Status good\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"M -> Status music problem\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"N -> Status noise problem\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"O -> Status overlapping speech\" ] \n                      Dropdown.Item.a [ ]\n                        [ str \"W -> Status wrong character\" ]  \n                      Dropdown.Item.a [ ]\n                        [ str \"X -> Status bad other\" ]                                                                                                                                                                                                                         \n                        ] ] ]\n        ]\n      ]\n    ]  \n  ]\n\n// App\nProgram.mkProgram init update view\n#if DEBUG\n|> Program.withDebugger\n|> Program.withConsoleTrace\n//|> Program.withHMR //deprecated???\n#endif\n|> Program.withReactSynchronous \"elmish-app\" //batched makes input cursor jump to end of box\n|> Program.run\n"],"sourceRoot":""}